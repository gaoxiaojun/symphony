// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DTCProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DTCProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DTC_PB {

namespace {

const ::google::protobuf::Descriptor* EncodingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncodingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncodingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncodingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logoff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logoff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataFeedStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataFeedStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataFeedSymbolStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataFeedSymbolStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDepthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDepthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataSnapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataSnapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataSnapshot_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataSnapshot_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepthEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepthEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDepthFullUpdate20_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDepthFullUpdate20_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDepthFullUpdate10_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDepthFullUpdate10_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDepthSnapshotLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDepthSnapshotLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDepthSnapshotLevel_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDepthSnapshotLevel_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDepthUpdateLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDepthUpdateLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDepthUpdateLevel_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDepthUpdateLevel_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDepthUpdateLevelCompact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDepthUpdateLevelCompact_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateSessionSettlement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateSessionSettlement_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateSessionSettlement_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateSessionSettlement_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateSessionOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateSessionOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateSessionOpen_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateSessionOpen_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDepthReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDepthReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateTrade_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateTrade_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateBidAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateBidAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateBidAsk_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateBidAsk_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateBidAskCompact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateBidAskCompact_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateTradeCompact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateTradeCompact_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateSessionVolume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateSessionVolume_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateOpenInterest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateOpenInterest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateSessionHigh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateSessionHigh_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateSessionHigh_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateSessionHigh_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateSessionLow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateSessionLow_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateSessionLow_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateSessionLow_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataUpdateLastTradeSnapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataUpdateLastTradeSnapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitNewSingleOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitNewSingleOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitNewSingleOrderInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitNewSingleOrderInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelReplaceOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelReplaceOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelReplaceOrderInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelReplaceOrderInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitNewOCOOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitNewOCOOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitNewOCOOrderInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitNewOCOOrderInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenOrdersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenOrdersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalOrderFillsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalOrderFillsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalOrderFillsReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalOrderFillsReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentPositionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentPositionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentPositionsReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentPositionsReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenOrdersReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenOrdersReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalOrderFillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalOrderFillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeAccountsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeAccountsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeAccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeAccountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolsForExchangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolsForExchangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnderlyingSymbolsForExchangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnderlyingSymbolsForExchangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolsForUnderlyingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolsForUnderlyingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolSearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolSearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityDefinitionForSymbolRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityDefinitionForSymbolRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityDefinitionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityDefinitionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityDefinitionReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityDefinitionReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountBalanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountBalanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountBalanceReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountBalanceReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountBalanceUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountBalanceUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeneralLogMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralLogMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalPriceDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalPriceDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalPriceDataResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalPriceDataResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalPriceDataReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalPriceDataReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalPriceDataRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalPriceDataRecordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalPriceDataTickRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalPriceDataTickRecordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalPriceDataRecordResponse_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalPriceDataRecordResponse_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalPriceDataTickRecordResponse_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalPriceDataTickRecordResponse_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoricalPriceDataResponseTrailer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoricalPriceDataResponseTrailer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DTCVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DTCMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EncodingEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogonStatusEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageSupportedEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradeModeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestActionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderStatusEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderUpdateReasonEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AtBidOrAskEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketDepthUpdateTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeInForceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuySellEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OpenCloseTradeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketDataFeedStatusEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriceDisplayFormatEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PutCallEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HistoricalDataIntervalEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DTCProtocol_2eproto() {
  protobuf_AddDesc_DTCProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DTCProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  EncodingRequest_descriptor_ = file->message_type(0);
  static const int EncodingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodingRequest, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodingRequest, encoding_),
  };
  EncodingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncodingRequest_descriptor_,
      EncodingRequest::default_instance_,
      EncodingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncodingRequest));
  EncodingResponse_descriptor_ = file->message_type(1);
  static const int EncodingResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodingResponse, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodingResponse, encoding_),
  };
  EncodingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncodingResponse_descriptor_,
      EncodingResponse::default_instance_,
      EncodingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncodingResponse));
  LogonRequest_descriptor_ = file->message_type(2);
  static const int LogonRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, generaltextdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, integer_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, integer_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, heartbeatintervalinseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, trademode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, hardwareidentifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, clientname_),
  };
  LogonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogonRequest_descriptor_,
      LogonRequest::default_instance_,
      LogonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogonRequest));
  LogonResponse_descriptor_ = file->message_type(3);
  static const int LogonResponse_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, resulttext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, reconnectaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, integer_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, marketdepthupdatesbestbidandask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, tradingissupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, ocoorderssupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, ordercancelreplacesupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, symbolexchangedelimiter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, securitydefinitionssupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, historicalpricedatasupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, resubscribewhenmarketdatafeedavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, marketdepthissupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, onehistoricalpricedatarequestperconnection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, bracketorderssupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, useintegerpriceordermessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, usesmultiplepositionspersymbolandtradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, marketdatasupported_),
  };
  LogonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogonResponse_descriptor_,
      LogonResponse::default_instance_,
      LogonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogonResponse));
  Logoff_descriptor_ = file->message_type(4);
  static const int Logoff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logoff, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logoff, donotreconnect_),
  };
  Logoff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logoff_descriptor_,
      Logoff::default_instance_,
      Logoff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logoff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logoff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logoff));
  Heartbeat_descriptor_ = file->message_type(5);
  static const int Heartbeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, numdroppedmessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, currentdatetime_),
  };
  Heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Heartbeat_descriptor_,
      Heartbeat::default_instance_,
      Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Heartbeat));
  MarketDataFeedStatus_descriptor_ = file->message_type(6);
  static const int MarketDataFeedStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedStatus, status_),
  };
  MarketDataFeedStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataFeedStatus_descriptor_,
      MarketDataFeedStatus::default_instance_,
      MarketDataFeedStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataFeedStatus));
  MarketDataFeedSymbolStatus_descriptor_ = file->message_type(7);
  static const int MarketDataFeedSymbolStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedSymbolStatus, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedSymbolStatus, status_),
  };
  MarketDataFeedSymbolStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataFeedSymbolStatus_descriptor_,
      MarketDataFeedSymbolStatus::default_instance_,
      MarketDataFeedSymbolStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedSymbolStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedSymbolStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataFeedSymbolStatus));
  MarketDataRequest_descriptor_ = file->message_type(8);
  static const int MarketDataRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataRequest, requestaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataRequest, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataRequest, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataRequest, exchange_),
  };
  MarketDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataRequest_descriptor_,
      MarketDataRequest::default_instance_,
      MarketDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataRequest));
  MarketDepthRequest_descriptor_ = file->message_type(9);
  static const int MarketDepthRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthRequest, requestaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthRequest, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthRequest, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthRequest, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthRequest, numlevels_),
  };
  MarketDepthRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDepthRequest_descriptor_,
      MarketDepthRequest::default_instance_,
      MarketDepthRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDepthRequest));
  MarketDataReject_descriptor_ = file->message_type(10);
  static const int MarketDataReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataReject, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataReject, rejecttext_),
  };
  MarketDataReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataReject_descriptor_,
      MarketDataReject::default_instance_,
      MarketDataReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataReject));
  MarketDataSnapshot_descriptor_ = file->message_type(11);
  static const int MarketDataSnapshot_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, sessionsettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, sessionopenprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, sessionhighprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, sessionlowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, sessionvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, sessionnumtrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, askquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, bidquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, lasttradeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, lasttradevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, lasttradedatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, bidaskdatetime_),
  };
  MarketDataSnapshot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataSnapshot_descriptor_,
      MarketDataSnapshot::default_instance_,
      MarketDataSnapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataSnapshot));
  MarketDataSnapshot_Int_descriptor_ = file->message_type(12);
  static const int MarketDataSnapshot_Int_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, sessionsettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, sessionopenprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, sessionhighprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, sessionlowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, sessionvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, sessionnumtrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, askquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, bidquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, lasttradeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, lasttradevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, lasttradedatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, bidaskdatetime_),
  };
  MarketDataSnapshot_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataSnapshot_Int_descriptor_,
      MarketDataSnapshot_Int::default_instance_,
      MarketDataSnapshot_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSnapshot_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataSnapshot_Int));
  DepthEntry_descriptor_ = file->message_type(13);
  static const int DepthEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthEntry, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthEntry, quantity_),
  };
  DepthEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepthEntry_descriptor_,
      DepthEntry::default_instance_,
      DepthEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepthEntry));
  MarketDepthFullUpdate20_descriptor_ = file->message_type(14);
  static const int MarketDepthFullUpdate20_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate20, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate20, biddepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate20, askdepth_),
  };
  MarketDepthFullUpdate20_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDepthFullUpdate20_descriptor_,
      MarketDepthFullUpdate20::default_instance_,
      MarketDepthFullUpdate20_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate20, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate20, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDepthFullUpdate20));
  MarketDepthFullUpdate10_descriptor_ = file->message_type(15);
  static const int MarketDepthFullUpdate10_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate10, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate10, biddepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate10, askdepth_),
  };
  MarketDepthFullUpdate10_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDepthFullUpdate10_descriptor_,
      MarketDepthFullUpdate10::default_instance_,
      MarketDepthFullUpdate10_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate10, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthFullUpdate10, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDepthFullUpdate10));
  MarketDepthSnapshotLevel_descriptor_ = file->message_type(16);
  static const int MarketDepthSnapshotLevel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel, isfirstmessageinbatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel, islastmessageinbatch_),
  };
  MarketDepthSnapshotLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDepthSnapshotLevel_descriptor_,
      MarketDepthSnapshotLevel::default_instance_,
      MarketDepthSnapshotLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDepthSnapshotLevel));
  MarketDepthSnapshotLevel_Int_descriptor_ = file->message_type(17);
  static const int MarketDepthSnapshotLevel_Int_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel_Int, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel_Int, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel_Int, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel_Int, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel_Int, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel_Int, isfirstmessageinbatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel_Int, islastmessageinbatch_),
  };
  MarketDepthSnapshotLevel_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDepthSnapshotLevel_Int_descriptor_,
      MarketDepthSnapshotLevel_Int::default_instance_,
      MarketDepthSnapshotLevel_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthSnapshotLevel_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDepthSnapshotLevel_Int));
  MarketDepthUpdateLevel_descriptor_ = file->message_type(18);
  static const int MarketDepthUpdateLevel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel, updatetype_),
  };
  MarketDepthUpdateLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDepthUpdateLevel_descriptor_,
      MarketDepthUpdateLevel::default_instance_,
      MarketDepthUpdateLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDepthUpdateLevel));
  MarketDepthUpdateLevel_Int_descriptor_ = file->message_type(19);
  static const int MarketDepthUpdateLevel_Int_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel_Int, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel_Int, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel_Int, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel_Int, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel_Int, updatetype_),
  };
  MarketDepthUpdateLevel_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDepthUpdateLevel_Int_descriptor_,
      MarketDepthUpdateLevel_Int::default_instance_,
      MarketDepthUpdateLevel_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevel_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDepthUpdateLevel_Int));
  MarketDepthUpdateLevelCompact_descriptor_ = file->message_type(20);
  static const int MarketDepthUpdateLevelCompact_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevelCompact, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevelCompact, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevelCompact, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevelCompact, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevelCompact, updatetype_),
  };
  MarketDepthUpdateLevelCompact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDepthUpdateLevelCompact_descriptor_,
      MarketDepthUpdateLevelCompact::default_instance_,
      MarketDepthUpdateLevelCompact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevelCompact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthUpdateLevelCompact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDepthUpdateLevelCompact));
  MarketDataUpdateSessionSettlement_descriptor_ = file->message_type(21);
  static const int MarketDataUpdateSessionSettlement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionSettlement, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionSettlement, price_),
  };
  MarketDataUpdateSessionSettlement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateSessionSettlement_descriptor_,
      MarketDataUpdateSessionSettlement::default_instance_,
      MarketDataUpdateSessionSettlement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionSettlement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionSettlement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateSessionSettlement));
  MarketDataUpdateSessionSettlement_Int_descriptor_ = file->message_type(22);
  static const int MarketDataUpdateSessionSettlement_Int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionSettlement_Int, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionSettlement_Int, price_),
  };
  MarketDataUpdateSessionSettlement_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateSessionSettlement_Int_descriptor_,
      MarketDataUpdateSessionSettlement_Int::default_instance_,
      MarketDataUpdateSessionSettlement_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionSettlement_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionSettlement_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateSessionSettlement_Int));
  MarketDataUpdateSessionOpen_descriptor_ = file->message_type(23);
  static const int MarketDataUpdateSessionOpen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionOpen, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionOpen, price_),
  };
  MarketDataUpdateSessionOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateSessionOpen_descriptor_,
      MarketDataUpdateSessionOpen::default_instance_,
      MarketDataUpdateSessionOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateSessionOpen));
  MarketDataUpdateSessionOpen_Int_descriptor_ = file->message_type(24);
  static const int MarketDataUpdateSessionOpen_Int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionOpen_Int, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionOpen_Int, price_),
  };
  MarketDataUpdateSessionOpen_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateSessionOpen_Int_descriptor_,
      MarketDataUpdateSessionOpen_Int::default_instance_,
      MarketDataUpdateSessionOpen_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionOpen_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionOpen_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateSessionOpen_Int));
  MarketDepthReject_descriptor_ = file->message_type(25);
  static const int MarketDepthReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthReject, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthReject, rejecttext_),
  };
  MarketDepthReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDepthReject_descriptor_,
      MarketDepthReject::default_instance_,
      MarketDepthReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDepthReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDepthReject));
  MarketDataUpdateTrade_descriptor_ = file->message_type(26);
  static const int MarketDataUpdateTrade_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade, atbidorask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade, datetime_),
  };
  MarketDataUpdateTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateTrade_descriptor_,
      MarketDataUpdateTrade::default_instance_,
      MarketDataUpdateTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateTrade));
  MarketDataUpdateTrade_Int_descriptor_ = file->message_type(27);
  static const int MarketDataUpdateTrade_Int_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade_Int, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade_Int, atbidorask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade_Int, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade_Int, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade_Int, datetime_),
  };
  MarketDataUpdateTrade_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateTrade_Int_descriptor_,
      MarketDataUpdateTrade_Int::default_instance_,
      MarketDataUpdateTrade_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTrade_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateTrade_Int));
  MarketDataUpdateBidAsk_descriptor_ = file->message_type(28);
  static const int MarketDataUpdateBidAsk_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk, bidquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk, askquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk, datetime_),
  };
  MarketDataUpdateBidAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateBidAsk_descriptor_,
      MarketDataUpdateBidAsk::default_instance_,
      MarketDataUpdateBidAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateBidAsk));
  MarketDataUpdateBidAsk_Int_descriptor_ = file->message_type(29);
  static const int MarketDataUpdateBidAsk_Int_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk_Int, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk_Int, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk_Int, bidquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk_Int, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk_Int, askquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk_Int, datetime_),
  };
  MarketDataUpdateBidAsk_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateBidAsk_Int_descriptor_,
      MarketDataUpdateBidAsk_Int::default_instance_,
      MarketDataUpdateBidAsk_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAsk_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateBidAsk_Int));
  MarketDataUpdateBidAskCompact_descriptor_ = file->message_type(30);
  static const int MarketDataUpdateBidAskCompact_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAskCompact, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAskCompact, bidquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAskCompact, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAskCompact, askquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAskCompact, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAskCompact, symbolid_),
  };
  MarketDataUpdateBidAskCompact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateBidAskCompact_descriptor_,
      MarketDataUpdateBidAskCompact::default_instance_,
      MarketDataUpdateBidAskCompact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAskCompact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateBidAskCompact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateBidAskCompact));
  MarketDataUpdateTradeCompact_descriptor_ = file->message_type(31);
  static const int MarketDataUpdateTradeCompact_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTradeCompact, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTradeCompact, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTradeCompact, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTradeCompact, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTradeCompact, atbidorask_),
  };
  MarketDataUpdateTradeCompact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateTradeCompact_descriptor_,
      MarketDataUpdateTradeCompact::default_instance_,
      MarketDataUpdateTradeCompact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTradeCompact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateTradeCompact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateTradeCompact));
  MarketDataUpdateSessionVolume_descriptor_ = file->message_type(32);
  static const int MarketDataUpdateSessionVolume_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionVolume, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionVolume, volume_),
  };
  MarketDataUpdateSessionVolume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateSessionVolume_descriptor_,
      MarketDataUpdateSessionVolume::default_instance_,
      MarketDataUpdateSessionVolume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionVolume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionVolume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateSessionVolume));
  MarketDataUpdateOpenInterest_descriptor_ = file->message_type(33);
  static const int MarketDataUpdateOpenInterest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateOpenInterest, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateOpenInterest, openinterest_),
  };
  MarketDataUpdateOpenInterest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateOpenInterest_descriptor_,
      MarketDataUpdateOpenInterest::default_instance_,
      MarketDataUpdateOpenInterest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateOpenInterest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateOpenInterest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateOpenInterest));
  MarketDataUpdateSessionHigh_descriptor_ = file->message_type(34);
  static const int MarketDataUpdateSessionHigh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionHigh, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionHigh, price_),
  };
  MarketDataUpdateSessionHigh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateSessionHigh_descriptor_,
      MarketDataUpdateSessionHigh::default_instance_,
      MarketDataUpdateSessionHigh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionHigh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionHigh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateSessionHigh));
  MarketDataUpdateSessionHigh_Int_descriptor_ = file->message_type(35);
  static const int MarketDataUpdateSessionHigh_Int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionHigh_Int, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionHigh_Int, price_),
  };
  MarketDataUpdateSessionHigh_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateSessionHigh_Int_descriptor_,
      MarketDataUpdateSessionHigh_Int::default_instance_,
      MarketDataUpdateSessionHigh_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionHigh_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionHigh_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateSessionHigh_Int));
  MarketDataUpdateSessionLow_descriptor_ = file->message_type(36);
  static const int MarketDataUpdateSessionLow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionLow, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionLow, price_),
  };
  MarketDataUpdateSessionLow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateSessionLow_descriptor_,
      MarketDataUpdateSessionLow::default_instance_,
      MarketDataUpdateSessionLow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionLow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionLow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateSessionLow));
  MarketDataUpdateSessionLow_Int_descriptor_ = file->message_type(37);
  static const int MarketDataUpdateSessionLow_Int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionLow_Int, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionLow_Int, price_),
  };
  MarketDataUpdateSessionLow_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateSessionLow_Int_descriptor_,
      MarketDataUpdateSessionLow_Int::default_instance_,
      MarketDataUpdateSessionLow_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionLow_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateSessionLow_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateSessionLow_Int));
  MarketDataUpdateLastTradeSnapshot_descriptor_ = file->message_type(38);
  static const int MarketDataUpdateLastTradeSnapshot_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateLastTradeSnapshot, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateLastTradeSnapshot, lasttradeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateLastTradeSnapshot, lasttradevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateLastTradeSnapshot, lasttradedatetime_),
  };
  MarketDataUpdateLastTradeSnapshot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataUpdateLastTradeSnapshot_descriptor_,
      MarketDataUpdateLastTradeSnapshot::default_instance_,
      MarketDataUpdateLastTradeSnapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateLastTradeSnapshot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataUpdateLastTradeSnapshot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataUpdateLastTradeSnapshot));
  SubmitNewSingleOrder_descriptor_ = file->message_type(39);
  static const int SubmitNewSingleOrder_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, clientorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, buysell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, price1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, timeinforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, goodtilldatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, isautomatedorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, isparentorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, freeformtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, openorclose_),
  };
  SubmitNewSingleOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitNewSingleOrder_descriptor_,
      SubmitNewSingleOrder::default_instance_,
      SubmitNewSingleOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitNewSingleOrder));
  SubmitNewSingleOrderInt_descriptor_ = file->message_type(40);
  static const int SubmitNewSingleOrderInt_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, clientorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, buysell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, price1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, divisor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, timeinforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, goodtilldatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, isautomatedorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, isparentorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, freeformtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, openorclose_),
  };
  SubmitNewSingleOrderInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitNewSingleOrderInt_descriptor_,
      SubmitNewSingleOrderInt::default_instance_,
      SubmitNewSingleOrderInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewSingleOrderInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitNewSingleOrderInt));
  CancelReplaceOrder_descriptor_ = file->message_type(41);
  static const int CancelReplaceOrder_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrder, serverorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrder, clientorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrder, price1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrder, price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrder, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrder, price1isset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrder, price2isset_),
  };
  CancelReplaceOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelReplaceOrder_descriptor_,
      CancelReplaceOrder::default_instance_,
      CancelReplaceOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelReplaceOrder));
  CancelReplaceOrderInt_descriptor_ = file->message_type(42);
  static const int CancelReplaceOrderInt_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, serverorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, clientorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, price1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, divisor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, price1isset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, price2isset_),
  };
  CancelReplaceOrderInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelReplaceOrderInt_descriptor_,
      CancelReplaceOrderInt::default_instance_,
      CancelReplaceOrderInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReplaceOrderInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelReplaceOrderInt));
  CancelOrder_descriptor_ = file->message_type(43);
  static const int CancelOrder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, serverorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, clientorderid_),
  };
  CancelOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelOrder_descriptor_,
      CancelOrder::default_instance_,
      CancelOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelOrder));
  SubmitNewOCOOrder_descriptor_ = file->message_type(44);
  static const int SubmitNewOCOOrder_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, clientorderid_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, ordertype_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, buysell_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, price1_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, price2_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, quantity_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, clientorderid_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, ordertype_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, buysell_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, price1_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, price2_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, quantity_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, timeinforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, goodtilldatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, isautomatedorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, parenttriggerclientorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, freeformtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, openorclose_),
  };
  SubmitNewOCOOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitNewOCOOrder_descriptor_,
      SubmitNewOCOOrder::default_instance_,
      SubmitNewOCOOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitNewOCOOrder));
  SubmitNewOCOOrderInt_descriptor_ = file->message_type(45);
  static const int SubmitNewOCOOrderInt_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, clientorderid_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, ordertype_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, buysell_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, price1_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, price2_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, quantity_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, clientorderid_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, ordertype_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, buysell_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, price1_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, price2_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, quantity_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, timeinforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, goodtilldatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, isautomatedorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, parenttriggerclientorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, freeformtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, divisor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, openorclose_),
  };
  SubmitNewOCOOrderInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitNewOCOOrderInt_descriptor_,
      SubmitNewOCOOrderInt::default_instance_,
      SubmitNewOCOOrderInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitNewOCOOrderInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitNewOCOOrderInt));
  OpenOrdersRequest_descriptor_ = file->message_type(46);
  static const int OpenOrdersRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrdersRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrdersRequest, requestallorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrdersRequest, serverorderid_),
  };
  OpenOrdersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenOrdersRequest_descriptor_,
      OpenOrdersRequest::default_instance_,
      OpenOrdersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrdersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrdersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenOrdersRequest));
  HistoricalOrderFillsRequest_descriptor_ = file->message_type(47);
  static const int HistoricalOrderFillsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsRequest, serverorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsRequest, numberofdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsRequest, tradeaccount_),
  };
  HistoricalOrderFillsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalOrderFillsRequest_descriptor_,
      HistoricalOrderFillsRequest::default_instance_,
      HistoricalOrderFillsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalOrderFillsRequest));
  HistoricalOrderFillsReject_descriptor_ = file->message_type(48);
  static const int HistoricalOrderFillsReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsReject, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsReject, rejecttext_),
  };
  HistoricalOrderFillsReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalOrderFillsReject_descriptor_,
      HistoricalOrderFillsReject::default_instance_,
      HistoricalOrderFillsReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillsReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalOrderFillsReject));
  CurrentPositionsRequest_descriptor_ = file->message_type(49);
  static const int CurrentPositionsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPositionsRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPositionsRequest, tradeaccount_),
  };
  CurrentPositionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentPositionsRequest_descriptor_,
      CurrentPositionsRequest::default_instance_,
      CurrentPositionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPositionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPositionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentPositionsRequest));
  CurrentPositionsReject_descriptor_ = file->message_type(50);
  static const int CurrentPositionsReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPositionsReject, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPositionsReject, rejecttext_),
  };
  CurrentPositionsReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentPositionsReject_descriptor_,
      CurrentPositionsReject::default_instance_,
      CurrentPositionsReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPositionsReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPositionsReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentPositionsReject));
  OrderUpdate_descriptor_ = file->message_type(51);
  static const int OrderUpdate_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, totalnummessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, messagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, previousserverorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, serverorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, clientorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, exchangeorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, orderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, orderupdatereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, buysell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, price1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, timeinforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, goodtilldatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, orderquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, filledquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, remainingquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, averagefillprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, lastfillprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, lastfilldatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, lastfillquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, lastfillexecutionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, infotext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, noorders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, parentserverorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, ocolinkedorderserverorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, openorclose_),
  };
  OrderUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderUpdate_descriptor_,
      OrderUpdate::default_instance_,
      OrderUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderUpdate));
  OpenOrdersReject_descriptor_ = file->message_type(52);
  static const int OpenOrdersReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrdersReject, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrdersReject, rejecttext_),
  };
  OpenOrdersReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenOrdersReject_descriptor_,
      OpenOrdersReject::default_instance_,
      OpenOrdersReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrdersReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOrdersReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenOrdersReject));
  HistoricalOrderFillResponse_descriptor_ = file->message_type(53);
  static const int HistoricalOrderFillResponse_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, totalnumbermessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, messagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, serverorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, buysell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, uniqueexecutionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, openclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, noorderfills_),
  };
  HistoricalOrderFillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalOrderFillResponse_descriptor_,
      HistoricalOrderFillResponse::default_instance_,
      HistoricalOrderFillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalOrderFillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalOrderFillResponse));
  PositionUpdate_descriptor_ = file->message_type(54);
  static const int PositionUpdate_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, totalnumbermessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, messagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, averageprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, positionidentifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, nopositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, unsolicited_),
  };
  PositionUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionUpdate_descriptor_,
      PositionUpdate::default_instance_,
      PositionUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionUpdate));
  TradeAccountsRequest_descriptor_ = file->message_type(55);
  static const int TradeAccountsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAccountsRequest, requestid_),
  };
  TradeAccountsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeAccountsRequest_descriptor_,
      TradeAccountsRequest::default_instance_,
      TradeAccountsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAccountsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAccountsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeAccountsRequest));
  TradeAccountResponse_descriptor_ = file->message_type(56);
  static const int TradeAccountResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAccountResponse, totalnumbermessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAccountResponse, messagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAccountResponse, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAccountResponse, requestid_),
  };
  TradeAccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeAccountResponse_descriptor_,
      TradeAccountResponse::default_instance_,
      TradeAccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeAccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeAccountResponse));
  ExchangeListRequest_descriptor_ = file->message_type(57);
  static const int ExchangeListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeListRequest, requestid_),
  };
  ExchangeListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeListRequest_descriptor_,
      ExchangeListRequest::default_instance_,
      ExchangeListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeListRequest));
  ExchangeListResponse_descriptor_ = file->message_type(58);
  static const int ExchangeListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeListResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeListResponse, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeListResponse, isfinalmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeListResponse, description_),
  };
  ExchangeListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeListResponse_descriptor_,
      ExchangeListResponse::default_instance_,
      ExchangeListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeListResponse));
  SymbolsForExchangeRequest_descriptor_ = file->message_type(59);
  static const int SymbolsForExchangeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForExchangeRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForExchangeRequest, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForExchangeRequest, securitytype_),
  };
  SymbolsForExchangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolsForExchangeRequest_descriptor_,
      SymbolsForExchangeRequest::default_instance_,
      SymbolsForExchangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForExchangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForExchangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolsForExchangeRequest));
  UnderlyingSymbolsForExchangeRequest_descriptor_ = file->message_type(60);
  static const int UnderlyingSymbolsForExchangeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingSymbolsForExchangeRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingSymbolsForExchangeRequest, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingSymbolsForExchangeRequest, securitytype_),
  };
  UnderlyingSymbolsForExchangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnderlyingSymbolsForExchangeRequest_descriptor_,
      UnderlyingSymbolsForExchangeRequest::default_instance_,
      UnderlyingSymbolsForExchangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingSymbolsForExchangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingSymbolsForExchangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnderlyingSymbolsForExchangeRequest));
  SymbolsForUnderlyingRequest_descriptor_ = file->message_type(61);
  static const int SymbolsForUnderlyingRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForUnderlyingRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForUnderlyingRequest, underlyingsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForUnderlyingRequest, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForUnderlyingRequest, securitytype_),
  };
  SymbolsForUnderlyingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolsForUnderlyingRequest_descriptor_,
      SymbolsForUnderlyingRequest::default_instance_,
      SymbolsForUnderlyingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForUnderlyingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolsForUnderlyingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolsForUnderlyingRequest));
  SymbolSearchRequest_descriptor_ = file->message_type(62);
  static const int SymbolSearchRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSearchRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSearchRequest, searchtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSearchRequest, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSearchRequest, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSearchRequest, searchtype_),
  };
  SymbolSearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolSearchRequest_descriptor_,
      SymbolSearchRequest::default_instance_,
      SymbolSearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolSearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolSearchRequest));
  SecurityDefinitionForSymbolRequest_descriptor_ = file->message_type(63);
  static const int SecurityDefinitionForSymbolRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionForSymbolRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionForSymbolRequest, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionForSymbolRequest, exchange_),
  };
  SecurityDefinitionForSymbolRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityDefinitionForSymbolRequest_descriptor_,
      SecurityDefinitionForSymbolRequest::default_instance_,
      SecurityDefinitionForSymbolRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionForSymbolRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionForSymbolRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityDefinitionForSymbolRequest));
  SecurityDefinitionResponse_descriptor_ = file->message_type(64);
  static const int SecurityDefinitionResponse_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, minpriceincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, pricedisplayformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, currencyvalueperincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, isfinalmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, floattointpricemultiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, inttofloatpricedivisor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, underlyingsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, updatesbidaskonly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, strikeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, putorcall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, shortinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, securityexpirationdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, buyrolloverinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, sellrolloverinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, earningspershare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, sharesoutstanding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, inttofloatquantitydivisor_),
  };
  SecurityDefinitionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityDefinitionResponse_descriptor_,
      SecurityDefinitionResponse::default_instance_,
      SecurityDefinitionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityDefinitionResponse));
  SecurityDefinitionReject_descriptor_ = file->message_type(65);
  static const int SecurityDefinitionReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionReject, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionReject, rejecttext_),
  };
  SecurityDefinitionReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityDefinitionReject_descriptor_,
      SecurityDefinitionReject::default_instance_,
      SecurityDefinitionReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityDefinitionReject));
  AccountBalanceRequest_descriptor_ = file->message_type(66);
  static const int AccountBalanceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceRequest, tradeaccount_),
  };
  AccountBalanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountBalanceRequest_descriptor_,
      AccountBalanceRequest::default_instance_,
      AccountBalanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountBalanceRequest));
  AccountBalanceReject_descriptor_ = file->message_type(67);
  static const int AccountBalanceReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceReject, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceReject, rejecttext_),
  };
  AccountBalanceReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountBalanceReject_descriptor_,
      AccountBalanceReject::default_instance_,
      AccountBalanceReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountBalanceReject));
  AccountBalanceUpdate_descriptor_ = file->message_type(68);
  static const int AccountBalanceUpdate_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, cashbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, balanceavailablefornewpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, accountcurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, tradeaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, securitiesvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, marginrequirement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, totalnumbermessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, messagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, noaccountbalances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, unsolicited_),
  };
  AccountBalanceUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountBalanceUpdate_descriptor_,
      AccountBalanceUpdate::default_instance_,
      AccountBalanceUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBalanceUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountBalanceUpdate));
  UserMessage_descriptor_ = file->message_type(69);
  static const int UserMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, usermessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, ispopupmessage_),
  };
  UserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMessage_descriptor_,
      UserMessage::default_instance_,
      UserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMessage));
  GeneralLogMessage_descriptor_ = file->message_type(70);
  static const int GeneralLogMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralLogMessage, messagetext_),
  };
  GeneralLogMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeneralLogMessage_descriptor_,
      GeneralLogMessage::default_instance_,
      GeneralLogMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralLogMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralLogMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeneralLogMessage));
  HistoricalPriceDataRequest_descriptor_ = file->message_type(71);
  static const int HistoricalPriceDataRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, recordinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, startdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, enddatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, maxdaystoreturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, usezlibcompression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, requestdividendadjustedstockdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, flag_1_),
  };
  HistoricalPriceDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalPriceDataRequest_descriptor_,
      HistoricalPriceDataRequest::default_instance_,
      HistoricalPriceDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalPriceDataRequest));
  HistoricalPriceDataResponseHeader_descriptor_ = file->message_type(72);
  static const int HistoricalPriceDataResponseHeader_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseHeader, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseHeader, recordinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseHeader, usezlibcompression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseHeader, norecordstoreturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseHeader, intpricedivisor_),
  };
  HistoricalPriceDataResponseHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalPriceDataResponseHeader_descriptor_,
      HistoricalPriceDataResponseHeader::default_instance_,
      HistoricalPriceDataResponseHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalPriceDataResponseHeader));
  HistoricalPriceDataReject_descriptor_ = file->message_type(73);
  static const int HistoricalPriceDataReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataReject, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataReject, rejecttext_),
  };
  HistoricalPriceDataReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalPriceDataReject_descriptor_,
      HistoricalPriceDataReject::default_instance_,
      HistoricalPriceDataReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalPriceDataReject));
  HistoricalPriceDataRecordResponse_descriptor_ = file->message_type(74);
  static const int HistoricalPriceDataRecordResponse_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, startdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, highprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, lowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, numtrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, bidvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, askvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, isfinalrecord_),
  };
  HistoricalPriceDataRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalPriceDataRecordResponse_descriptor_,
      HistoricalPriceDataRecordResponse::default_instance_,
      HistoricalPriceDataRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalPriceDataRecordResponse));
  HistoricalPriceDataTickRecordResponse_descriptor_ = file->message_type(75);
  static const int HistoricalPriceDataTickRecordResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse, atbidorask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse, isfinalrecord_),
  };
  HistoricalPriceDataTickRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalPriceDataTickRecordResponse_descriptor_,
      HistoricalPriceDataTickRecordResponse::default_instance_,
      HistoricalPriceDataTickRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalPriceDataTickRecordResponse));
  HistoricalPriceDataRecordResponse_Int_descriptor_ = file->message_type(76);
  static const int HistoricalPriceDataRecordResponse_Int_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, startdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, highprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, lowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, numtrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, bidvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, askvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, isfinalrecord_),
  };
  HistoricalPriceDataRecordResponse_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalPriceDataRecordResponse_Int_descriptor_,
      HistoricalPriceDataRecordResponse_Int::default_instance_,
      HistoricalPriceDataRecordResponse_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataRecordResponse_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalPriceDataRecordResponse_Int));
  HistoricalPriceDataTickRecordResponse_Int_descriptor_ = file->message_type(77);
  static const int HistoricalPriceDataTickRecordResponse_Int_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse_Int, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse_Int, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse_Int, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse_Int, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse_Int, atbidorask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse_Int, isfinalrecord_),
  };
  HistoricalPriceDataTickRecordResponse_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalPriceDataTickRecordResponse_Int_descriptor_,
      HistoricalPriceDataTickRecordResponse_Int::default_instance_,
      HistoricalPriceDataTickRecordResponse_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataTickRecordResponse_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalPriceDataTickRecordResponse_Int));
  HistoricalPriceDataResponseTrailer_descriptor_ = file->message_type(78);
  static const int HistoricalPriceDataResponseTrailer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseTrailer, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseTrailer, finalrecordlastdatetime_),
  };
  HistoricalPriceDataResponseTrailer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoricalPriceDataResponseTrailer_descriptor_,
      HistoricalPriceDataResponseTrailer::default_instance_,
      HistoricalPriceDataResponseTrailer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseTrailer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoricalPriceDataResponseTrailer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoricalPriceDataResponseTrailer));
  DTCVersion_descriptor_ = file->enum_type(0);
  DTCMessageType_descriptor_ = file->enum_type(1);
  EncodingEnum_descriptor_ = file->enum_type(2);
  LogonStatusEnum_descriptor_ = file->enum_type(3);
  MessageSupportedEnum_descriptor_ = file->enum_type(4);
  TradeModeEnum_descriptor_ = file->enum_type(5);
  RequestActionEnum_descriptor_ = file->enum_type(6);
  OrderStatusEnum_descriptor_ = file->enum_type(7);
  OrderUpdateReasonEnum_descriptor_ = file->enum_type(8);
  AtBidOrAskEnum_descriptor_ = file->enum_type(9);
  MarketDepthUpdateTypeEnum_descriptor_ = file->enum_type(10);
  OrderTypeEnum_descriptor_ = file->enum_type(11);
  TimeInForceEnum_descriptor_ = file->enum_type(12);
  BuySellEnum_descriptor_ = file->enum_type(13);
  OpenCloseTradeEnum_descriptor_ = file->enum_type(14);
  MarketDataFeedStatusEnum_descriptor_ = file->enum_type(15);
  PriceDisplayFormatEnum_descriptor_ = file->enum_type(16);
  SecurityTypeEnum_descriptor_ = file->enum_type(17);
  PutCallEnum_descriptor_ = file->enum_type(18);
  SearchTypeEnum_descriptor_ = file->enum_type(19);
  HistoricalDataIntervalEnum_descriptor_ = file->enum_type(20);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DTCProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncodingRequest_descriptor_, &EncodingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncodingResponse_descriptor_, &EncodingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogonRequest_descriptor_, &LogonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogonResponse_descriptor_, &LogonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logoff_descriptor_, &Logoff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Heartbeat_descriptor_, &Heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataFeedStatus_descriptor_, &MarketDataFeedStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataFeedSymbolStatus_descriptor_, &MarketDataFeedSymbolStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataRequest_descriptor_, &MarketDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDepthRequest_descriptor_, &MarketDepthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataReject_descriptor_, &MarketDataReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataSnapshot_descriptor_, &MarketDataSnapshot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataSnapshot_Int_descriptor_, &MarketDataSnapshot_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepthEntry_descriptor_, &DepthEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDepthFullUpdate20_descriptor_, &MarketDepthFullUpdate20::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDepthFullUpdate10_descriptor_, &MarketDepthFullUpdate10::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDepthSnapshotLevel_descriptor_, &MarketDepthSnapshotLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDepthSnapshotLevel_Int_descriptor_, &MarketDepthSnapshotLevel_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDepthUpdateLevel_descriptor_, &MarketDepthUpdateLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDepthUpdateLevel_Int_descriptor_, &MarketDepthUpdateLevel_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDepthUpdateLevelCompact_descriptor_, &MarketDepthUpdateLevelCompact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateSessionSettlement_descriptor_, &MarketDataUpdateSessionSettlement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateSessionSettlement_Int_descriptor_, &MarketDataUpdateSessionSettlement_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateSessionOpen_descriptor_, &MarketDataUpdateSessionOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateSessionOpen_Int_descriptor_, &MarketDataUpdateSessionOpen_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDepthReject_descriptor_, &MarketDepthReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateTrade_descriptor_, &MarketDataUpdateTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateTrade_Int_descriptor_, &MarketDataUpdateTrade_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateBidAsk_descriptor_, &MarketDataUpdateBidAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateBidAsk_Int_descriptor_, &MarketDataUpdateBidAsk_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateBidAskCompact_descriptor_, &MarketDataUpdateBidAskCompact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateTradeCompact_descriptor_, &MarketDataUpdateTradeCompact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateSessionVolume_descriptor_, &MarketDataUpdateSessionVolume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateOpenInterest_descriptor_, &MarketDataUpdateOpenInterest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateSessionHigh_descriptor_, &MarketDataUpdateSessionHigh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateSessionHigh_Int_descriptor_, &MarketDataUpdateSessionHigh_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateSessionLow_descriptor_, &MarketDataUpdateSessionLow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateSessionLow_Int_descriptor_, &MarketDataUpdateSessionLow_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataUpdateLastTradeSnapshot_descriptor_, &MarketDataUpdateLastTradeSnapshot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitNewSingleOrder_descriptor_, &SubmitNewSingleOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitNewSingleOrderInt_descriptor_, &SubmitNewSingleOrderInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelReplaceOrder_descriptor_, &CancelReplaceOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelReplaceOrderInt_descriptor_, &CancelReplaceOrderInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelOrder_descriptor_, &CancelOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitNewOCOOrder_descriptor_, &SubmitNewOCOOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitNewOCOOrderInt_descriptor_, &SubmitNewOCOOrderInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenOrdersRequest_descriptor_, &OpenOrdersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalOrderFillsRequest_descriptor_, &HistoricalOrderFillsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalOrderFillsReject_descriptor_, &HistoricalOrderFillsReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentPositionsRequest_descriptor_, &CurrentPositionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentPositionsReject_descriptor_, &CurrentPositionsReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderUpdate_descriptor_, &OrderUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenOrdersReject_descriptor_, &OpenOrdersReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalOrderFillResponse_descriptor_, &HistoricalOrderFillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionUpdate_descriptor_, &PositionUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeAccountsRequest_descriptor_, &TradeAccountsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeAccountResponse_descriptor_, &TradeAccountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeListRequest_descriptor_, &ExchangeListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeListResponse_descriptor_, &ExchangeListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolsForExchangeRequest_descriptor_, &SymbolsForExchangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnderlyingSymbolsForExchangeRequest_descriptor_, &UnderlyingSymbolsForExchangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolsForUnderlyingRequest_descriptor_, &SymbolsForUnderlyingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolSearchRequest_descriptor_, &SymbolSearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityDefinitionForSymbolRequest_descriptor_, &SecurityDefinitionForSymbolRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityDefinitionResponse_descriptor_, &SecurityDefinitionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityDefinitionReject_descriptor_, &SecurityDefinitionReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountBalanceRequest_descriptor_, &AccountBalanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountBalanceReject_descriptor_, &AccountBalanceReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountBalanceUpdate_descriptor_, &AccountBalanceUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMessage_descriptor_, &UserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeneralLogMessage_descriptor_, &GeneralLogMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalPriceDataRequest_descriptor_, &HistoricalPriceDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalPriceDataResponseHeader_descriptor_, &HistoricalPriceDataResponseHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalPriceDataReject_descriptor_, &HistoricalPriceDataReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalPriceDataRecordResponse_descriptor_, &HistoricalPriceDataRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalPriceDataTickRecordResponse_descriptor_, &HistoricalPriceDataTickRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalPriceDataRecordResponse_Int_descriptor_, &HistoricalPriceDataRecordResponse_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalPriceDataTickRecordResponse_Int_descriptor_, &HistoricalPriceDataTickRecordResponse_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoricalPriceDataResponseTrailer_descriptor_, &HistoricalPriceDataResponseTrailer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DTCProtocol_2eproto() {
  delete EncodingRequest::default_instance_;
  delete EncodingRequest_reflection_;
  delete EncodingResponse::default_instance_;
  delete EncodingResponse_reflection_;
  delete LogonRequest::default_instance_;
  delete LogonRequest_reflection_;
  delete LogonResponse::default_instance_;
  delete LogonResponse_reflection_;
  delete Logoff::default_instance_;
  delete Logoff_reflection_;
  delete Heartbeat::default_instance_;
  delete Heartbeat_reflection_;
  delete MarketDataFeedStatus::default_instance_;
  delete MarketDataFeedStatus_reflection_;
  delete MarketDataFeedSymbolStatus::default_instance_;
  delete MarketDataFeedSymbolStatus_reflection_;
  delete MarketDataRequest::default_instance_;
  delete MarketDataRequest_reflection_;
  delete MarketDepthRequest::default_instance_;
  delete MarketDepthRequest_reflection_;
  delete MarketDataReject::default_instance_;
  delete MarketDataReject_reflection_;
  delete MarketDataSnapshot::default_instance_;
  delete MarketDataSnapshot_reflection_;
  delete MarketDataSnapshot_Int::default_instance_;
  delete MarketDataSnapshot_Int_reflection_;
  delete DepthEntry::default_instance_;
  delete DepthEntry_reflection_;
  delete MarketDepthFullUpdate20::default_instance_;
  delete MarketDepthFullUpdate20_reflection_;
  delete MarketDepthFullUpdate10::default_instance_;
  delete MarketDepthFullUpdate10_reflection_;
  delete MarketDepthSnapshotLevel::default_instance_;
  delete MarketDepthSnapshotLevel_reflection_;
  delete MarketDepthSnapshotLevel_Int::default_instance_;
  delete MarketDepthSnapshotLevel_Int_reflection_;
  delete MarketDepthUpdateLevel::default_instance_;
  delete MarketDepthUpdateLevel_reflection_;
  delete MarketDepthUpdateLevel_Int::default_instance_;
  delete MarketDepthUpdateLevel_Int_reflection_;
  delete MarketDepthUpdateLevelCompact::default_instance_;
  delete MarketDepthUpdateLevelCompact_reflection_;
  delete MarketDataUpdateSessionSettlement::default_instance_;
  delete MarketDataUpdateSessionSettlement_reflection_;
  delete MarketDataUpdateSessionSettlement_Int::default_instance_;
  delete MarketDataUpdateSessionSettlement_Int_reflection_;
  delete MarketDataUpdateSessionOpen::default_instance_;
  delete MarketDataUpdateSessionOpen_reflection_;
  delete MarketDataUpdateSessionOpen_Int::default_instance_;
  delete MarketDataUpdateSessionOpen_Int_reflection_;
  delete MarketDepthReject::default_instance_;
  delete MarketDepthReject_reflection_;
  delete MarketDataUpdateTrade::default_instance_;
  delete MarketDataUpdateTrade_reflection_;
  delete MarketDataUpdateTrade_Int::default_instance_;
  delete MarketDataUpdateTrade_Int_reflection_;
  delete MarketDataUpdateBidAsk::default_instance_;
  delete MarketDataUpdateBidAsk_reflection_;
  delete MarketDataUpdateBidAsk_Int::default_instance_;
  delete MarketDataUpdateBidAsk_Int_reflection_;
  delete MarketDataUpdateBidAskCompact::default_instance_;
  delete MarketDataUpdateBidAskCompact_reflection_;
  delete MarketDataUpdateTradeCompact::default_instance_;
  delete MarketDataUpdateTradeCompact_reflection_;
  delete MarketDataUpdateSessionVolume::default_instance_;
  delete MarketDataUpdateSessionVolume_reflection_;
  delete MarketDataUpdateOpenInterest::default_instance_;
  delete MarketDataUpdateOpenInterest_reflection_;
  delete MarketDataUpdateSessionHigh::default_instance_;
  delete MarketDataUpdateSessionHigh_reflection_;
  delete MarketDataUpdateSessionHigh_Int::default_instance_;
  delete MarketDataUpdateSessionHigh_Int_reflection_;
  delete MarketDataUpdateSessionLow::default_instance_;
  delete MarketDataUpdateSessionLow_reflection_;
  delete MarketDataUpdateSessionLow_Int::default_instance_;
  delete MarketDataUpdateSessionLow_Int_reflection_;
  delete MarketDataUpdateLastTradeSnapshot::default_instance_;
  delete MarketDataUpdateLastTradeSnapshot_reflection_;
  delete SubmitNewSingleOrder::default_instance_;
  delete SubmitNewSingleOrder_reflection_;
  delete SubmitNewSingleOrderInt::default_instance_;
  delete SubmitNewSingleOrderInt_reflection_;
  delete CancelReplaceOrder::default_instance_;
  delete CancelReplaceOrder_reflection_;
  delete CancelReplaceOrderInt::default_instance_;
  delete CancelReplaceOrderInt_reflection_;
  delete CancelOrder::default_instance_;
  delete CancelOrder_reflection_;
  delete SubmitNewOCOOrder::default_instance_;
  delete SubmitNewOCOOrder_reflection_;
  delete SubmitNewOCOOrderInt::default_instance_;
  delete SubmitNewOCOOrderInt_reflection_;
  delete OpenOrdersRequest::default_instance_;
  delete OpenOrdersRequest_reflection_;
  delete HistoricalOrderFillsRequest::default_instance_;
  delete HistoricalOrderFillsRequest_reflection_;
  delete HistoricalOrderFillsReject::default_instance_;
  delete HistoricalOrderFillsReject_reflection_;
  delete CurrentPositionsRequest::default_instance_;
  delete CurrentPositionsRequest_reflection_;
  delete CurrentPositionsReject::default_instance_;
  delete CurrentPositionsReject_reflection_;
  delete OrderUpdate::default_instance_;
  delete OrderUpdate_reflection_;
  delete OpenOrdersReject::default_instance_;
  delete OpenOrdersReject_reflection_;
  delete HistoricalOrderFillResponse::default_instance_;
  delete HistoricalOrderFillResponse_reflection_;
  delete PositionUpdate::default_instance_;
  delete PositionUpdate_reflection_;
  delete TradeAccountsRequest::default_instance_;
  delete TradeAccountsRequest_reflection_;
  delete TradeAccountResponse::default_instance_;
  delete TradeAccountResponse_reflection_;
  delete ExchangeListRequest::default_instance_;
  delete ExchangeListRequest_reflection_;
  delete ExchangeListResponse::default_instance_;
  delete ExchangeListResponse_reflection_;
  delete SymbolsForExchangeRequest::default_instance_;
  delete SymbolsForExchangeRequest_reflection_;
  delete UnderlyingSymbolsForExchangeRequest::default_instance_;
  delete UnderlyingSymbolsForExchangeRequest_reflection_;
  delete SymbolsForUnderlyingRequest::default_instance_;
  delete SymbolsForUnderlyingRequest_reflection_;
  delete SymbolSearchRequest::default_instance_;
  delete SymbolSearchRequest_reflection_;
  delete SecurityDefinitionForSymbolRequest::default_instance_;
  delete SecurityDefinitionForSymbolRequest_reflection_;
  delete SecurityDefinitionResponse::default_instance_;
  delete SecurityDefinitionResponse_reflection_;
  delete SecurityDefinitionReject::default_instance_;
  delete SecurityDefinitionReject_reflection_;
  delete AccountBalanceRequest::default_instance_;
  delete AccountBalanceRequest_reflection_;
  delete AccountBalanceReject::default_instance_;
  delete AccountBalanceReject_reflection_;
  delete AccountBalanceUpdate::default_instance_;
  delete AccountBalanceUpdate_reflection_;
  delete UserMessage::default_instance_;
  delete UserMessage_reflection_;
  delete GeneralLogMessage::default_instance_;
  delete GeneralLogMessage_reflection_;
  delete HistoricalPriceDataRequest::default_instance_;
  delete HistoricalPriceDataRequest_reflection_;
  delete HistoricalPriceDataResponseHeader::default_instance_;
  delete HistoricalPriceDataResponseHeader_reflection_;
  delete HistoricalPriceDataReject::default_instance_;
  delete HistoricalPriceDataReject_reflection_;
  delete HistoricalPriceDataRecordResponse::default_instance_;
  delete HistoricalPriceDataRecordResponse_reflection_;
  delete HistoricalPriceDataTickRecordResponse::default_instance_;
  delete HistoricalPriceDataTickRecordResponse_reflection_;
  delete HistoricalPriceDataRecordResponse_Int::default_instance_;
  delete HistoricalPriceDataRecordResponse_Int_reflection_;
  delete HistoricalPriceDataTickRecordResponse_Int::default_instance_;
  delete HistoricalPriceDataTickRecordResponse_Int_reflection_;
  delete HistoricalPriceDataResponseTrailer::default_instance_;
  delete HistoricalPriceDataResponseTrailer_reflection_;
}

void protobuf_AddDesc_DTCProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021DTCProtocol.proto\022\006DTC_PB\"R\n\017EncodingR"
    "equest\022\027\n\017ProtocolVersion\030\001 \001(\005\022&\n\010Encod"
    "ing\030\002 \001(\0162\024.DTC_PB.EncodingEnum\"S\n\020Encod"
    "ingResponse\022\027\n\017ProtocolVersion\030\001 \001(\005\022&\n\010"
    "Encoding\030\002 \001(\0162\024.DTC_PB.EncodingEnum\"\236\002\n"
    "\014LogonRequest\022\027\n\017ProtocolVersion\030\001 \001(\005\022\020"
    "\n\010Username\030\002 \001(\t\022\020\n\010Password\030\003 \001(\t\022\027\n\017Ge"
    "neralTextData\030\004 \001(\t\022\021\n\tInteger_1\030\005 \001(\005\022\021"
    "\n\tInteger_2\030\006 \001(\005\022\"\n\032HeartbeatIntervalIn"
    "Seconds\030\007 \001(\005\022(\n\tTradeMode\030\010 \001(\0162\025.DTC_P"
    "B.TradeModeEnum\022\024\n\014TradeAccount\030\t \001(\t\022\032\n"
    "\022HardwareIdentifier\030\n \001(\t\022\022\n\nClientName\030"
    "\013 \001(\t\"\267\005\n\rLogonResponse\022\027\n\017ProtocolVersi"
    "on\030\001 \001(\005\022\'\n\006Result\030\002 \001(\0162\027.DTC_PB.LogonS"
    "tatusEnum\022\022\n\nResultText\030\003 \001(\t\022\030\n\020Reconne"
    "ctAddress\030\004 \001(\t\022\021\n\tInteger_1\030\005 \001(\005\022\022\n\nSe"
    "rverName\030\006 \001(\t\022\'\n\037MarketDepthUpdatesBest"
    "BidAndAsk\030\007 \001(\r\022\032\n\022TradingIsSupported\030\010 "
    "\001(\r\022\032\n\022OCOOrdersSupported\030\t \001(\r\022#\n\033Order"
    "CancelReplaceSupported\030\n \001(\r\022\037\n\027SymbolEx"
    "changeDelimiter\030\013 \001(\t\022$\n\034SecurityDefinit"
    "ionsSupported\030\014 \001(\r\022$\n\034HistoricalPriceDa"
    "taSupported\030\r \001(\r\022.\n&ResubscribeWhenMark"
    "etDataFeedAvailable\030\016 \001(\r\022\036\n\026MarketDepth"
    "IsSupported\030\017 \001(\r\0222\n*OneHistoricalPriceD"
    "ataRequestPerConnection\030\020 \001(\r\022\036\n\026Bracket"
    "OrdersSupported\030\021 \001(\r\022$\n\034UseIntegerPrice"
    "OrderMessages\030\022 \001(\r\0225\n-UsesMultiplePosit"
    "ionsPerSymbolAndTradeAccount\030\023 \001(\r\022\033\n\023Ma"
    "rketDataSupported\030\024 \001(\r\"0\n\006Logoff\022\016\n\006Rea"
    "son\030\001 \001(\t\022\026\n\016DoNotReconnect\030\002 \001(\r\"@\n\tHea"
    "rtbeat\022\032\n\022NumDroppedMessages\030\001 \001(\r\022\027\n\017Cu"
    "rrentDateTime\030\002 \001(\020\"H\n\024MarketDataFeedSta"
    "tus\0220\n\006Status\030\001 \001(\0162 .DTC_PB.MarketDataF"
    "eedStatusEnum\"`\n\032MarketDataFeedSymbolSta"
    "tus\022\020\n\010SymbolID\030\001 \001(\r\0220\n\006Status\030\002 \001(\0162 ."
    "DTC_PB.MarketDataFeedStatusEnum\"y\n\021Marke"
    "tDataRequest\0220\n\rRequestAction\030\001 \001(\0162\031.DT"
    "C_PB.RequestActionEnum\022\020\n\010SymbolID\030\002 \001(\r"
    "\022\016\n\006Symbol\030\003 \001(\t\022\020\n\010Exchange\030\004 \001(\t\"\215\001\n\022M"
    "arketDepthRequest\0220\n\rRequestAction\030\001 \001(\016"
    "2\031.DTC_PB.RequestActionEnum\022\020\n\010SymbolID\030"
    "\002 \001(\r\022\016\n\006Symbol\030\003 \001(\t\022\020\n\010Exchange\030\004 \001(\t\022"
    "\021\n\tNumLevels\030\005 \001(\005\"8\n\020MarketDataReject\022\020"
    "\n\010SymbolID\030\001 \001(\r\022\022\n\nRejectText\030\002 \001(\t\"\214\003\n"
    "\022MarketDataSnapshot\022\020\n\010SymbolID\030\001 \001(\r\022\036\n"
    "\026SessionSettlementPrice\030\002 \001(\001\022\030\n\020Session"
    "OpenPrice\030\003 \001(\001\022\030\n\020SessionHighPrice\030\004 \001("
    "\001\022\027\n\017SessionLowPrice\030\005 \001(\001\022\025\n\rSessionVol"
    "ume\030\006 \001(\001\022\030\n\020SessionNumTrades\030\007 \001(\r\022\024\n\014O"
    "penInterest\030\010 \001(\r\022\020\n\010BidPrice\030\t \001(\001\022\020\n\010A"
    "skPrice\030\n \001(\001\022\023\n\013AskQuantity\030\013 \001(\001\022\023\n\013Bi"
    "dQuantity\030\014 \001(\001\022\026\n\016LastTradePrice\030\r \001(\001\022"
    "\027\n\017LastTradeVolume\030\016 \001(\001\022\031\n\021LastTradeDat"
    "eTime\030\017 \001(\001\022\026\n\016BidAskDateTime\030\020 \001(\001\"\220\003\n\026"
    "MarketDataSnapshot_Int\022\020\n\010SymbolID\030\001 \001(\r"
    "\022\036\n\026SessionSettlementPrice\030\002 \001(\005\022\030\n\020Sess"
    "ionOpenPrice\030\003 \001(\005\022\030\n\020SessionHighPrice\030\004"
    " \001(\005\022\027\n\017SessionLowPrice\030\005 \001(\005\022\025\n\rSession"
    "Volume\030\006 \001(\005\022\030\n\020SessionNumTrades\030\007 \001(\r\022\024"
    "\n\014OpenInterest\030\010 \001(\r\022\020\n\010BidPrice\030\t \001(\005\022\020"
    "\n\010AskPrice\030\n \001(\005\022\023\n\013AskQuantity\030\013 \001(\005\022\023\n"
    "\013BidQuantity\030\014 \001(\005\022\026\n\016LastTradePrice\030\r \001"
    "(\005\022\027\n\017LastTradeVolume\030\016 \001(\005\022\031\n\021LastTrade"
    "DateTime\030\017 \001(\001\022\026\n\016BidAskDateTime\030\020 \001(\001\"-"
    "\n\nDepthEntry\022\r\n\005Price\030\001 \001(\001\022\020\n\010Quantity\030"
    "\014 \001(\002\"w\n\027MarketDepthFullUpdate20\022\020\n\010Symb"
    "olID\030\001 \001(\r\022$\n\010BidDepth\030\002 \003(\0132\022.DTC_PB.De"
    "pthEntry\022$\n\010AskDepth\030\003 \003(\0132\022.DTC_PB.Dept"
    "hEntry\"w\n\027MarketDepthFullUpdate10\022\020\n\010Sym"
    "bolID\030\001 \001(\r\022$\n\010BidDepth\030\002 \003(\0132\022.DTC_PB.D"
    "epthEntry\022$\n\010AskDepth\030\003 \003(\0132\022.DTC_PB.Dep"
    "thEntry\"\277\001\n\030MarketDepthSnapshotLevel\022\020\n\010"
    "SymbolID\030\001 \001(\r\022$\n\004Side\030\002 \001(\0162\026.DTC_PB.At"
    "BidOrAskEnum\022\r\n\005Price\030\003 \001(\001\022\020\n\010Quantity\030"
    "\004 \001(\001\022\r\n\005Level\030\005 \001(\r\022\035\n\025IsFirstMessageIn"
    "Batch\030\006 \001(\r\022\034\n\024IsLastMessageInBatch\030\007 \001("
    "\r\"\303\001\n\034MarketDepthSnapshotLevel_Int\022\020\n\010Sy"
    "mbolID\030\001 \001(\r\022$\n\004Side\030\002 \001(\0162\026.DTC_PB.AtBi"
    "dOrAskEnum\022\r\n\005Price\030\003 \001(\005\022\020\n\010Quantity\030\004 "
    "\001(\005\022\r\n\005Level\030\005 \001(\r\022\035\n\025IsFirstMessageInBa"
    "tch\030\006 \001(\r\022\034\n\024IsLastMessageInBatch\030\007 \001(\r\""
    "\250\001\n\026MarketDepthUpdateLevel\022\020\n\010SymbolID\030\001"
    " \001(\r\022$\n\004Side\030\002 \001(\0162\026.DTC_PB.AtBidOrAskEn"
    "um\022\r\n\005Price\030\003 \001(\001\022\020\n\010Quantity\030\004 \001(\001\0225\n\nU"
    "pdateType\030\005 \001(\0162!.DTC_PB.MarketDepthUpda"
    "teTypeEnum\"\254\001\n\032MarketDepthUpdateLevel_In"
    "t\022\020\n\010SymbolID\030\001 \001(\r\022$\n\004Side\030\002 \001(\0162\026.DTC_"
    "PB.AtBidOrAskEnum\022\r\n\005Price\030\003 \001(\005\022\020\n\010Quan"
    "tity\030\004 \001(\005\0225\n\nUpdateType\030\005 \001(\0162!.DTC_PB."
    "MarketDepthUpdateTypeEnum\"\257\001\n\035MarketDept"
    "hUpdateLevelCompact\022\020\n\010SymbolID\030\001 \001(\r\022$\n"
    "\004Side\030\002 \001(\0162\026.DTC_PB.AtBidOrAskEnum\022\r\n\005P"
    "rice\030\003 \001(\002\022\020\n\010Quantity\030\004 \001(\002\0225\n\nUpdateTy"
    "pe\030\005 \001(\0162!.DTC_PB.MarketDepthUpdateTypeE"
    "num\"D\n!MarketDataUpdateSessionSettlement"
    "\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\001\"H\n%Mar"
    "ketDataUpdateSessionSettlement_Int\022\020\n\010Sy"
    "mbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\005\">\n\033MarketDat"
    "aUpdateSessionOpen\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005"
    "Price\030\002 \001(\001\"B\n\037MarketDataUpdateSessionOp"
    "en_Int\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\005\""
    "9\n\021MarketDepthReject\022\020\n\010SymbolID\030\001 \001(\r\022\022"
    "\n\nRejectText\030\002 \001(\t\"\206\001\n\025MarketDataUpdateT"
    "rade\022\020\n\010SymbolID\030\001 \001(\r\022*\n\nAtBidOrAsk\030\002 \001"
    "(\0162\026.DTC_PB.AtBidOrAskEnum\022\r\n\005Price\030\003 \001("
    "\001\022\016\n\006Volume\030\004 \001(\001\022\020\n\010DateTime\030\005 \001(\001\"\212\001\n\031"
    "MarketDataUpdateTrade_Int\022\020\n\010SymbolID\030\001 "
    "\001(\r\022*\n\nAtBidOrAsk\030\002 \001(\0162\026.DTC_PB.AtBidOr"
    "AskEnum\022\r\n\005Price\030\003 \001(\005\022\016\n\006Volume\030\004 \001(\005\022\020"
    "\n\010DateTime\030\005 \001(\001\"\212\001\n\026MarketDataUpdateBid"
    "Ask\022\020\n\010SymbolID\030\001 \001(\r\022\020\n\010BidPrice\030\002 \001(\001\022"
    "\023\n\013BidQuantity\030\003 \001(\002\022\020\n\010AskPrice\030\004 \001(\001\022\023"
    "\n\013AskQuantity\030\005 \001(\002\022\020\n\010DateTime\030\006 \001(\017\"\216\001"
    "\n\032MarketDataUpdateBidAsk_Int\022\020\n\010SymbolID"
    "\030\001 \001(\r\022\020\n\010BidPrice\030\002 \001(\005\022\023\n\013BidQuantity\030"
    "\003 \001(\005\022\020\n\010AskPrice\030\004 \001(\005\022\023\n\013AskQuantity\030\005"
    " \001(\005\022\020\n\010DateTime\030\006 \001(\017\"\221\001\n\035MarketDataUpd"
    "ateBidAskCompact\022\020\n\010BidPrice\030\001 \001(\002\022\023\n\013Bi"
    "dQuantity\030\002 \001(\002\022\020\n\010AskPrice\030\003 \001(\002\022\023\n\013Ask"
    "Quantity\030\004 \001(\002\022\020\n\010DateTime\030\005 \001(\017\022\020\n\010Symb"
    "olID\030\006 \001(\r\"\215\001\n\034MarketDataUpdateTradeComp"
    "act\022\r\n\005Price\030\001 \001(\002\022\016\n\006Volume\030\002 \001(\002\022\020\n\010Da"
    "teTime\030\003 \001(\017\022\020\n\010SymbolID\030\004 \001(\r\022*\n\nAtBidO"
    "rAsk\030\005 \001(\0162\026.DTC_PB.AtBidOrAskEnum\"A\n\035Ma"
    "rketDataUpdateSessionVolume\022\020\n\010SymbolID\030"
    "\001 \001(\r\022\016\n\006Volume\030\002 \001(\001\"F\n\034MarketDataUpdat"
    "eOpenInterest\022\020\n\010SymbolID\030\001 \001(\r\022\024\n\014OpenI"
    "nterest\030\002 \001(\r\">\n\033MarketDataUpdateSession"
    "High\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\001\"B\n"
    "\037MarketDataUpdateSessionHigh_Int\022\020\n\010Symb"
    "olID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\005\"=\n\032MarketDataU"
    "pdateSessionLow\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Pri"
    "ce\030\002 \001(\001\"A\n\036MarketDataUpdateSessionLow_I"
    "nt\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\005\"\201\001\n!"
    "MarketDataUpdateLastTradeSnapshot\022\020\n\010Sym"
    "bolID\030\001 \001(\r\022\026\n\016LastTradePrice\030\002 \001(\001\022\027\n\017L"
    "astTradeVolume\030\003 \001(\001\022\031\n\021LastTradeDateTim"
    "e\030\004 \001(\001\"\247\003\n\024SubmitNewSingleOrder\022\016\n\006Symb"
    "ol\030\001 \001(\t\022\020\n\010Exchange\030\002 \001(\t\022\024\n\014TradeAccou"
    "nt\030\003 \001(\t\022\025\n\rClientOrderID\030\004 \001(\t\022(\n\tOrder"
    "Type\030\005 \001(\0162\025.DTC_PB.OrderTypeEnum\022$\n\007Buy"
    "Sell\030\006 \001(\0162\023.DTC_PB.BuySellEnum\022\016\n\006Price"
    "1\030\007 \001(\001\022\016\n\006Price2\030\010 \001(\001\022\020\n\010Quantity\030\t \001("
    "\001\022,\n\013TimeInForce\030\n \001(\0162\027.DTC_PB.TimeInFo"
    "rceEnum\022\030\n\020GoodTillDateTime\030\013 \001(\020\022\030\n\020IsA"
    "utomatedOrder\030\014 \001(\r\022\025\n\rIsParentOrder\030\r \001"
    "(\r\022\024\n\014FreeFormText\030\016 \001(\t\022/\n\013OpenOrClose\030"
    "\017 \001(\0162\032.DTC_PB.OpenCloseTradeEnum\"\273\003\n\027Su"
    "bmitNewSingleOrderInt\022\016\n\006Symbol\030\001 \001(\t\022\020\n"
    "\010Exchange\030\002 \001(\t\022\024\n\014TradeAccount\030\003 \001(\t\022\025\n"
    "\rClientOrderID\030\004 \001(\t\022(\n\tOrderType\030\005 \001(\0162"
    "\025.DTC_PB.OrderTypeEnum\022$\n\007BuySell\030\006 \001(\0162"
    "\023.DTC_PB.BuySellEnum\022\016\n\006Price1\030\007 \001(\003\022\016\n\006"
    "Price2\030\010 \001(\003\022\017\n\007Divisor\030\t \001(\002\022\020\n\010Quantit"
    "y\030\n \001(\003\022,\n\013TimeInForce\030\013 \001(\0162\027.DTC_PB.Ti"
    "meInForceEnum\022\030\n\020GoodTillDateTime\030\014 \001(\020\022"
    "\030\n\020IsAutomatedOrder\030\r \001(\r\022\025\n\rIsParentOrd"
    "er\030\016 \001(\r\022\024\n\014FreeFormText\030\017 \001(\t\022/\n\013OpenOr"
    "Close\030\020 \001(\0162\032.DTC_PB.OpenCloseTradeEnum\""
    "\236\001\n\022CancelReplaceOrder\022\025\n\rServerOrderID\030"
    "\001 \001(\t\022\025\n\rClientOrderID\030\002 \001(\t\022\016\n\006Price1\030\003"
    " \001(\001\022\016\n\006Price2\030\004 \001(\001\022\020\n\010Quantity\030\005 \001(\001\022\023"
    "\n\013Price1IsSet\030\006 \001(\r\022\023\n\013Price2IsSet\030\007 \001(\r"
    "\"\262\001\n\025CancelReplaceOrderInt\022\025\n\rServerOrde"
    "rID\030\001 \001(\t\022\025\n\rClientOrderID\030\002 \001(\t\022\016\n\006Pric"
    "e1\030\003 \001(\003\022\016\n\006Price2\030\004 \001(\003\022\017\n\007Divisor\030\005 \001("
    "\002\022\020\n\010Quantity\030\006 \001(\003\022\023\n\013Price1IsSet\030\007 \001(\r"
    "\022\023\n\013Price2IsSet\030\010 \001(\r\";\n\013CancelOrder\022\025\n\r"
    "ServerOrderID\030\001 \001(\t\022\025\n\rClientOrderID\030\002 \001"
    "(\t\"\342\004\n\021SubmitNewOCOOrder\022\016\n\006Symbol\030\001 \001(\t"
    "\022\020\n\010Exchange\030\002 \001(\t\022\027\n\017ClientOrderID_1\030\003 "
    "\001(\t\022*\n\013OrderType_1\030\004 \001(\0162\025.DTC_PB.OrderT"
    "ypeEnum\022&\n\tBuySell_1\030\005 \001(\0162\023.DTC_PB.BuyS"
    "ellEnum\022\020\n\010Price1_1\030\006 \001(\001\022\020\n\010Price2_1\030\007 "
    "\001(\001\022\022\n\nQuantity_1\030\010 \001(\001\022\027\n\017ClientOrderID"
    "_2\030\t \001(\t\022*\n\013OrderType_2\030\n \001(\0162\025.DTC_PB.O"
    "rderTypeEnum\022&\n\tBuySell_2\030\013 \001(\0162\023.DTC_PB"
    ".BuySellEnum\022\020\n\010Price1_2\030\014 \001(\001\022\020\n\010Price2"
    "_2\030\r \001(\001\022\022\n\nQuantity_2\030\016 \001(\001\022,\n\013TimeInFo"
    "rce\030\017 \001(\0162\027.DTC_PB.TimeInForceEnum\022\030\n\020Go"
    "odTillDateTime\030\020 \001(\020\022\024\n\014TradeAccount\030\021 \001"
    "(\t\022\030\n\020IsAutomatedOrder\030\022 \001(\r\022\"\n\032ParentTr"
    "iggerClientOrderID\030\023 \001(\t\022\024\n\014FreeFormText"
    "\030\024 \001(\t\022/\n\013OpenOrClose\030\025 \001(\0162\032.DTC_PB.Ope"
    "nCloseTradeEnum\"\366\004\n\024SubmitNewOCOOrderInt"
    "\022\016\n\006Symbol\030\001 \001(\t\022\020\n\010Exchange\030\002 \001(\t\022\027\n\017Cl"
    "ientOrderID_1\030\003 \001(\t\022*\n\013OrderType_1\030\004 \001(\016"
    "2\025.DTC_PB.OrderTypeEnum\022&\n\tBuySell_1\030\005 \001"
    "(\0162\023.DTC_PB.BuySellEnum\022\020\n\010Price1_1\030\006 \001("
    "\003\022\020\n\010Price2_1\030\007 \001(\003\022\022\n\nQuantity_1\030\010 \001(\003\022"
    "\027\n\017ClientOrderID_2\030\t \001(\t\022*\n\013OrderType_2\030"
    "\n \001(\0162\025.DTC_PB.OrderTypeEnum\022&\n\tBuySell_"
    "2\030\013 \001(\0162\023.DTC_PB.BuySellEnum\022\020\n\010Price1_2"
    "\030\014 \001(\003\022\020\n\010Price2_2\030\r \001(\003\022\022\n\nQuantity_2\030\016"
    " \001(\003\022,\n\013TimeInForce\030\017 \001(\0162\027.DTC_PB.TimeI"
    "nForceEnum\022\030\n\020GoodTillDateTime\030\020 \001(\020\022\024\n\014"
    "TradeAccount\030\021 \001(\t\022\030\n\020IsAutomatedOrder\030\022"
    " \001(\r\022\"\n\032ParentTriggerClientOrderID\030\023 \001(\t"
    "\022\024\n\014FreeFormText\030\024 \001(\t\022\017\n\007Divisor\030\025 \001(\002\022"
    "/\n\013OpenOrClose\030\026 \001(\0162\032.DTC_PB.OpenCloseT"
    "radeEnum\"W\n\021OpenOrdersRequest\022\021\n\tRequest"
    "ID\030\001 \001(\005\022\030\n\020RequestAllOrders\030\002 \001(\005\022\025\n\rSe"
    "rverOrderID\030\003 \001(\t\"s\n\033HistoricalOrderFill"
    "sRequest\022\021\n\tRequestID\030\001 \001(\005\022\025\n\rServerOrd"
    "erID\030\002 \001(\t\022\024\n\014NumberOfDays\030\003 \001(\005\022\024\n\014Trad"
    "eAccount\030\004 \001(\t\"C\n\032HistoricalOrderFillsRe"
    "ject\022\021\n\tRequestID\030\001 \001(\005\022\022\n\nRejectText\030\002 "
    "\001(\t\"B\n\027CurrentPositionsRequest\022\021\n\tReques"
    "tID\030\001 \001(\005\022\024\n\014TradeAccount\030\002 \001(\t\"\?\n\026Curre"
    "ntPositionsReject\022\021\n\tRequestID\030\001 \001(\005\022\022\n\n"
    "RejectText\030\002 \001(\t\"\362\006\n\013OrderUpdate\022\021\n\tRequ"
    "estID\030\001 \001(\005\022\030\n\020TotalNumMessages\030\002 \001(\005\022\025\n"
    "\rMessageNumber\030\003 \001(\005\022\016\n\006Symbol\030\004 \001(\t\022\020\n\010"
    "Exchange\030\005 \001(\t\022\035\n\025PreviousServerOrderID\030"
    "\006 \001(\t\022\025\n\rServerOrderID\030\007 \001(\t\022\025\n\rClientOr"
    "derID\030\010 \001(\t\022\027\n\017ExchangeOrderID\030\t \001(\t\022,\n\013"
    "OrderStatus\030\n \001(\0162\027.DTC_PB.OrderStatusEn"
    "um\0228\n\021OrderUpdateReason\030\013 \001(\0162\035.DTC_PB.O"
    "rderUpdateReasonEnum\022(\n\tOrderType\030\014 \001(\0162"
    "\025.DTC_PB.OrderTypeEnum\022$\n\007BuySell\030\r \001(\0162"
    "\023.DTC_PB.BuySellEnum\022\016\n\006Price1\030\016 \001(\001\022\016\n\006"
    "Price2\030\017 \001(\001\022,\n\013TimeInForce\030\020 \001(\0162\027.DTC_"
    "PB.TimeInForceEnum\022\030\n\020GoodTillDateTime\030\021"
    " \001(\020\022\025\n\rOrderQuantity\030\022 \001(\001\022\026\n\016FilledQua"
    "ntity\030\023 \001(\001\022\031\n\021RemainingQuantity\030\024 \001(\001\022\030"
    "\n\020AverageFillPrice\030\025 \001(\001\022\025\n\rLastFillPric"
    "e\030\026 \001(\001\022\030\n\020LastFillDateTime\030\027 \001(\020\022\030\n\020Las"
    "tFillQuantity\030\030 \001(\001\022\033\n\023LastFillExecution"
    "ID\030\031 \001(\t\022\024\n\014TradeAccount\030\032 \001(\t\022\020\n\010InfoTe"
    "xt\030\033 \001(\t\022\020\n\010NoOrders\030\034 \001(\r\022\033\n\023ParentServ"
    "erOrderID\030\035 \001(\t\022#\n\033OCOLinkedOrderServerO"
    "rderID\030\036 \001(\t\022/\n\013OpenOrClose\030\037 \001(\0162\032.DTC_"
    "PB.OpenCloseTradeEnum\"9\n\020OpenOrdersRejec"
    "t\022\021\n\tRequestID\030\001 \001(\005\022\022\n\nRejectText\030\002 \001(\t"
    "\"\354\002\n\033HistoricalOrderFillResponse\022\021\n\tRequ"
    "estID\030\001 \001(\005\022\033\n\023TotalNumberMessages\030\002 \001(\005"
    "\022\025\n\rMessageNumber\030\003 \001(\005\022\016\n\006Symbol\030\004 \001(\t\022"
    "\020\n\010Exchange\030\005 \001(\t\022\025\n\rServerOrderID\030\006 \001(\t"
    "\022$\n\007BuySell\030\007 \001(\0162\023.DTC_PB.BuySellEnum\022\r"
    "\n\005Price\030\010 \001(\001\022\020\n\010DateTime\030\t \001(\020\022\020\n\010Quant"
    "ity\030\n \001(\001\022\031\n\021UniqueExecutionID\030\013 \001(\t\022\024\n\014"
    "TradeAccount\030\014 \001(\t\022-\n\tOpenClose\030\r \001(\0162\032."
    "DTC_PB.OpenCloseTradeEnum\022\024\n\014NoOrderFill"
    "s\030\016 \001(\r\"\375\001\n\016PositionUpdate\022\021\n\tRequestID\030"
    "\001 \001(\005\022\033\n\023TotalNumberMessages\030\002 \001(\005\022\025\n\rMe"
    "ssageNumber\030\003 \001(\005\022\016\n\006Symbol\030\004 \001(\t\022\020\n\010Exc"
    "hange\030\005 \001(\t\022\020\n\010Quantity\030\006 \001(\001\022\024\n\014Average"
    "Price\030\007 \001(\001\022\032\n\022PositionIdentifier\030\010 \001(\t\022"
    "\024\n\014TradeAccount\030\t \001(\t\022\023\n\013NoPositions\030\n \001"
    "(\r\022\023\n\013Unsolicited\030\013 \001(\r\")\n\024TradeAccounts"
    "Request\022\021\n\tRequestID\030\001 \001(\005\"s\n\024TradeAccou"
    "ntResponse\022\033\n\023TotalNumberMessages\030\001 \001(\005\022"
    "\025\n\rMessageNumber\030\002 \001(\005\022\024\n\014TradeAccount\030\003"
    " \001(\t\022\021\n\tRequestID\030\004 \001(\005\"(\n\023ExchangeListR"
    "equest\022\021\n\tRequestID\030\001 \001(\005\"h\n\024ExchangeLis"
    "tResponse\022\021\n\tRequestID\030\001 \001(\005\022\020\n\010Exchange"
    "\030\002 \001(\t\022\026\n\016IsFinalMessage\030\003 \001(\r\022\023\n\013Descri"
    "ption\030\004 \001(\t\"p\n\031SymbolsForExchangeRequest"
    "\022\021\n\tRequestID\030\001 \001(\005\022\020\n\010Exchange\030\002 \001(\t\022.\n"
    "\014SecurityType\030\003 \001(\0162\030.DTC_PB.SecurityTyp"
    "eEnum\"z\n#UnderlyingSymbolsForExchangeReq"
    "uest\022\021\n\tRequestID\030\001 \001(\005\022\020\n\010Exchange\030\002 \001("
    "\t\022.\n\014SecurityType\030\003 \001(\0162\030.DTC_PB.Securit"
    "yTypeEnum\"\214\001\n\033SymbolsForUnderlyingReques"
    "t\022\021\n\tRequestID\030\001 \001(\005\022\030\n\020UnderlyingSymbol"
    "\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\022.\n\014SecurityType"
    "\030\004 \001(\0162\030.DTC_PB.SecurityTypeEnum\"\252\001\n\023Sym"
    "bolSearchRequest\022\021\n\tRequestID\030\001 \001(\005\022\022\n\nS"
    "earchText\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\022.\n\014Sec"
    "urityType\030\004 \001(\0162\030.DTC_PB.SecurityTypeEnu"
    "m\022*\n\nSearchType\030\005 \001(\0162\026.DTC_PB.SearchTyp"
    "eEnum\"Y\n\"SecurityDefinitionForSymbolRequ"
    "est\022\021\n\tRequestID\030\001 \001(\005\022\016\n\006Symbol\030\002 \001(\t\022\020"
    "\n\010Exchange\030\003 \001(\t\"\247\005\n\032SecurityDefinitionR"
    "esponse\022\021\n\tRequestID\030\001 \001(\005\022\016\n\006Symbol\030\002 \001"
    "(\t\022\020\n\010Exchange\030\003 \001(\t\022.\n\014SecurityType\030\004 \001"
    "(\0162\030.DTC_PB.SecurityTypeEnum\022\023\n\013Descript"
    "ion\030\005 \001(\t\022\031\n\021MinPriceIncrement\030\006 \001(\002\022:\n\022"
    "PriceDisplayFormat\030\007 \001(\0162\036.DTC_PB.PriceD"
    "isplayFormatEnum\022!\n\031CurrencyValuePerIncr"
    "ement\030\010 \001(\002\022\026\n\016IsFinalMessage\030\t \001(\r\022!\n\031F"
    "loatToIntPriceMultiplier\030\n \001(\002\022\036\n\026IntToF"
    "loatPriceDivisor\030\013 \001(\002\022\030\n\020UnderlyingSymb"
    "ol\030\014 \001(\t\022\031\n\021UpdatesBidAskOnly\030\r \001(\r\022\023\n\013S"
    "trikePrice\030\016 \001(\002\022&\n\tPutOrCall\030\017 \001(\0162\023.DT"
    "C_PB.PutCallEnum\022\025\n\rShortInterest\030\020 \001(\r\022"
    "\036\n\026SecurityExpirationDate\030\021 \001(\017\022\033\n\023BuyRo"
    "lloverInterest\030\022 \001(\002\022\034\n\024SellRolloverInte"
    "rest\030\023 \001(\002\022\030\n\020EarningsPerShare\030\024 \001(\002\022\031\n\021"
    "SharesOutstanding\030\025 \001(\r\022!\n\031IntToFloatQua"
    "ntityDivisor\030\026 \001(\002\"A\n\030SecurityDefinition"
    "Reject\022\021\n\tRequestID\030\001 \001(\005\022\022\n\nRejectText\030"
    "\002 \001(\t\"@\n\025AccountBalanceRequest\022\021\n\tReques"
    "tID\030\001 \001(\005\022\024\n\014TradeAccount\030\002 \001(\t\"=\n\024Accou"
    "ntBalanceReject\022\021\n\tRequestID\030\001 \001(\005\022\022\n\nRe"
    "jectText\030\002 \001(\t\"\256\002\n\024AccountBalanceUpdate\022"
    "\021\n\tRequestID\030\001 \001(\005\022\023\n\013CashBalance\030\002 \001(\001\022"
    "\'\n\037BalanceAvailableForNewPositions\030\003 \001(\001"
    "\022\027\n\017AccountCurrency\030\004 \001(\t\022\024\n\014TradeAccoun"
    "t\030\005 \001(\t\022\027\n\017SecuritiesValue\030\006 \001(\001\022\031\n\021Marg"
    "inRequirement\030\007 \001(\001\022\033\n\023TotalNumberMessag"
    "es\030\010 \001(\005\022\025\n\rMessageNumber\030\t \001(\005\022\031\n\021NoAcc"
    "ountBalances\030\n \001(\r\022\023\n\013Unsolicited\030\013 \001(\r\""
    ":\n\013UserMessage\022\023\n\013UserMessage\030\001 \001(\t\022\026\n\016I"
    "sPopupMessage\030\002 \001(\r\"(\n\021GeneralLogMessage"
    "\022\023\n\013MessageText\030\003 \001(\t\"\250\002\n\032HistoricalPric"
    "eDataRequest\022\021\n\tRequestID\030\001 \001(\005\022\016\n\006Symbo"
    "l\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\022:\n\016RecordInter"
    "val\030\004 \001(\0162\".DTC_PB.HistoricalDataInterva"
    "lEnum\022\025\n\rStartDateTime\030\005 \001(\020\022\023\n\013EndDateT"
    "ime\030\006 \001(\020\022\027\n\017MaxDaysToReturn\030\007 \001(\r\022\032\n\022Us"
    "eZLibCompression\030\010 \001(\r\022(\n RequestDividen"
    "dAdjustedStockData\030\t \001(\r\022\016\n\006Flag_1\030\n \001(\r"
    "\"\302\001\n!HistoricalPriceDataResponseHeader\022\021"
    "\n\tRequestID\030\001 \001(\005\022:\n\016RecordInterval\030\002 \001("
    "\0162\".DTC_PB.HistoricalDataIntervalEnum\022\032\n"
    "\022UseZLibCompression\030\003 \001(\r\022\031\n\021NoRecordsTo"
    "Return\030\004 \001(\r\022\027\n\017IntPriceDivisor\030\005 \001(\002\"B\n"
    "\031HistoricalPriceDataReject\022\021\n\tRequestID\030"
    "\001 \001(\005\022\022\n\nRejectText\030\002 \001(\t\"\370\001\n!Historical"
    "PriceDataRecordResponse\022\021\n\tRequestID\030\001 \001"
    "(\005\022\025\n\rStartDateTime\030\002 \001(\020\022\021\n\tOpenPrice\030\003"
    " \001(\001\022\021\n\tHighPrice\030\004 \001(\001\022\020\n\010LowPrice\030\005 \001("
    "\001\022\021\n\tLastPrice\030\006 \001(\001\022\016\n\006Volume\030\007 \001(\001\022\021\n\t"
    "NumTrades\030\010 \001(\r\022\021\n\tBidVolume\030\t \001(\001\022\021\n\tAs"
    "kVolume\030\n \001(\001\022\025\n\rIsFinalRecord\030\013 \001(\r\"\256\001\n"
    "%HistoricalPriceDataTickRecordResponse\022\021"
    "\n\tRequestID\030\001 \001(\005\022\020\n\010DateTime\030\002 \001(\001\022*\n\nA"
    "tBidOrAsk\030\003 \001(\0162\026.DTC_PB.AtBidOrAskEnum\022"
    "\r\n\005Price\030\004 \001(\001\022\016\n\006Volume\030\005 \001(\001\022\025\n\rIsFina"
    "lRecord\030\006 \001(\r\"\374\001\n%HistoricalPriceDataRec"
    "ordResponse_Int\022\021\n\tRequestID\030\001 \001(\005\022\025\n\rSt"
    "artDateTime\030\002 \001(\020\022\021\n\tOpenPrice\030\003 \001(\005\022\021\n\t"
    "HighPrice\030\004 \001(\005\022\020\n\010LowPrice\030\005 \001(\005\022\021\n\tLas"
    "tPrice\030\006 \001(\005\022\016\n\006Volume\030\007 \001(\005\022\021\n\tNumTrade"
    "s\030\010 \001(\r\022\021\n\tBidVolume\030\t \001(\005\022\021\n\tAskVolume\030"
    "\n \001(\005\022\025\n\rIsFinalRecord\030\013 \001(\r\"\262\001\n)Histori"
    "calPriceDataTickRecordResponse_Int\022\021\n\tRe"
    "questID\030\001 \001(\005\022\020\n\010DateTime\030\002 \001(\001\022\r\n\005Price"
    "\030\003 \001(\005\022\016\n\006Volume\030\004 \001(\005\022*\n\nAtBidOrAsk\030\005 \001"
    "(\0162\026.DTC_PB.AtBidOrAskEnum\022\025\n\rIsFinalRec"
    "ord\030\006 \001(\r\"X\n\"HistoricalPriceDataResponse"
    "Trailer\022\021\n\tRequestID\030\001 \001(\005\022\037\n\027FinalRecor"
    "dLastDateTime\030\002 \001(\001*!\n\nDTCVersion\022\023\n\017CUR"
    "RENT_VERSION\020\007*\271\023\n\016DTCMessageType\022\021\n\rLOG"
    "ON_REQUEST\020\001\022\022\n\016LOGON_RESPONSE\020\002\022\r\n\tHEAR"
    "TBEAT\020\003\022\n\n\006LOGOFF\020\005\022\024\n\020ENCODING_REQUEST\020"
    "\006\022\025\n\021ENCODING_RESPONSE\020\007\022\027\n\023MARKET_DATA_"
    "REQUEST\020e\022\026\n\022MARKET_DATA_REJECT\020g\022\030\n\024MAR"
    "KET_DATA_SNAPSHOT\020h\022\034\n\030MARKET_DATA_SNAPS"
    "HOT_INT\020}\022\034\n\030MARKET_DATA_UPDATE_TRADE\020k\022"
    "$\n MARKET_DATA_UPDATE_TRADE_COMPACT\020p\022 \n"
    "\034MARKET_DATA_UPDATE_TRADE_INT\020~\022+\n&MARKE"
    "T_DATA_UPDATE_LAST_TRADE_SNAPSHOT\020\206\001\022\036\n\032"
    "MARKET_DATA_UPDATE_BID_ASK\020l\022&\n\"MARKET_D"
    "ATA_UPDATE_BID_ASK_COMPACT\020u\022\"\n\036MARKET_D"
    "ATA_UPDATE_BID_ASK_INT\020\177\022#\n\037MARKET_DATA_"
    "UPDATE_SESSION_OPEN\020x\022(\n#MARKET_DATA_UPD"
    "ATE_SESSION_OPEN_INT\020\200\001\022#\n\037MARKET_DATA_U"
    "PDATE_SESSION_HIGH\020r\022(\n#MARKET_DATA_UPDA"
    "TE_SESSION_HIGH_INT\020\201\001\022\"\n\036MARKET_DATA_UP"
    "DATE_SESSION_LOW\020s\022\'\n\"MARKET_DATA_UPDATE"
    "_SESSION_LOW_INT\020\202\001\022%\n!MARKET_DATA_UPDAT"
    "E_SESSION_VOLUME\020q\022$\n MARKET_DATA_UPDATE"
    "_OPEN_INTEREST\020|\022\'\n#MARKET_DATA_UPDATE_D"
    "AILY_SETTLEMENT\020w\022,\n\'MARKET_DATA_UPDATE_"
    "DAILY_SETTLEMENT_INT\020\203\001\022\030\n\024MARKET_DEPTH_"
    "REQUEST\020f\022\027\n\023MARKET_DEPTH_REJECT\020y\022\037\n\033MA"
    "RKET_DEPTH_SNAPSHOT_LEVEL\020z\022$\n\037MARKET_DE"
    "PTH_SNAPSHOT_LEVEL_INT\020\204\001\022\035\n\031MARKET_DEPT"
    "H_UPDATE_LEVEL\020j\022%\n!MARKET_DEPTH_UPDATE_"
    "LEVEL_COMPACT\020v\022\"\n\035MARKET_DEPTH_UPDATE_L"
    "EVEL_INT\020\205\001\022\037\n\033MARKET_DEPTH_FULL_UPDATE_"
    "10\020{\022\037\n\033MARKET_DEPTH_FULL_UPDATE_20\020i\022\033\n"
    "\027MARKET_DATA_FEED_STATUS\020d\022\"\n\036MARKET_DAT"
    "A_FEED_SYMBOL_STATUS\020t\022\034\n\027SUBMIT_NEW_SIN"
    "GLE_ORDER\020\320\001\022 \n\033SUBMIT_NEW_SINGLE_ORDER_"
    "INT\020\316\001\022\031\n\024SUBMIT_NEW_OCO_ORDER\020\311\001\022\035\n\030SUB"
    "MIT_NEW_OCO_ORDER_INT\020\317\001\022\021\n\014CANCEL_ORDER"
    "\020\313\001\022\031\n\024CANCEL_REPLACE_ORDER\020\314\001\022\035\n\030CANCEL"
    "_REPLACE_ORDER_INT\020\315\001\022\030\n\023OPEN_ORDERS_REQ"
    "UEST\020\254\002\022\027\n\022OPEN_ORDERS_REJECT\020\256\002\022\021\n\014ORDE"
    "R_UPDATE\020\255\002\022#\n\036HISTORICAL_ORDER_FILLS_RE"
    "QUEST\020\257\002\022#\n\036HISTORICAL_ORDER_FILL_RESPON"
    "SE\020\260\002\022\036\n\031CURRENT_POSITIONS_REQUEST\020\261\002\022\035\n"
    "\030CURRENT_POSITIONS_REJECT\020\263\002\022\024\n\017POSITION"
    "_UPDATE\020\262\002\022\033\n\026TRADE_ACCOUNTS_REQUEST\020\220\003\022"
    "\033\n\026TRADE_ACCOUNT_RESPONSE\020\221\003\022\032\n\025EXCHANGE"
    "_LIST_REQUEST\020\364\003\022\033\n\026EXCHANGE_LIST_RESPON"
    "SE\020\365\003\022!\n\034SYMBOLS_FOR_EXCHANGE_REQUEST\020\366\003"
    "\022,\n\'UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQU"
    "EST\020\367\003\022#\n\036SYMBOLS_FOR_UNDERLYING_REQUEST"
    "\020\370\003\022+\n&SECURITY_DEFINITION_FOR_SYMBOL_RE"
    "QUEST\020\372\003\022!\n\034SECURITY_DEFINITION_RESPONSE"
    "\020\373\003\022\032\n\025SYMBOL_SEARCH_REQUEST\020\374\003\022\037\n\032SECUR"
    "ITY_DEFINITION_REJECT\020\375\003\022\034\n\027ACCOUNT_BALA"
    "NCE_REQUEST\020\331\004\022\033\n\026ACCOUNT_BALANCE_REJECT"
    "\020\332\004\022\033\n\026ACCOUNT_BALANCE_UPDATE\020\330\004\022\021\n\014USER"
    "_MESSAGE\020\274\005\022\030\n\023GENERAL_LOG_MESSAGE\020\275\005\022\"\n"
    "\035HISTORICAL_PRICE_DATA_REQUEST\020\240\006\022*\n%HIS"
    "TORICAL_PRICE_DATA_RESPONSE_HEADER\020\241\006\022!\n"
    "\034HISTORICAL_PRICE_DATA_REJECT\020\242\006\022*\n%HIST"
    "ORICAL_PRICE_DATA_RECORD_RESPONSE\020\243\006\022/\n*"
    "HISTORICAL_PRICE_DATA_TICK_RECORD_RESPON"
    "SE\020\244\006\022.\n)HISTORICAL_PRICE_DATA_RECORD_RE"
    "SPONSE_INT\020\245\006\0223\n.HISTORICAL_PRICE_DATA_T"
    "ICK_RECORD_RESPONSE_INT\020\246\006*\220\001\n\014EncodingE"
    "num\022\023\n\017BINARY_ENCODING\020\000\022\'\n#BINARY_WITH_"
    "VARIABLE_LENGTH_STRINGS\020\001\022\021\n\rJSON_ENCODI"
    "NG\020\002\022\031\n\025JSON_COMPACT_ENCODING\020\003\022\024\n\020PROTO"
    "COL_BUFFERS\020\004*t\n\017LogonStatusEnum\022\021\n\rLOGO"
    "N_SUCCESS\020\001\022\017\n\013LOGON_ERROR\020\002\022\034\n\030LOGON_ER"
    "ROR_NO_RECONNECT\020\003\022\037\n\033LOGON_RECONNECT_NE"
    "W_ADDRESS\020\004*F\n\024MessageSupportedEnum\022\027\n\023M"
    "ESSAGE_UNSUPPORTED\020\000\022\025\n\021MESSAGE_SUPPORTE"
    "D\020\001*S\n\rTradeModeEnum\022\023\n\017TRADE_MODE_DEMO\020"
    "\001\022\030\n\024TRADE_MODE_SIMULATED\020\002\022\023\n\017TRADE_MOD"
    "E_LIVE\020\003*A\n\021RequestActionEnum\022\r\n\tSUBSCRI"
    "BE\020\001\022\017\n\013UNSUBSCRIBE\020\002\022\014\n\010SNAPSHOT\020\003*\336\002\n\017"
    "OrderStatusEnum\022\034\n\030ORDER_STATUS_UNSPECIF"
    "IED\020\000\022\033\n\027ORDER_STATUS_ORDER_SENT\020\001\022\035\n\031OR"
    "DER_STATUS_PENDING_OPEN\020\002\022\036\n\032ORDER_STATU"
    "S_PENDING_CHILD\020\003\022\025\n\021ORDER_STATUS_OPEN\020\004"
    "\022\'\n#ORDER_STATUS_PENDING_CANCEL_REPLACE\020"
    "\005\022\037\n\033ORDER_STATUS_PENDING_CANCEL\020\006\022\027\n\023OR"
    "DER_STATUS_FILLED\020\007\022\031\n\025ORDER_STATUS_CANC"
    "ELED\020\010\022\031\n\025ORDER_STATUS_REJECTED\020\t\022!\n\035ORD"
    "ER_STATUS_PARTIALLY_FILLED\020\n*\305\002\n\025OrderUp"
    "dateReasonEnum\022\035\n\031ORDER_UPDATE_REASON_UN"
    "SET\020\000\022 \n\034OPEN_ORDERS_REQUEST_RESPONSE\020\001\022"
    "\026\n\022NEW_ORDER_ACCEPTED\020\002\022\030\n\024GENERAL_ORDER"
    "_UPDATE\020\003\022\020\n\014ORDER_FILLED\020\004\022\032\n\026ORDER_FIL"
    "LED_PARTIALLY\020\005\022\022\n\016ORDER_CANCELED\020\006\022!\n\035O"
    "RDER_CANCEL_REPLACE_COMPLETE\020\007\022\026\n\022NEW_OR"
    "DER_REJECTED\020\010\022\031\n\025ORDER_CANCEL_REJECTED\020"
    "\t\022!\n\035ORDER_CANCEL_REPLACE_REJECTED\020\n*;\n\016"
    "AtBidOrAskEnum\022\021\n\rBID_ASK_UNSET\020\000\022\n\n\006AT_"
    "BID\020\001\022\n\n\006AT_ASK\020\002*q\n\031MarketDepthUpdateTy"
    "peEnum\022\017\n\013DEPTH_UNSET\020\000\022$\n MARKET_DEPTH_"
    "INSERT_UPDATE_LEVEL\020\001\022\035\n\031MARKET_DEPTH_DE"
    "LETE_LEVEL\020\002*\244\001\n\rOrderTypeEnum\022\024\n\020ORDER_"
    "TYPE_UNSET\020\000\022\025\n\021ORDER_TYPE_MARKET\020\001\022\024\n\020O"
    "RDER_TYPE_LIMIT\020\002\022\023\n\017ORDER_TYPE_STOP\020\003\022\031"
    "\n\025ORDER_TYPE_STOP_LIMIT\020\004\022 \n\034ORDER_TYPE_"
    "MARKET_IF_TOUCHED\020\005*\256\001\n\017TimeInForceEnum\022"
    "\r\n\tTIF_UNSET\020\000\022\013\n\007TIF_DAY\020\001\022\032\n\026TIF_GOOD_"
    "TILL_CANCELED\020\002\022\033\n\027TIF_GOOD_TILL_DATE_TI"
    "ME\020\003\022\033\n\027TIF_IMMEDIATE_OR_CANCEL\020\004\022\023\n\017TIF"
    "_ALL_OR_NONE\020\005\022\024\n\020TIF_FILL_OR_KILL\020\006*4\n\013"
    "BuySellEnum\022\022\n\016BUY_SELL_UNSET\020\000\022\007\n\003BUY\020\001"
    "\022\010\n\004SELL\020\002*F\n\022OpenCloseTradeEnum\022\017\n\013TRAD"
    "E_UNSET\020\000\022\016\n\nTRADE_OPEN\020\001\022\017\n\013TRADE_CLOSE"
    "\020\002*\\\n\030MarketDataFeedStatusEnum\022 \n\034MARKET"
    "_DATA_FEED_UNAVAILABLE\020\001\022\036\n\032MARKET_DATA_"
    "FEED_AVAILABLE\020\002*\330\006\n\026PriceDisplayFormatE"
    "num\022\'\n\032PRICE_DISPLAY_FORMAT_UNSET\020\377\377\377\377\377\377"
    "\377\377\377\001\022\"\n\036PRICE_DISPLAY_FORMAT_DECIMAL_0\020\000"
    "\022\"\n\036PRICE_DISPLAY_FORMAT_DECIMAL_1\020\001\022\"\n\036"
    "PRICE_DISPLAY_FORMAT_DECIMAL_2\020\002\022\"\n\036PRIC"
    "E_DISPLAY_FORMAT_DECIMAL_3\020\003\022\"\n\036PRICE_DI"
    "SPLAY_FORMAT_DECIMAL_4\020\004\022\"\n\036PRICE_DISPLA"
    "Y_FORMAT_DECIMAL_5\020\005\022\"\n\036PRICE_DISPLAY_FO"
    "RMAT_DECIMAL_6\020\006\022\"\n\036PRICE_DISPLAY_FORMAT"
    "_DECIMAL_7\020\007\022\"\n\036PRICE_DISPLAY_FORMAT_DEC"
    "IMAL_8\020\010\022\"\n\036PRICE_DISPLAY_FORMAT_DECIMAL"
    "_9\020\t\022)\n$PRICE_DISPLAY_FORMAT_DENOMINATOR"
    "_256\020\344\002\022)\n$PRICE_DISPLAY_FORMAT_DENOMINA"
    "TOR_128\020\344\001\022(\n#PRICE_DISPLAY_FORMAT_DENOM"
    "INATOR_64\020\244\001\0221\n,PRICE_DISPLAY_FORMAT_DEN"
    "OMINATOR_32_QUARTERS\020\210\001\022/\n*PRICE_DISPLAY"
    "_FORMAT_DENOMINATOR_32_HALVES\020\206\001\022(\n#PRIC"
    "E_DISPLAY_FORMAT_DENOMINATOR_32\020\204\001\022\'\n#PR"
    "ICE_DISPLAY_FORMAT_DENOMINATOR_16\020t\022&\n\"P"
    "RICE_DISPLAY_FORMAT_DENOMINATOR_8\020l\022&\n\"P"
    "RICE_DISPLAY_FORMAT_DENOMINATOR_4\020h\022&\n\"P"
    "RICE_DISPLAY_FORMAT_DENOMINATOR_2\020f*\315\002\n\020"
    "SecurityTypeEnum\022\027\n\023SECURITY_TYPE_UNSET\020"
    "\000\022\030\n\024SECURITY_TYPE_FUTURE\020\001\022\027\n\023SECURITY_"
    "TYPE_STOCK\020\002\022\027\n\023SECURITY_TYPE_FOREX\020\003\022\027\n"
    "\023SECURITY_TYPE_INDEX\020\004\022\"\n\036SECURITY_TYPE_"
    "FUTURES_STRATEGY\020\005\022 \n\034SECURITY_TYPE_FUTU"
    "RES_OPTION\020\007\022\036\n\032SECURITY_TYPE_STOCK_OPTI"
    "ON\020\006\022\036\n\032SECURITY_TYPE_INDEX_OPTION\020\010\022\026\n\022"
    "SECURITY_TYPE_BOND\020\t\022\035\n\031SECURITY_TYPE_MU"
    "TUAL_FUND\020\n*4\n\013PutCallEnum\022\014\n\010PC_UNSET\020\000"
    "\022\013\n\007PC_CALL\020\001\022\n\n\006PC_PUT\020\002*b\n\016SearchTypeE"
    "num\022\025\n\021SEARCH_TYPE_UNSET\020\000\022\031\n\025SEARCH_TYP"
    "E_BY_SYMBOL\020\001\022\036\n\032SEARCH_TYPE_BY_DESCRIPT"
    "ION\020\002*\204\002\n\032HistoricalDataIntervalEnum\022\021\n\r"
    "INTERVAL_TICK\020\000\022\025\n\021INTERVAL_1_SECOND\020\001\022\026"
    "\n\022INTERVAL_2_SECONDS\020\002\022\026\n\022INTERVAL_4_SEC"
    "ONDS\020\004\022\026\n\022INTERVAL_5_SECONDS\020\005\022\027\n\023INTERV"
    "AL_10_SECONDS\020\n\022\027\n\023INTERVAL_30_SECONDS\020\036"
    "\022\025\n\021INTERVAL_1_MINUTE\020<\022\024\n\016INTERVAL_1_DA"
    "Y\020\200\243\005\022\025\n\017INTERVAL_1_WEEK\020\200\365$", 19828);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DTCProtocol.proto", &protobuf_RegisterTypes);
  EncodingRequest::default_instance_ = new EncodingRequest();
  EncodingResponse::default_instance_ = new EncodingResponse();
  LogonRequest::default_instance_ = new LogonRequest();
  LogonResponse::default_instance_ = new LogonResponse();
  Logoff::default_instance_ = new Logoff();
  Heartbeat::default_instance_ = new Heartbeat();
  MarketDataFeedStatus::default_instance_ = new MarketDataFeedStatus();
  MarketDataFeedSymbolStatus::default_instance_ = new MarketDataFeedSymbolStatus();
  MarketDataRequest::default_instance_ = new MarketDataRequest();
  MarketDepthRequest::default_instance_ = new MarketDepthRequest();
  MarketDataReject::default_instance_ = new MarketDataReject();
  MarketDataSnapshot::default_instance_ = new MarketDataSnapshot();
  MarketDataSnapshot_Int::default_instance_ = new MarketDataSnapshot_Int();
  DepthEntry::default_instance_ = new DepthEntry();
  MarketDepthFullUpdate20::default_instance_ = new MarketDepthFullUpdate20();
  MarketDepthFullUpdate10::default_instance_ = new MarketDepthFullUpdate10();
  MarketDepthSnapshotLevel::default_instance_ = new MarketDepthSnapshotLevel();
  MarketDepthSnapshotLevel_Int::default_instance_ = new MarketDepthSnapshotLevel_Int();
  MarketDepthUpdateLevel::default_instance_ = new MarketDepthUpdateLevel();
  MarketDepthUpdateLevel_Int::default_instance_ = new MarketDepthUpdateLevel_Int();
  MarketDepthUpdateLevelCompact::default_instance_ = new MarketDepthUpdateLevelCompact();
  MarketDataUpdateSessionSettlement::default_instance_ = new MarketDataUpdateSessionSettlement();
  MarketDataUpdateSessionSettlement_Int::default_instance_ = new MarketDataUpdateSessionSettlement_Int();
  MarketDataUpdateSessionOpen::default_instance_ = new MarketDataUpdateSessionOpen();
  MarketDataUpdateSessionOpen_Int::default_instance_ = new MarketDataUpdateSessionOpen_Int();
  MarketDepthReject::default_instance_ = new MarketDepthReject();
  MarketDataUpdateTrade::default_instance_ = new MarketDataUpdateTrade();
  MarketDataUpdateTrade_Int::default_instance_ = new MarketDataUpdateTrade_Int();
  MarketDataUpdateBidAsk::default_instance_ = new MarketDataUpdateBidAsk();
  MarketDataUpdateBidAsk_Int::default_instance_ = new MarketDataUpdateBidAsk_Int();
  MarketDataUpdateBidAskCompact::default_instance_ = new MarketDataUpdateBidAskCompact();
  MarketDataUpdateTradeCompact::default_instance_ = new MarketDataUpdateTradeCompact();
  MarketDataUpdateSessionVolume::default_instance_ = new MarketDataUpdateSessionVolume();
  MarketDataUpdateOpenInterest::default_instance_ = new MarketDataUpdateOpenInterest();
  MarketDataUpdateSessionHigh::default_instance_ = new MarketDataUpdateSessionHigh();
  MarketDataUpdateSessionHigh_Int::default_instance_ = new MarketDataUpdateSessionHigh_Int();
  MarketDataUpdateSessionLow::default_instance_ = new MarketDataUpdateSessionLow();
  MarketDataUpdateSessionLow_Int::default_instance_ = new MarketDataUpdateSessionLow_Int();
  MarketDataUpdateLastTradeSnapshot::default_instance_ = new MarketDataUpdateLastTradeSnapshot();
  SubmitNewSingleOrder::default_instance_ = new SubmitNewSingleOrder();
  SubmitNewSingleOrderInt::default_instance_ = new SubmitNewSingleOrderInt();
  CancelReplaceOrder::default_instance_ = new CancelReplaceOrder();
  CancelReplaceOrderInt::default_instance_ = new CancelReplaceOrderInt();
  CancelOrder::default_instance_ = new CancelOrder();
  SubmitNewOCOOrder::default_instance_ = new SubmitNewOCOOrder();
  SubmitNewOCOOrderInt::default_instance_ = new SubmitNewOCOOrderInt();
  OpenOrdersRequest::default_instance_ = new OpenOrdersRequest();
  HistoricalOrderFillsRequest::default_instance_ = new HistoricalOrderFillsRequest();
  HistoricalOrderFillsReject::default_instance_ = new HistoricalOrderFillsReject();
  CurrentPositionsRequest::default_instance_ = new CurrentPositionsRequest();
  CurrentPositionsReject::default_instance_ = new CurrentPositionsReject();
  OrderUpdate::default_instance_ = new OrderUpdate();
  OpenOrdersReject::default_instance_ = new OpenOrdersReject();
  HistoricalOrderFillResponse::default_instance_ = new HistoricalOrderFillResponse();
  PositionUpdate::default_instance_ = new PositionUpdate();
  TradeAccountsRequest::default_instance_ = new TradeAccountsRequest();
  TradeAccountResponse::default_instance_ = new TradeAccountResponse();
  ExchangeListRequest::default_instance_ = new ExchangeListRequest();
  ExchangeListResponse::default_instance_ = new ExchangeListResponse();
  SymbolsForExchangeRequest::default_instance_ = new SymbolsForExchangeRequest();
  UnderlyingSymbolsForExchangeRequest::default_instance_ = new UnderlyingSymbolsForExchangeRequest();
  SymbolsForUnderlyingRequest::default_instance_ = new SymbolsForUnderlyingRequest();
  SymbolSearchRequest::default_instance_ = new SymbolSearchRequest();
  SecurityDefinitionForSymbolRequest::default_instance_ = new SecurityDefinitionForSymbolRequest();
  SecurityDefinitionResponse::default_instance_ = new SecurityDefinitionResponse();
  SecurityDefinitionReject::default_instance_ = new SecurityDefinitionReject();
  AccountBalanceRequest::default_instance_ = new AccountBalanceRequest();
  AccountBalanceReject::default_instance_ = new AccountBalanceReject();
  AccountBalanceUpdate::default_instance_ = new AccountBalanceUpdate();
  UserMessage::default_instance_ = new UserMessage();
  GeneralLogMessage::default_instance_ = new GeneralLogMessage();
  HistoricalPriceDataRequest::default_instance_ = new HistoricalPriceDataRequest();
  HistoricalPriceDataResponseHeader::default_instance_ = new HistoricalPriceDataResponseHeader();
  HistoricalPriceDataReject::default_instance_ = new HistoricalPriceDataReject();
  HistoricalPriceDataRecordResponse::default_instance_ = new HistoricalPriceDataRecordResponse();
  HistoricalPriceDataTickRecordResponse::default_instance_ = new HistoricalPriceDataTickRecordResponse();
  HistoricalPriceDataRecordResponse_Int::default_instance_ = new HistoricalPriceDataRecordResponse_Int();
  HistoricalPriceDataTickRecordResponse_Int::default_instance_ = new HistoricalPriceDataTickRecordResponse_Int();
  HistoricalPriceDataResponseTrailer::default_instance_ = new HistoricalPriceDataResponseTrailer();
  EncodingRequest::default_instance_->InitAsDefaultInstance();
  EncodingResponse::default_instance_->InitAsDefaultInstance();
  LogonRequest::default_instance_->InitAsDefaultInstance();
  LogonResponse::default_instance_->InitAsDefaultInstance();
  Logoff::default_instance_->InitAsDefaultInstance();
  Heartbeat::default_instance_->InitAsDefaultInstance();
  MarketDataFeedStatus::default_instance_->InitAsDefaultInstance();
  MarketDataFeedSymbolStatus::default_instance_->InitAsDefaultInstance();
  MarketDataRequest::default_instance_->InitAsDefaultInstance();
  MarketDepthRequest::default_instance_->InitAsDefaultInstance();
  MarketDataReject::default_instance_->InitAsDefaultInstance();
  MarketDataSnapshot::default_instance_->InitAsDefaultInstance();
  MarketDataSnapshot_Int::default_instance_->InitAsDefaultInstance();
  DepthEntry::default_instance_->InitAsDefaultInstance();
  MarketDepthFullUpdate20::default_instance_->InitAsDefaultInstance();
  MarketDepthFullUpdate10::default_instance_->InitAsDefaultInstance();
  MarketDepthSnapshotLevel::default_instance_->InitAsDefaultInstance();
  MarketDepthSnapshotLevel_Int::default_instance_->InitAsDefaultInstance();
  MarketDepthUpdateLevel::default_instance_->InitAsDefaultInstance();
  MarketDepthUpdateLevel_Int::default_instance_->InitAsDefaultInstance();
  MarketDepthUpdateLevelCompact::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateSessionSettlement::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateSessionSettlement_Int::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateSessionOpen::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateSessionOpen_Int::default_instance_->InitAsDefaultInstance();
  MarketDepthReject::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateTrade::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateTrade_Int::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateBidAsk::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateBidAsk_Int::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateBidAskCompact::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateTradeCompact::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateSessionVolume::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateOpenInterest::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateSessionHigh::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateSessionHigh_Int::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateSessionLow::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateSessionLow_Int::default_instance_->InitAsDefaultInstance();
  MarketDataUpdateLastTradeSnapshot::default_instance_->InitAsDefaultInstance();
  SubmitNewSingleOrder::default_instance_->InitAsDefaultInstance();
  SubmitNewSingleOrderInt::default_instance_->InitAsDefaultInstance();
  CancelReplaceOrder::default_instance_->InitAsDefaultInstance();
  CancelReplaceOrderInt::default_instance_->InitAsDefaultInstance();
  CancelOrder::default_instance_->InitAsDefaultInstance();
  SubmitNewOCOOrder::default_instance_->InitAsDefaultInstance();
  SubmitNewOCOOrderInt::default_instance_->InitAsDefaultInstance();
  OpenOrdersRequest::default_instance_->InitAsDefaultInstance();
  HistoricalOrderFillsRequest::default_instance_->InitAsDefaultInstance();
  HistoricalOrderFillsReject::default_instance_->InitAsDefaultInstance();
  CurrentPositionsRequest::default_instance_->InitAsDefaultInstance();
  CurrentPositionsReject::default_instance_->InitAsDefaultInstance();
  OrderUpdate::default_instance_->InitAsDefaultInstance();
  OpenOrdersReject::default_instance_->InitAsDefaultInstance();
  HistoricalOrderFillResponse::default_instance_->InitAsDefaultInstance();
  PositionUpdate::default_instance_->InitAsDefaultInstance();
  TradeAccountsRequest::default_instance_->InitAsDefaultInstance();
  TradeAccountResponse::default_instance_->InitAsDefaultInstance();
  ExchangeListRequest::default_instance_->InitAsDefaultInstance();
  ExchangeListResponse::default_instance_->InitAsDefaultInstance();
  SymbolsForExchangeRequest::default_instance_->InitAsDefaultInstance();
  UnderlyingSymbolsForExchangeRequest::default_instance_->InitAsDefaultInstance();
  SymbolsForUnderlyingRequest::default_instance_->InitAsDefaultInstance();
  SymbolSearchRequest::default_instance_->InitAsDefaultInstance();
  SecurityDefinitionForSymbolRequest::default_instance_->InitAsDefaultInstance();
  SecurityDefinitionResponse::default_instance_->InitAsDefaultInstance();
  SecurityDefinitionReject::default_instance_->InitAsDefaultInstance();
  AccountBalanceRequest::default_instance_->InitAsDefaultInstance();
  AccountBalanceReject::default_instance_->InitAsDefaultInstance();
  AccountBalanceUpdate::default_instance_->InitAsDefaultInstance();
  UserMessage::default_instance_->InitAsDefaultInstance();
  GeneralLogMessage::default_instance_->InitAsDefaultInstance();
  HistoricalPriceDataRequest::default_instance_->InitAsDefaultInstance();
  HistoricalPriceDataResponseHeader::default_instance_->InitAsDefaultInstance();
  HistoricalPriceDataReject::default_instance_->InitAsDefaultInstance();
  HistoricalPriceDataRecordResponse::default_instance_->InitAsDefaultInstance();
  HistoricalPriceDataTickRecordResponse::default_instance_->InitAsDefaultInstance();
  HistoricalPriceDataRecordResponse_Int::default_instance_->InitAsDefaultInstance();
  HistoricalPriceDataTickRecordResponse_Int::default_instance_->InitAsDefaultInstance();
  HistoricalPriceDataResponseTrailer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DTCProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DTCProtocol_2eproto {
  StaticDescriptorInitializer_DTCProtocol_2eproto() {
    protobuf_AddDesc_DTCProtocol_2eproto();
  }
} static_descriptor_initializer_DTCProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* DTCVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DTCVersion_descriptor_;
}
bool DTCVersion_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DTCMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DTCMessageType_descriptor_;
}
bool DTCMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 400:
    case 401:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 506:
    case 507:
    case 508:
    case 509:
    case 600:
    case 601:
    case 602:
    case 700:
    case 701:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EncodingEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncodingEnum_descriptor_;
}
bool EncodingEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogonStatusEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogonStatusEnum_descriptor_;
}
bool LogonStatusEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageSupportedEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageSupportedEnum_descriptor_;
}
bool MessageSupportedEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradeModeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeModeEnum_descriptor_;
}
bool TradeModeEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestActionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestActionEnum_descriptor_;
}
bool RequestActionEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderStatusEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderStatusEnum_descriptor_;
}
bool OrderStatusEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderUpdateReasonEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderUpdateReasonEnum_descriptor_;
}
bool OrderUpdateReasonEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AtBidOrAskEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtBidOrAskEnum_descriptor_;
}
bool AtBidOrAskEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketDepthUpdateTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthUpdateTypeEnum_descriptor_;
}
bool MarketDepthUpdateTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderTypeEnum_descriptor_;
}
bool OrderTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeInForceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeInForceEnum_descriptor_;
}
bool TimeInForceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuySellEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuySellEnum_descriptor_;
}
bool BuySellEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenCloseTradeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenCloseTradeEnum_descriptor_;
}
bool OpenCloseTradeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketDataFeedStatusEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataFeedStatusEnum_descriptor_;
}
bool MarketDataFeedStatusEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceDisplayFormatEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceDisplayFormatEnum_descriptor_;
}
bool PriceDisplayFormatEnum_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 102:
    case 104:
    case 108:
    case 116:
    case 132:
    case 134:
    case 136:
    case 164:
    case 228:
    case 356:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityTypeEnum_descriptor_;
}
bool SecurityTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PutCallEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutCallEnum_descriptor_;
}
bool PutCallEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SearchTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchTypeEnum_descriptor_;
}
bool SearchTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HistoricalDataIntervalEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalDataIntervalEnum_descriptor_;
}
bool HistoricalDataIntervalEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 10:
    case 30:
    case 60:
    case 86400:
    case 604800:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int EncodingRequest::kProtocolVersionFieldNumber;
const int EncodingRequest::kEncodingFieldNumber;
#endif  // !_MSC_VER

EncodingRequest::EncodingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.EncodingRequest)
}

void EncodingRequest::InitAsDefaultInstance() {
}

EncodingRequest::EncodingRequest(const EncodingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.EncodingRequest)
}

void EncodingRequest::SharedCtor() {
  _cached_size_ = 0;
  protocolversion_ = 0;
  encoding_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncodingRequest::~EncodingRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.EncodingRequest)
  SharedDtor();
}

void EncodingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EncodingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncodingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncodingRequest_descriptor_;
}

const EncodingRequest& EncodingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

EncodingRequest* EncodingRequest::default_instance_ = NULL;

EncodingRequest* EncodingRequest::New() const {
  return new EncodingRequest;
}

void EncodingRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EncodingRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(protocolversion_, encoding_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncodingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.EncodingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ProtocolVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
          set_has_protocolversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Encoding;
        break;
      }

      // optional .DTC_PB.EncodingEnum Encoding = 2;
      case 2: {
        if (tag == 16) {
         parse_Encoding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::EncodingEnum_IsValid(value)) {
            set_encoding(static_cast< ::DTC_PB::EncodingEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.EncodingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.EncodingRequest)
  return false;
#undef DO_
}

void EncodingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.EncodingRequest)
  // optional int32 ProtocolVersion = 1;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // optional .DTC_PB.EncodingEnum Encoding = 2;
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.EncodingRequest)
}

::google::protobuf::uint8* EncodingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.EncodingRequest)
  // optional int32 ProtocolVersion = 1;
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // optional .DTC_PB.EncodingEnum Encoding = 2;
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.EncodingRequest)
  return target;
}

int EncodingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ProtocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // optional .DTC_PB.EncodingEnum Encoding = 2;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncodingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncodingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncodingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncodingRequest::MergeFrom(const EncodingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncodingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodingRequest::CopyFrom(const EncodingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodingRequest::IsInitialized() const {

  return true;
}

void EncodingRequest::Swap(EncodingRequest* other) {
  if (other != this) {
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(encoding_, other->encoding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncodingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncodingRequest_descriptor_;
  metadata.reflection = EncodingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncodingResponse::kProtocolVersionFieldNumber;
const int EncodingResponse::kEncodingFieldNumber;
#endif  // !_MSC_VER

EncodingResponse::EncodingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.EncodingResponse)
}

void EncodingResponse::InitAsDefaultInstance() {
}

EncodingResponse::EncodingResponse(const EncodingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.EncodingResponse)
}

void EncodingResponse::SharedCtor() {
  _cached_size_ = 0;
  protocolversion_ = 0;
  encoding_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncodingResponse::~EncodingResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.EncodingResponse)
  SharedDtor();
}

void EncodingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EncodingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncodingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncodingResponse_descriptor_;
}

const EncodingResponse& EncodingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

EncodingResponse* EncodingResponse::default_instance_ = NULL;

EncodingResponse* EncodingResponse::New() const {
  return new EncodingResponse;
}

void EncodingResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EncodingResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(protocolversion_, encoding_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncodingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.EncodingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ProtocolVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
          set_has_protocolversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Encoding;
        break;
      }

      // optional .DTC_PB.EncodingEnum Encoding = 2;
      case 2: {
        if (tag == 16) {
         parse_Encoding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::EncodingEnum_IsValid(value)) {
            set_encoding(static_cast< ::DTC_PB::EncodingEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.EncodingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.EncodingResponse)
  return false;
#undef DO_
}

void EncodingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.EncodingResponse)
  // optional int32 ProtocolVersion = 1;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // optional .DTC_PB.EncodingEnum Encoding = 2;
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.EncodingResponse)
}

::google::protobuf::uint8* EncodingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.EncodingResponse)
  // optional int32 ProtocolVersion = 1;
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // optional .DTC_PB.EncodingEnum Encoding = 2;
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.EncodingResponse)
  return target;
}

int EncodingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ProtocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // optional .DTC_PB.EncodingEnum Encoding = 2;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncodingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncodingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncodingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncodingResponse::MergeFrom(const EncodingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncodingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodingResponse::CopyFrom(const EncodingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodingResponse::IsInitialized() const {

  return true;
}

void EncodingResponse::Swap(EncodingResponse* other) {
  if (other != this) {
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(encoding_, other->encoding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncodingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncodingResponse_descriptor_;
  metadata.reflection = EncodingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogonRequest::kProtocolVersionFieldNumber;
const int LogonRequest::kUsernameFieldNumber;
const int LogonRequest::kPasswordFieldNumber;
const int LogonRequest::kGeneralTextDataFieldNumber;
const int LogonRequest::kInteger1FieldNumber;
const int LogonRequest::kInteger2FieldNumber;
const int LogonRequest::kHeartbeatIntervalInSecondsFieldNumber;
const int LogonRequest::kTradeModeFieldNumber;
const int LogonRequest::kTradeAccountFieldNumber;
const int LogonRequest::kHardwareIdentifierFieldNumber;
const int LogonRequest::kClientNameFieldNumber;
#endif  // !_MSC_VER

LogonRequest::LogonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.LogonRequest)
}

void LogonRequest::InitAsDefaultInstance() {
}

LogonRequest::LogonRequest(const LogonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.LogonRequest)
}

void LogonRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocolversion_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generaltextdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  integer_1_ = 0;
  integer_2_ = 0;
  heartbeatintervalinseconds_ = 0;
  trademode_ = 1;
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogonRequest::~LogonRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.LogonRequest)
  SharedDtor();
}

void LogonRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (generaltextdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete generaltextdata_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (hardwareidentifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardwareidentifier_;
  }
  if (clientname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientname_;
  }
  if (this != default_instance_) {
  }
}

void LogonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogonRequest_descriptor_;
}

const LogonRequest& LogonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

LogonRequest* LogonRequest::default_instance_ = NULL;

LogonRequest* LogonRequest::New() const {
  return new LogonRequest;
}

void LogonRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogonRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(protocolversion_, integer_1_);
    ZR_(integer_2_, heartbeatintervalinseconds_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_generaltextdata()) {
      if (generaltextdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        generaltextdata_->clear();
      }
    }
    trademode_ = 1;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
    if (has_hardwareidentifier()) {
      if (hardwareidentifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hardwareidentifier_->clear();
      }
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.LogonRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ProtocolVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
          set_has_protocolversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Username;
        break;
      }

      // optional string Username = 2;
      case 2: {
        if (tag == 18) {
         parse_Username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Password;
        break;
      }

      // optional string Password = 3;
      case 3: {
        if (tag == 26) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GeneralTextData;
        break;
      }

      // optional string GeneralTextData = 4;
      case 4: {
        if (tag == 34) {
         parse_GeneralTextData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generaltextdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->generaltextdata().data(), this->generaltextdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "generaltextdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Integer_1;
        break;
      }

      // optional int32 Integer_1 = 5;
      case 5: {
        if (tag == 40) {
         parse_Integer_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_1_)));
          set_has_integer_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Integer_2;
        break;
      }

      // optional int32 Integer_2 = 6;
      case 6: {
        if (tag == 48) {
         parse_Integer_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_2_)));
          set_has_integer_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_HeartbeatIntervalInSeconds;
        break;
      }

      // optional int32 HeartbeatIntervalInSeconds = 7;
      case 7: {
        if (tag == 56) {
         parse_HeartbeatIntervalInSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeatintervalinseconds_)));
          set_has_heartbeatintervalinseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TradeMode;
        break;
      }

      // optional .DTC_PB.TradeModeEnum TradeMode = 8;
      case 8: {
        if (tag == 64) {
         parse_TradeMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TradeModeEnum_IsValid(value)) {
            set_trademode(static_cast< ::DTC_PB::TradeModeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 9;
      case 9: {
        if (tag == 74) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_HardwareIdentifier;
        break;
      }

      // optional string HardwareIdentifier = 10;
      case 10: {
        if (tag == 82) {
         parse_HardwareIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardwareidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardwareidentifier().data(), this->hardwareidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hardwareidentifier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ClientName;
        break;
      }

      // optional string ClientName = 11;
      case 11: {
        if (tag == 90) {
         parse_ClientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.LogonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.LogonRequest)
  return false;
#undef DO_
}

void LogonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.LogonRequest)
  // optional int32 ProtocolVersion = 1;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // optional string Username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string GeneralTextData = 4;
  if (has_generaltextdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generaltextdata().data(), this->generaltextdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "generaltextdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->generaltextdata(), output);
  }

  // optional int32 Integer_1 = 5;
  if (has_integer_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->integer_1(), output);
  }

  // optional int32 Integer_2 = 6;
  if (has_integer_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->integer_2(), output);
  }

  // optional int32 HeartbeatIntervalInSeconds = 7;
  if (has_heartbeatintervalinseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->heartbeatintervalinseconds(), output);
  }

  // optional .DTC_PB.TradeModeEnum TradeMode = 8;
  if (has_trademode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->trademode(), output);
  }

  // optional string TradeAccount = 9;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tradeaccount(), output);
  }

  // optional string HardwareIdentifier = 10;
  if (has_hardwareidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardwareidentifier().data(), this->hardwareidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardwareidentifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->hardwareidentifier(), output);
  }

  // optional string ClientName = 11;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->clientname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.LogonRequest)
}

::google::protobuf::uint8* LogonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.LogonRequest)
  // optional int32 ProtocolVersion = 1;
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // optional string Username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string GeneralTextData = 4;
  if (has_generaltextdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generaltextdata().data(), this->generaltextdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "generaltextdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->generaltextdata(), target);
  }

  // optional int32 Integer_1 = 5;
  if (has_integer_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->integer_1(), target);
  }

  // optional int32 Integer_2 = 6;
  if (has_integer_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->integer_2(), target);
  }

  // optional int32 HeartbeatIntervalInSeconds = 7;
  if (has_heartbeatintervalinseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->heartbeatintervalinseconds(), target);
  }

  // optional .DTC_PB.TradeModeEnum TradeMode = 8;
  if (has_trademode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->trademode(), target);
  }

  // optional string TradeAccount = 9;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tradeaccount(), target);
  }

  // optional string HardwareIdentifier = 10;
  if (has_hardwareidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardwareidentifier().data(), this->hardwareidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardwareidentifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hardwareidentifier(), target);
  }

  // optional string ClientName = 11;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->clientname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.LogonRequest)
  return target;
}

int LogonRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ProtocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // optional string Username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string GeneralTextData = 4;
    if (has_generaltextdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generaltextdata());
    }

    // optional int32 Integer_1 = 5;
    if (has_integer_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integer_1());
    }

    // optional int32 Integer_2 = 6;
    if (has_integer_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integer_2());
    }

    // optional int32 HeartbeatIntervalInSeconds = 7;
    if (has_heartbeatintervalinseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartbeatintervalinseconds());
    }

    // optional .DTC_PB.TradeModeEnum TradeMode = 8;
    if (has_trademode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trademode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string TradeAccount = 9;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string HardwareIdentifier = 10;
    if (has_hardwareidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardwareidentifier());
    }

    // optional string ClientName = 11;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogonRequest::MergeFrom(const LogonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_generaltextdata()) {
      set_generaltextdata(from.generaltextdata());
    }
    if (from.has_integer_1()) {
      set_integer_1(from.integer_1());
    }
    if (from.has_integer_2()) {
      set_integer_2(from.integer_2());
    }
    if (from.has_heartbeatintervalinseconds()) {
      set_heartbeatintervalinseconds(from.heartbeatintervalinseconds());
    }
    if (from.has_trademode()) {
      set_trademode(from.trademode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_hardwareidentifier()) {
      set_hardwareidentifier(from.hardwareidentifier());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogonRequest::CopyFrom(const LogonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonRequest::IsInitialized() const {

  return true;
}

void LogonRequest::Swap(LogonRequest* other) {
  if (other != this) {
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(generaltextdata_, other->generaltextdata_);
    std::swap(integer_1_, other->integer_1_);
    std::swap(integer_2_, other->integer_2_);
    std::swap(heartbeatintervalinseconds_, other->heartbeatintervalinseconds_);
    std::swap(trademode_, other->trademode_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(hardwareidentifier_, other->hardwareidentifier_);
    std::swap(clientname_, other->clientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogonRequest_descriptor_;
  metadata.reflection = LogonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogonResponse::kProtocolVersionFieldNumber;
const int LogonResponse::kResultFieldNumber;
const int LogonResponse::kResultTextFieldNumber;
const int LogonResponse::kReconnectAddressFieldNumber;
const int LogonResponse::kInteger1FieldNumber;
const int LogonResponse::kServerNameFieldNumber;
const int LogonResponse::kMarketDepthUpdatesBestBidAndAskFieldNumber;
const int LogonResponse::kTradingIsSupportedFieldNumber;
const int LogonResponse::kOCOOrdersSupportedFieldNumber;
const int LogonResponse::kOrderCancelReplaceSupportedFieldNumber;
const int LogonResponse::kSymbolExchangeDelimiterFieldNumber;
const int LogonResponse::kSecurityDefinitionsSupportedFieldNumber;
const int LogonResponse::kHistoricalPriceDataSupportedFieldNumber;
const int LogonResponse::kResubscribeWhenMarketDataFeedAvailableFieldNumber;
const int LogonResponse::kMarketDepthIsSupportedFieldNumber;
const int LogonResponse::kOneHistoricalPriceDataRequestPerConnectionFieldNumber;
const int LogonResponse::kBracketOrdersSupportedFieldNumber;
const int LogonResponse::kUseIntegerPriceOrderMessagesFieldNumber;
const int LogonResponse::kUsesMultiplePositionsPerSymbolAndTradeAccountFieldNumber;
const int LogonResponse::kMarketDataSupportedFieldNumber;
#endif  // !_MSC_VER

LogonResponse::LogonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.LogonResponse)
}

void LogonResponse::InitAsDefaultInstance() {
}

LogonResponse::LogonResponse(const LogonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.LogonResponse)
}

void LogonResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocolversion_ = 0;
  result_ = 1;
  resulttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reconnectaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  integer_1_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketdepthupdatesbestbidandask_ = 0u;
  tradingissupported_ = 0u;
  ocoorderssupported_ = 0u;
  ordercancelreplacesupported_ = 0u;
  symbolexchangedelimiter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitydefinitionssupported_ = 0u;
  historicalpricedatasupported_ = 0u;
  resubscribewhenmarketdatafeedavailable_ = 0u;
  marketdepthissupported_ = 0u;
  onehistoricalpricedatarequestperconnection_ = 0u;
  bracketorderssupported_ = 0u;
  useintegerpriceordermessages_ = 0u;
  usesmultiplepositionspersymbolandtradeaccount_ = 0u;
  marketdatasupported_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogonResponse::~LogonResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.LogonResponse)
  SharedDtor();
}

void LogonResponse::SharedDtor() {
  if (resulttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resulttext_;
  }
  if (reconnectaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reconnectaddress_;
  }
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (symbolexchangedelimiter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbolexchangedelimiter_;
  }
  if (this != default_instance_) {
  }
}

void LogonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogonResponse_descriptor_;
}

const LogonResponse& LogonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

LogonResponse* LogonResponse::default_instance_ = NULL;

LogonResponse* LogonResponse::New() const {
  return new LogonResponse;
}

void LogonResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogonResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(integer_1_, tradingissupported_);
    protocolversion_ = 0;
    result_ = 1;
    if (has_resulttext()) {
      if (resulttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resulttext_->clear();
      }
    }
    if (has_reconnectaddress()) {
      if (reconnectaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reconnectaddress_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ordercancelreplacesupported_, onehistoricalpricedatarequestperconnection_);
    ocoorderssupported_ = 0u;
    if (has_symbolexchangedelimiter()) {
      if (symbolexchangedelimiter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbolexchangedelimiter_->clear();
      }
    }
  }
  ZR_(bracketorderssupported_, marketdatasupported_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.LogonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ProtocolVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
          set_has_protocolversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }

      // optional .DTC_PB.LogonStatusEnum Result = 2;
      case 2: {
        if (tag == 16) {
         parse_Result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::LogonStatusEnum_IsValid(value)) {
            set_result(static_cast< ::DTC_PB::LogonStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ResultText;
        break;
      }

      // optional string ResultText = 3;
      case 3: {
        if (tag == 26) {
         parse_ResultText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resulttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resulttext().data(), this->resulttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resulttext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ReconnectAddress;
        break;
      }

      // optional string ReconnectAddress = 4;
      case 4: {
        if (tag == 34) {
         parse_ReconnectAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reconnectaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reconnectaddress().data(), this->reconnectaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reconnectaddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Integer_1;
        break;
      }

      // optional int32 Integer_1 = 5;
      case 5: {
        if (tag == 40) {
         parse_Integer_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_1_)));
          set_has_integer_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ServerName;
        break;
      }

      // optional string ServerName = 6;
      case 6: {
        if (tag == 50) {
         parse_ServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_MarketDepthUpdatesBestBidAndAsk;
        break;
      }

      // optional uint32 MarketDepthUpdatesBestBidAndAsk = 7;
      case 7: {
        if (tag == 56) {
         parse_MarketDepthUpdatesBestBidAndAsk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdepthupdatesbestbidandask_)));
          set_has_marketdepthupdatesbestbidandask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TradingIsSupported;
        break;
      }

      // optional uint32 TradingIsSupported = 8;
      case 8: {
        if (tag == 64) {
         parse_TradingIsSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingissupported_)));
          set_has_tradingissupported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_OCOOrdersSupported;
        break;
      }

      // optional uint32 OCOOrdersSupported = 9;
      case 9: {
        if (tag == 72) {
         parse_OCOOrdersSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ocoorderssupported_)));
          set_has_ocoorderssupported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_OrderCancelReplaceSupported;
        break;
      }

      // optional uint32 OrderCancelReplaceSupported = 10;
      case 10: {
        if (tag == 80) {
         parse_OrderCancelReplaceSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordercancelreplacesupported_)));
          set_has_ordercancelreplacesupported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_SymbolExchangeDelimiter;
        break;
      }

      // optional string SymbolExchangeDelimiter = 11;
      case 11: {
        if (tag == 90) {
         parse_SymbolExchangeDelimiter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbolexchangedelimiter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbolexchangedelimiter().data(), this->symbolexchangedelimiter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbolexchangedelimiter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_SecurityDefinitionsSupported;
        break;
      }

      // optional uint32 SecurityDefinitionsSupported = 12;
      case 12: {
        if (tag == 96) {
         parse_SecurityDefinitionsSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &securitydefinitionssupported_)));
          set_has_securitydefinitionssupported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_HistoricalPriceDataSupported;
        break;
      }

      // optional uint32 HistoricalPriceDataSupported = 13;
      case 13: {
        if (tag == 104) {
         parse_HistoricalPriceDataSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &historicalpricedatasupported_)));
          set_has_historicalpricedatasupported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ResubscribeWhenMarketDataFeedAvailable;
        break;
      }

      // optional uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
      case 14: {
        if (tag == 112) {
         parse_ResubscribeWhenMarketDataFeedAvailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resubscribewhenmarketdatafeedavailable_)));
          set_has_resubscribewhenmarketdatafeedavailable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_MarketDepthIsSupported;
        break;
      }

      // optional uint32 MarketDepthIsSupported = 15;
      case 15: {
        if (tag == 120) {
         parse_MarketDepthIsSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdepthissupported_)));
          set_has_marketdepthissupported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_OneHistoricalPriceDataRequestPerConnection;
        break;
      }

      // optional uint32 OneHistoricalPriceDataRequestPerConnection = 16;
      case 16: {
        if (tag == 128) {
         parse_OneHistoricalPriceDataRequestPerConnection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onehistoricalpricedatarequestperconnection_)));
          set_has_onehistoricalpricedatarequestperconnection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_BracketOrdersSupported;
        break;
      }

      // optional uint32 BracketOrdersSupported = 17;
      case 17: {
        if (tag == 136) {
         parse_BracketOrdersSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bracketorderssupported_)));
          set_has_bracketorderssupported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_UseIntegerPriceOrderMessages;
        break;
      }

      // optional uint32 UseIntegerPriceOrderMessages = 18;
      case 18: {
        if (tag == 144) {
         parse_UseIntegerPriceOrderMessages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useintegerpriceordermessages_)));
          set_has_useintegerpriceordermessages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_UsesMultiplePositionsPerSymbolAndTradeAccount;
        break;
      }

      // optional uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
      case 19: {
        if (tag == 152) {
         parse_UsesMultiplePositionsPerSymbolAndTradeAccount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usesmultiplepositionspersymbolandtradeaccount_)));
          set_has_usesmultiplepositionspersymbolandtradeaccount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_MarketDataSupported;
        break;
      }

      // optional uint32 MarketDataSupported = 20;
      case 20: {
        if (tag == 160) {
         parse_MarketDataSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdatasupported_)));
          set_has_marketdatasupported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.LogonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.LogonResponse)
  return false;
#undef DO_
}

void LogonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.LogonResponse)
  // optional int32 ProtocolVersion = 1;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // optional .DTC_PB.LogonStatusEnum Result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string ResultText = 3;
  if (has_resulttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulttext().data(), this->resulttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulttext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resulttext(), output);
  }

  // optional string ReconnectAddress = 4;
  if (has_reconnectaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reconnectaddress().data(), this->reconnectaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reconnectaddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reconnectaddress(), output);
  }

  // optional int32 Integer_1 = 5;
  if (has_integer_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->integer_1(), output);
  }

  // optional string ServerName = 6;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->servername(), output);
  }

  // optional uint32 MarketDepthUpdatesBestBidAndAsk = 7;
  if (has_marketdepthupdatesbestbidandask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->marketdepthupdatesbestbidandask(), output);
  }

  // optional uint32 TradingIsSupported = 8;
  if (has_tradingissupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tradingissupported(), output);
  }

  // optional uint32 OCOOrdersSupported = 9;
  if (has_ocoorderssupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ocoorderssupported(), output);
  }

  // optional uint32 OrderCancelReplaceSupported = 10;
  if (has_ordercancelreplacesupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ordercancelreplacesupported(), output);
  }

  // optional string SymbolExchangeDelimiter = 11;
  if (has_symbolexchangedelimiter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbolexchangedelimiter().data(), this->symbolexchangedelimiter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbolexchangedelimiter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->symbolexchangedelimiter(), output);
  }

  // optional uint32 SecurityDefinitionsSupported = 12;
  if (has_securitydefinitionssupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->securitydefinitionssupported(), output);
  }

  // optional uint32 HistoricalPriceDataSupported = 13;
  if (has_historicalpricedatasupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->historicalpricedatasupported(), output);
  }

  // optional uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
  if (has_resubscribewhenmarketdatafeedavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->resubscribewhenmarketdatafeedavailable(), output);
  }

  // optional uint32 MarketDepthIsSupported = 15;
  if (has_marketdepthissupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->marketdepthissupported(), output);
  }

  // optional uint32 OneHistoricalPriceDataRequestPerConnection = 16;
  if (has_onehistoricalpricedatarequestperconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->onehistoricalpricedatarequestperconnection(), output);
  }

  // optional uint32 BracketOrdersSupported = 17;
  if (has_bracketorderssupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->bracketorderssupported(), output);
  }

  // optional uint32 UseIntegerPriceOrderMessages = 18;
  if (has_useintegerpriceordermessages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->useintegerpriceordermessages(), output);
  }

  // optional uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
  if (has_usesmultiplepositionspersymbolandtradeaccount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->usesmultiplepositionspersymbolandtradeaccount(), output);
  }

  // optional uint32 MarketDataSupported = 20;
  if (has_marketdatasupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->marketdatasupported(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.LogonResponse)
}

::google::protobuf::uint8* LogonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.LogonResponse)
  // optional int32 ProtocolVersion = 1;
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // optional .DTC_PB.LogonStatusEnum Result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string ResultText = 3;
  if (has_resulttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulttext().data(), this->resulttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resulttext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resulttext(), target);
  }

  // optional string ReconnectAddress = 4;
  if (has_reconnectaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reconnectaddress().data(), this->reconnectaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reconnectaddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reconnectaddress(), target);
  }

  // optional int32 Integer_1 = 5;
  if (has_integer_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->integer_1(), target);
  }

  // optional string ServerName = 6;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->servername(), target);
  }

  // optional uint32 MarketDepthUpdatesBestBidAndAsk = 7;
  if (has_marketdepthupdatesbestbidandask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->marketdepthupdatesbestbidandask(), target);
  }

  // optional uint32 TradingIsSupported = 8;
  if (has_tradingissupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tradingissupported(), target);
  }

  // optional uint32 OCOOrdersSupported = 9;
  if (has_ocoorderssupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ocoorderssupported(), target);
  }

  // optional uint32 OrderCancelReplaceSupported = 10;
  if (has_ordercancelreplacesupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ordercancelreplacesupported(), target);
  }

  // optional string SymbolExchangeDelimiter = 11;
  if (has_symbolexchangedelimiter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbolexchangedelimiter().data(), this->symbolexchangedelimiter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbolexchangedelimiter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->symbolexchangedelimiter(), target);
  }

  // optional uint32 SecurityDefinitionsSupported = 12;
  if (has_securitydefinitionssupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->securitydefinitionssupported(), target);
  }

  // optional uint32 HistoricalPriceDataSupported = 13;
  if (has_historicalpricedatasupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->historicalpricedatasupported(), target);
  }

  // optional uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
  if (has_resubscribewhenmarketdatafeedavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->resubscribewhenmarketdatafeedavailable(), target);
  }

  // optional uint32 MarketDepthIsSupported = 15;
  if (has_marketdepthissupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->marketdepthissupported(), target);
  }

  // optional uint32 OneHistoricalPriceDataRequestPerConnection = 16;
  if (has_onehistoricalpricedatarequestperconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->onehistoricalpricedatarequestperconnection(), target);
  }

  // optional uint32 BracketOrdersSupported = 17;
  if (has_bracketorderssupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->bracketorderssupported(), target);
  }

  // optional uint32 UseIntegerPriceOrderMessages = 18;
  if (has_useintegerpriceordermessages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->useintegerpriceordermessages(), target);
  }

  // optional uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
  if (has_usesmultiplepositionspersymbolandtradeaccount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->usesmultiplepositionspersymbolandtradeaccount(), target);
  }

  // optional uint32 MarketDataSupported = 20;
  if (has_marketdatasupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->marketdatasupported(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.LogonResponse)
  return target;
}

int LogonResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ProtocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // optional .DTC_PB.LogonStatusEnum Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string ResultText = 3;
    if (has_resulttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resulttext());
    }

    // optional string ReconnectAddress = 4;
    if (has_reconnectaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reconnectaddress());
    }

    // optional int32 Integer_1 = 5;
    if (has_integer_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integer_1());
    }

    // optional string ServerName = 6;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional uint32 MarketDepthUpdatesBestBidAndAsk = 7;
    if (has_marketdepthupdatesbestbidandask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marketdepthupdatesbestbidandask());
    }

    // optional uint32 TradingIsSupported = 8;
    if (has_tradingissupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingissupported());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 OCOOrdersSupported = 9;
    if (has_ocoorderssupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ocoorderssupported());
    }

    // optional uint32 OrderCancelReplaceSupported = 10;
    if (has_ordercancelreplacesupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordercancelreplacesupported());
    }

    // optional string SymbolExchangeDelimiter = 11;
    if (has_symbolexchangedelimiter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbolexchangedelimiter());
    }

    // optional uint32 SecurityDefinitionsSupported = 12;
    if (has_securitydefinitionssupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->securitydefinitionssupported());
    }

    // optional uint32 HistoricalPriceDataSupported = 13;
    if (has_historicalpricedatasupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->historicalpricedatasupported());
    }

    // optional uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
    if (has_resubscribewhenmarketdatafeedavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resubscribewhenmarketdatafeedavailable());
    }

    // optional uint32 MarketDepthIsSupported = 15;
    if (has_marketdepthissupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marketdepthissupported());
    }

    // optional uint32 OneHistoricalPriceDataRequestPerConnection = 16;
    if (has_onehistoricalpricedatarequestperconnection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onehistoricalpricedatarequestperconnection());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 BracketOrdersSupported = 17;
    if (has_bracketorderssupported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bracketorderssupported());
    }

    // optional uint32 UseIntegerPriceOrderMessages = 18;
    if (has_useintegerpriceordermessages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useintegerpriceordermessages());
    }

    // optional uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
    if (has_usesmultiplepositionspersymbolandtradeaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usesmultiplepositionspersymbolandtradeaccount());
    }

    // optional uint32 MarketDataSupported = 20;
    if (has_marketdatasupported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marketdatasupported());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogonResponse::MergeFrom(const LogonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resulttext()) {
      set_resulttext(from.resulttext());
    }
    if (from.has_reconnectaddress()) {
      set_reconnectaddress(from.reconnectaddress());
    }
    if (from.has_integer_1()) {
      set_integer_1(from.integer_1());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_marketdepthupdatesbestbidandask()) {
      set_marketdepthupdatesbestbidandask(from.marketdepthupdatesbestbidandask());
    }
    if (from.has_tradingissupported()) {
      set_tradingissupported(from.tradingissupported());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ocoorderssupported()) {
      set_ocoorderssupported(from.ocoorderssupported());
    }
    if (from.has_ordercancelreplacesupported()) {
      set_ordercancelreplacesupported(from.ordercancelreplacesupported());
    }
    if (from.has_symbolexchangedelimiter()) {
      set_symbolexchangedelimiter(from.symbolexchangedelimiter());
    }
    if (from.has_securitydefinitionssupported()) {
      set_securitydefinitionssupported(from.securitydefinitionssupported());
    }
    if (from.has_historicalpricedatasupported()) {
      set_historicalpricedatasupported(from.historicalpricedatasupported());
    }
    if (from.has_resubscribewhenmarketdatafeedavailable()) {
      set_resubscribewhenmarketdatafeedavailable(from.resubscribewhenmarketdatafeedavailable());
    }
    if (from.has_marketdepthissupported()) {
      set_marketdepthissupported(from.marketdepthissupported());
    }
    if (from.has_onehistoricalpricedatarequestperconnection()) {
      set_onehistoricalpricedatarequestperconnection(from.onehistoricalpricedatarequestperconnection());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bracketorderssupported()) {
      set_bracketorderssupported(from.bracketorderssupported());
    }
    if (from.has_useintegerpriceordermessages()) {
      set_useintegerpriceordermessages(from.useintegerpriceordermessages());
    }
    if (from.has_usesmultiplepositionspersymbolandtradeaccount()) {
      set_usesmultiplepositionspersymbolandtradeaccount(from.usesmultiplepositionspersymbolandtradeaccount());
    }
    if (from.has_marketdatasupported()) {
      set_marketdatasupported(from.marketdatasupported());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogonResponse::CopyFrom(const LogonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonResponse::IsInitialized() const {

  return true;
}

void LogonResponse::Swap(LogonResponse* other) {
  if (other != this) {
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(result_, other->result_);
    std::swap(resulttext_, other->resulttext_);
    std::swap(reconnectaddress_, other->reconnectaddress_);
    std::swap(integer_1_, other->integer_1_);
    std::swap(servername_, other->servername_);
    std::swap(marketdepthupdatesbestbidandask_, other->marketdepthupdatesbestbidandask_);
    std::swap(tradingissupported_, other->tradingissupported_);
    std::swap(ocoorderssupported_, other->ocoorderssupported_);
    std::swap(ordercancelreplacesupported_, other->ordercancelreplacesupported_);
    std::swap(symbolexchangedelimiter_, other->symbolexchangedelimiter_);
    std::swap(securitydefinitionssupported_, other->securitydefinitionssupported_);
    std::swap(historicalpricedatasupported_, other->historicalpricedatasupported_);
    std::swap(resubscribewhenmarketdatafeedavailable_, other->resubscribewhenmarketdatafeedavailable_);
    std::swap(marketdepthissupported_, other->marketdepthissupported_);
    std::swap(onehistoricalpricedatarequestperconnection_, other->onehistoricalpricedatarequestperconnection_);
    std::swap(bracketorderssupported_, other->bracketorderssupported_);
    std::swap(useintegerpriceordermessages_, other->useintegerpriceordermessages_);
    std::swap(usesmultiplepositionspersymbolandtradeaccount_, other->usesmultiplepositionspersymbolandtradeaccount_);
    std::swap(marketdatasupported_, other->marketdatasupported_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogonResponse_descriptor_;
  metadata.reflection = LogonResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Logoff::kReasonFieldNumber;
const int Logoff::kDoNotReconnectFieldNumber;
#endif  // !_MSC_VER

Logoff::Logoff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.Logoff)
}

void Logoff::InitAsDefaultInstance() {
}

Logoff::Logoff(const Logoff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.Logoff)
}

void Logoff::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donotreconnect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logoff::~Logoff() {
  // @@protoc_insertion_point(destructor:DTC_PB.Logoff)
  SharedDtor();
}

void Logoff::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void Logoff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logoff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logoff_descriptor_;
}

const Logoff& Logoff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

Logoff* Logoff::default_instance_ = NULL;

Logoff* Logoff::New() const {
  return new Logoff;
}

void Logoff::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    donotreconnect_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logoff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.Logoff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DoNotReconnect;
        break;
      }

      // optional uint32 DoNotReconnect = 2;
      case 2: {
        if (tag == 16) {
         parse_DoNotReconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donotreconnect_)));
          set_has_donotreconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.Logoff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.Logoff)
  return false;
#undef DO_
}

void Logoff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.Logoff)
  // optional string Reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // optional uint32 DoNotReconnect = 2;
  if (has_donotreconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->donotreconnect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.Logoff)
}

::google::protobuf::uint8* Logoff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.Logoff)
  // optional string Reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // optional uint32 DoNotReconnect = 2;
  if (has_donotreconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->donotreconnect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.Logoff)
  return target;
}

int Logoff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional uint32 DoNotReconnect = 2;
    if (has_donotreconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donotreconnect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logoff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logoff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logoff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logoff::MergeFrom(const Logoff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_donotreconnect()) {
      set_donotreconnect(from.donotreconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logoff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logoff::CopyFrom(const Logoff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logoff::IsInitialized() const {

  return true;
}

void Logoff::Swap(Logoff* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(donotreconnect_, other->donotreconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logoff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logoff_descriptor_;
  metadata.reflection = Logoff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Heartbeat::kNumDroppedMessagesFieldNumber;
const int Heartbeat::kCurrentDateTimeFieldNumber;
#endif  // !_MSC_VER

Heartbeat::Heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.Heartbeat)
}

void Heartbeat::InitAsDefaultInstance() {
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.Heartbeat)
}

void Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  numdroppedmessages_ = 0u;
  currentdatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:DTC_PB.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heartbeat_descriptor_;
}

const Heartbeat& Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

Heartbeat* Heartbeat::default_instance_ = NULL;

Heartbeat* Heartbeat::New() const {
  return new Heartbeat;
}

void Heartbeat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Heartbeat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(currentdatetime_, numdroppedmessages_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NumDroppedMessages = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numdroppedmessages_)));
          set_has_numdroppedmessages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_CurrentDateTime;
        break;
      }

      // optional sfixed64 CurrentDateTime = 2;
      case 2: {
        if (tag == 17) {
         parse_CurrentDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &currentdatetime_)));
          set_has_currentdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.Heartbeat)
  // optional uint32 NumDroppedMessages = 1;
  if (has_numdroppedmessages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->numdroppedmessages(), output);
  }

  // optional sfixed64 CurrentDateTime = 2;
  if (has_currentdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->currentdatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.Heartbeat)
  // optional uint32 NumDroppedMessages = 1;
  if (has_numdroppedmessages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->numdroppedmessages(), target);
  }

  // optional sfixed64 CurrentDateTime = 2;
  if (has_currentdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->currentdatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.Heartbeat)
  return target;
}

int Heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NumDroppedMessages = 1;
    if (has_numdroppedmessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numdroppedmessages());
    }

    // optional sfixed64 CurrentDateTime = 2;
    if (has_currentdatetime()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numdroppedmessages()) {
      set_numdroppedmessages(from.numdroppedmessages());
    }
    if (from.has_currentdatetime()) {
      set_currentdatetime(from.currentdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {

  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other != this) {
    std::swap(numdroppedmessages_, other->numdroppedmessages_);
    std::swap(currentdatetime_, other->currentdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heartbeat_descriptor_;
  metadata.reflection = Heartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataFeedStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

MarketDataFeedStatus::MarketDataFeedStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataFeedStatus)
}

void MarketDataFeedStatus::InitAsDefaultInstance() {
}

MarketDataFeedStatus::MarketDataFeedStatus(const MarketDataFeedStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataFeedStatus)
}

void MarketDataFeedStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataFeedStatus::~MarketDataFeedStatus() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataFeedStatus)
  SharedDtor();
}

void MarketDataFeedStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataFeedStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataFeedStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataFeedStatus_descriptor_;
}

const MarketDataFeedStatus& MarketDataFeedStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataFeedStatus* MarketDataFeedStatus::default_instance_ = NULL;

MarketDataFeedStatus* MarketDataFeedStatus::New() const {
  return new MarketDataFeedStatus;
}

void MarketDataFeedStatus::Clear() {
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataFeedStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataFeedStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DTC_PB.MarketDataFeedStatusEnum Status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDataFeedStatusEnum_IsValid(value)) {
            set_status(static_cast< ::DTC_PB::MarketDataFeedStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataFeedStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataFeedStatus)
  return false;
#undef DO_
}

void MarketDataFeedStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataFeedStatus)
  // optional .DTC_PB.MarketDataFeedStatusEnum Status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataFeedStatus)
}

::google::protobuf::uint8* MarketDataFeedStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataFeedStatus)
  // optional .DTC_PB.MarketDataFeedStatusEnum Status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataFeedStatus)
  return target;
}

int MarketDataFeedStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DTC_PB.MarketDataFeedStatusEnum Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataFeedStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataFeedStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataFeedStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataFeedStatus::MergeFrom(const MarketDataFeedStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataFeedStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataFeedStatus::CopyFrom(const MarketDataFeedStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataFeedStatus::IsInitialized() const {

  return true;
}

void MarketDataFeedStatus::Swap(MarketDataFeedStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataFeedStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataFeedStatus_descriptor_;
  metadata.reflection = MarketDataFeedStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataFeedSymbolStatus::kSymbolIDFieldNumber;
const int MarketDataFeedSymbolStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

MarketDataFeedSymbolStatus::MarketDataFeedSymbolStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataFeedSymbolStatus)
}

void MarketDataFeedSymbolStatus::InitAsDefaultInstance() {
}

MarketDataFeedSymbolStatus::MarketDataFeedSymbolStatus(const MarketDataFeedSymbolStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataFeedSymbolStatus)
}

void MarketDataFeedSymbolStatus::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataFeedSymbolStatus::~MarketDataFeedSymbolStatus() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataFeedSymbolStatus)
  SharedDtor();
}

void MarketDataFeedSymbolStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataFeedSymbolStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataFeedSymbolStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataFeedSymbolStatus_descriptor_;
}

const MarketDataFeedSymbolStatus& MarketDataFeedSymbolStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataFeedSymbolStatus* MarketDataFeedSymbolStatus::default_instance_ = NULL;

MarketDataFeedSymbolStatus* MarketDataFeedSymbolStatus::New() const {
  return new MarketDataFeedSymbolStatus;
}

void MarketDataFeedSymbolStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    symbolid_ = 0u;
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataFeedSymbolStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataFeedSymbolStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .DTC_PB.MarketDataFeedStatusEnum Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDataFeedStatusEnum_IsValid(value)) {
            set_status(static_cast< ::DTC_PB::MarketDataFeedStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataFeedSymbolStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataFeedSymbolStatus)
  return false;
#undef DO_
}

void MarketDataFeedSymbolStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataFeedSymbolStatus)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.MarketDataFeedStatusEnum Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataFeedSymbolStatus)
}

::google::protobuf::uint8* MarketDataFeedSymbolStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataFeedSymbolStatus)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.MarketDataFeedStatusEnum Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataFeedSymbolStatus)
  return target;
}

int MarketDataFeedSymbolStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.MarketDataFeedStatusEnum Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataFeedSymbolStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataFeedSymbolStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataFeedSymbolStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataFeedSymbolStatus::MergeFrom(const MarketDataFeedSymbolStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataFeedSymbolStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataFeedSymbolStatus::CopyFrom(const MarketDataFeedSymbolStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataFeedSymbolStatus::IsInitialized() const {

  return true;
}

void MarketDataFeedSymbolStatus::Swap(MarketDataFeedSymbolStatus* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataFeedSymbolStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataFeedSymbolStatus_descriptor_;
  metadata.reflection = MarketDataFeedSymbolStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataRequest::kRequestActionFieldNumber;
const int MarketDataRequest::kSymbolIDFieldNumber;
const int MarketDataRequest::kSymbolFieldNumber;
const int MarketDataRequest::kExchangeFieldNumber;
#endif  // !_MSC_VER

MarketDataRequest::MarketDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataRequest)
}

void MarketDataRequest::InitAsDefaultInstance() {
}

MarketDataRequest::MarketDataRequest(const MarketDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataRequest)
}

void MarketDataRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestaction_ = 1;
  symbolid_ = 0u;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataRequest::~MarketDataRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataRequest)
  SharedDtor();
}

void MarketDataRequest::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (this != default_instance_) {
  }
}

void MarketDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataRequest_descriptor_;
}

const MarketDataRequest& MarketDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataRequest* MarketDataRequest::default_instance_ = NULL;

MarketDataRequest* MarketDataRequest::New() const {
  return new MarketDataRequest;
}

void MarketDataRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    requestaction_ = 1;
    symbolid_ = 0u;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DTC_PB.RequestActionEnum RequestAction = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::RequestActionEnum_IsValid(value)) {
            set_requestaction(static_cast< ::DTC_PB::RequestActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SymbolID;
        break;
      }

      // optional uint32 SymbolID = 2;
      case 2: {
        if (tag == 16) {
         parse_SymbolID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Symbol;
        break;
      }

      // optional string Symbol = 3;
      case 3: {
        if (tag == 26) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 4;
      case 4: {
        if (tag == 34) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataRequest)
  return false;
#undef DO_
}

void MarketDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataRequest)
  // optional .DTC_PB.RequestActionEnum RequestAction = 1;
  if (has_requestaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requestaction(), output);
  }

  // optional uint32 SymbolID = 2;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->symbolid(), output);
  }

  // optional string Symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // optional string Exchange = 4;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataRequest)
}

::google::protobuf::uint8* MarketDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataRequest)
  // optional .DTC_PB.RequestActionEnum RequestAction = 1;
  if (has_requestaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requestaction(), target);
  }

  // optional uint32 SymbolID = 2;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->symbolid(), target);
  }

  // optional string Symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // optional string Exchange = 4;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataRequest)
  return target;
}

int MarketDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DTC_PB.RequestActionEnum RequestAction = 1;
    if (has_requestaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requestaction());
    }

    // optional uint32 SymbolID = 2;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional string Symbol = 3;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 4;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataRequest::MergeFrom(const MarketDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestaction()) {
      set_requestaction(from.requestaction());
    }
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataRequest::CopyFrom(const MarketDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataRequest::IsInitialized() const {

  return true;
}

void MarketDataRequest::Swap(MarketDataRequest* other) {
  if (other != this) {
    std::swap(requestaction_, other->requestaction_);
    std::swap(symbolid_, other->symbolid_);
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataRequest_descriptor_;
  metadata.reflection = MarketDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDepthRequest::kRequestActionFieldNumber;
const int MarketDepthRequest::kSymbolIDFieldNumber;
const int MarketDepthRequest::kSymbolFieldNumber;
const int MarketDepthRequest::kExchangeFieldNumber;
const int MarketDepthRequest::kNumLevelsFieldNumber;
#endif  // !_MSC_VER

MarketDepthRequest::MarketDepthRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthRequest)
}

void MarketDepthRequest::InitAsDefaultInstance() {
}

MarketDepthRequest::MarketDepthRequest(const MarketDepthRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthRequest)
}

void MarketDepthRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestaction_ = 1;
  symbolid_ = 0u;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numlevels_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDepthRequest::~MarketDepthRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthRequest)
  SharedDtor();
}

void MarketDepthRequest::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (this != default_instance_) {
  }
}

void MarketDepthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDepthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthRequest_descriptor_;
}

const MarketDepthRequest& MarketDepthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDepthRequest* MarketDepthRequest::default_instance_ = NULL;

MarketDepthRequest* MarketDepthRequest::New() const {
  return new MarketDepthRequest;
}

void MarketDepthRequest::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    requestaction_ = 1;
    symbolid_ = 0u;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    numlevels_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDepthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DTC_PB.RequestActionEnum RequestAction = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::RequestActionEnum_IsValid(value)) {
            set_requestaction(static_cast< ::DTC_PB::RequestActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SymbolID;
        break;
      }

      // optional uint32 SymbolID = 2;
      case 2: {
        if (tag == 16) {
         parse_SymbolID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Symbol;
        break;
      }

      // optional string Symbol = 3;
      case 3: {
        if (tag == 26) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 4;
      case 4: {
        if (tag == 34) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NumLevels;
        break;
      }

      // optional int32 NumLevels = 5;
      case 5: {
        if (tag == 40) {
         parse_NumLevels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlevels_)));
          set_has_numlevels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthRequest)
  return false;
#undef DO_
}

void MarketDepthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthRequest)
  // optional .DTC_PB.RequestActionEnum RequestAction = 1;
  if (has_requestaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requestaction(), output);
  }

  // optional uint32 SymbolID = 2;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->symbolid(), output);
  }

  // optional string Symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // optional string Exchange = 4;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange(), output);
  }

  // optional int32 NumLevels = 5;
  if (has_numlevels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numlevels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthRequest)
}

::google::protobuf::uint8* MarketDepthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthRequest)
  // optional .DTC_PB.RequestActionEnum RequestAction = 1;
  if (has_requestaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requestaction(), target);
  }

  // optional uint32 SymbolID = 2;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->symbolid(), target);
  }

  // optional string Symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // optional string Exchange = 4;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange(), target);
  }

  // optional int32 NumLevels = 5;
  if (has_numlevels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numlevels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthRequest)
  return target;
}

int MarketDepthRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DTC_PB.RequestActionEnum RequestAction = 1;
    if (has_requestaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requestaction());
    }

    // optional uint32 SymbolID = 2;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional string Symbol = 3;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 4;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional int32 NumLevels = 5;
    if (has_numlevels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlevels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDepthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDepthRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDepthRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDepthRequest::MergeFrom(const MarketDepthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestaction()) {
      set_requestaction(from.requestaction());
    }
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_numlevels()) {
      set_numlevels(from.numlevels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDepthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthRequest::CopyFrom(const MarketDepthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthRequest::IsInitialized() const {

  return true;
}

void MarketDepthRequest::Swap(MarketDepthRequest* other) {
  if (other != this) {
    std::swap(requestaction_, other->requestaction_);
    std::swap(symbolid_, other->symbolid_);
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(numlevels_, other->numlevels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDepthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDepthRequest_descriptor_;
  metadata.reflection = MarketDepthRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataReject::kSymbolIDFieldNumber;
const int MarketDataReject::kRejectTextFieldNumber;
#endif  // !_MSC_VER

MarketDataReject::MarketDataReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataReject)
}

void MarketDataReject::InitAsDefaultInstance() {
}

MarketDataReject::MarketDataReject(const MarketDataReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataReject)
}

void MarketDataReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbolid_ = 0u;
  rejecttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataReject::~MarketDataReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataReject)
  SharedDtor();
}

void MarketDataReject::SharedDtor() {
  if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rejecttext_;
  }
  if (this != default_instance_) {
  }
}

void MarketDataReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataReject_descriptor_;
}

const MarketDataReject& MarketDataReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataReject* MarketDataReject::default_instance_ = NULL;

MarketDataReject* MarketDataReject::New() const {
  return new MarketDataReject;
}

void MarketDataReject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    symbolid_ = 0u;
    if (has_rejecttext()) {
      if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rejecttext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RejectText;
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (tag == 18) {
         parse_RejectText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), this->rejecttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rejecttext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataReject)
  return false;
#undef DO_
}

void MarketDataReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataReject)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataReject)
}

::google::protobuf::uint8* MarketDataReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataReject)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataReject)
  return target;
}

int MarketDataReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataReject::MergeFrom(const MarketDataReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_rejecttext()) {
      set_rejecttext(from.rejecttext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataReject::CopyFrom(const MarketDataReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataReject::IsInitialized() const {

  return true;
}

void MarketDataReject::Swap(MarketDataReject* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(rejecttext_, other->rejecttext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataReject_descriptor_;
  metadata.reflection = MarketDataReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataSnapshot::kSymbolIDFieldNumber;
const int MarketDataSnapshot::kSessionSettlementPriceFieldNumber;
const int MarketDataSnapshot::kSessionOpenPriceFieldNumber;
const int MarketDataSnapshot::kSessionHighPriceFieldNumber;
const int MarketDataSnapshot::kSessionLowPriceFieldNumber;
const int MarketDataSnapshot::kSessionVolumeFieldNumber;
const int MarketDataSnapshot::kSessionNumTradesFieldNumber;
const int MarketDataSnapshot::kOpenInterestFieldNumber;
const int MarketDataSnapshot::kBidPriceFieldNumber;
const int MarketDataSnapshot::kAskPriceFieldNumber;
const int MarketDataSnapshot::kAskQuantityFieldNumber;
const int MarketDataSnapshot::kBidQuantityFieldNumber;
const int MarketDataSnapshot::kLastTradePriceFieldNumber;
const int MarketDataSnapshot::kLastTradeVolumeFieldNumber;
const int MarketDataSnapshot::kLastTradeDateTimeFieldNumber;
const int MarketDataSnapshot::kBidAskDateTimeFieldNumber;
#endif  // !_MSC_VER

MarketDataSnapshot::MarketDataSnapshot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataSnapshot)
}

void MarketDataSnapshot::InitAsDefaultInstance() {
}

MarketDataSnapshot::MarketDataSnapshot(const MarketDataSnapshot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataSnapshot)
}

void MarketDataSnapshot::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  sessionsettlementprice_ = 0;
  sessionopenprice_ = 0;
  sessionhighprice_ = 0;
  sessionlowprice_ = 0;
  sessionvolume_ = 0;
  sessionnumtrades_ = 0u;
  openinterest_ = 0u;
  bidprice_ = 0;
  askprice_ = 0;
  askquantity_ = 0;
  bidquantity_ = 0;
  lasttradeprice_ = 0;
  lasttradevolume_ = 0;
  lasttradedatetime_ = 0;
  bidaskdatetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataSnapshot::~MarketDataSnapshot() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataSnapshot)
  SharedDtor();
}

void MarketDataSnapshot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataSnapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataSnapshot_descriptor_;
}

const MarketDataSnapshot& MarketDataSnapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataSnapshot* MarketDataSnapshot::default_instance_ = NULL;

MarketDataSnapshot* MarketDataSnapshot::New() const {
  return new MarketDataSnapshot;
}

void MarketDataSnapshot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataSnapshot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sessionsettlementprice_, sessionvolume_);
    openinterest_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(bidprice_, bidaskdatetime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_SessionSettlementPrice;
        break;
      }

      // optional double SessionSettlementPrice = 2;
      case 2: {
        if (tag == 17) {
         parse_SessionSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionsettlementprice_)));
          set_has_sessionsettlementprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_SessionOpenPrice;
        break;
      }

      // optional double SessionOpenPrice = 3;
      case 3: {
        if (tag == 25) {
         parse_SessionOpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionopenprice_)));
          set_has_sessionopenprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_SessionHighPrice;
        break;
      }

      // optional double SessionHighPrice = 4;
      case 4: {
        if (tag == 33) {
         parse_SessionHighPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionhighprice_)));
          set_has_sessionhighprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_SessionLowPrice;
        break;
      }

      // optional double SessionLowPrice = 5;
      case 5: {
        if (tag == 41) {
         parse_SessionLowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionlowprice_)));
          set_has_sessionlowprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_SessionVolume;
        break;
      }

      // optional double SessionVolume = 6;
      case 6: {
        if (tag == 49) {
         parse_SessionVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionvolume_)));
          set_has_sessionvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SessionNumTrades;
        break;
      }

      // optional uint32 SessionNumTrades = 7;
      case 7: {
        if (tag == 56) {
         parse_SessionNumTrades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionnumtrades_)));
          set_has_sessionnumtrades();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_OpenInterest;
        break;
      }

      // optional uint32 OpenInterest = 8;
      case 8: {
        if (tag == 64) {
         parse_OpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_BidPrice;
        break;
      }

      // optional double BidPrice = 9;
      case 9: {
        if (tag == 73) {
         parse_BidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
          set_has_bidprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_AskPrice;
        break;
      }

      // optional double AskPrice = 10;
      case 10: {
        if (tag == 81) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
          set_has_askprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_AskQuantity;
        break;
      }

      // optional double AskQuantity = 11;
      case 11: {
        if (tag == 89) {
         parse_AskQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askquantity_)));
          set_has_askquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_BidQuantity;
        break;
      }

      // optional double BidQuantity = 12;
      case 12: {
        if (tag == 97) {
         parse_BidQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidquantity_)));
          set_has_bidquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_LastTradePrice;
        break;
      }

      // optional double LastTradePrice = 13;
      case 13: {
        if (tag == 105) {
         parse_LastTradePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradeprice_)));
          set_has_lasttradeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_LastTradeVolume;
        break;
      }

      // optional double LastTradeVolume = 14;
      case 14: {
        if (tag == 113) {
         parse_LastTradeVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradevolume_)));
          set_has_lasttradevolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_LastTradeDateTime;
        break;
      }

      // optional double LastTradeDateTime = 15;
      case 15: {
        if (tag == 121) {
         parse_LastTradeDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradedatetime_)));
          set_has_lasttradedatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_BidAskDateTime;
        break;
      }

      // optional double BidAskDateTime = 16;
      case 16: {
        if (tag == 129) {
         parse_BidAskDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidaskdatetime_)));
          set_has_bidaskdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataSnapshot)
  return false;
#undef DO_
}

void MarketDataSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataSnapshot)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double SessionSettlementPrice = 2;
  if (has_sessionsettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sessionsettlementprice(), output);
  }

  // optional double SessionOpenPrice = 3;
  if (has_sessionopenprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sessionopenprice(), output);
  }

  // optional double SessionHighPrice = 4;
  if (has_sessionhighprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sessionhighprice(), output);
  }

  // optional double SessionLowPrice = 5;
  if (has_sessionlowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sessionlowprice(), output);
  }

  // optional double SessionVolume = 6;
  if (has_sessionvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sessionvolume(), output);
  }

  // optional uint32 SessionNumTrades = 7;
  if (has_sessionnumtrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sessionnumtrades(), output);
  }

  // optional uint32 OpenInterest = 8;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->openinterest(), output);
  }

  // optional double BidPrice = 9;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bidprice(), output);
  }

  // optional double AskPrice = 10;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->askprice(), output);
  }

  // optional double AskQuantity = 11;
  if (has_askquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->askquantity(), output);
  }

  // optional double BidQuantity = 12;
  if (has_bidquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->bidquantity(), output);
  }

  // optional double LastTradePrice = 13;
  if (has_lasttradeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lasttradeprice(), output);
  }

  // optional double LastTradeVolume = 14;
  if (has_lasttradevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->lasttradevolume(), output);
  }

  // optional double LastTradeDateTime = 15;
  if (has_lasttradedatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lasttradedatetime(), output);
  }

  // optional double BidAskDateTime = 16;
  if (has_bidaskdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->bidaskdatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataSnapshot)
}

::google::protobuf::uint8* MarketDataSnapshot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataSnapshot)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double SessionSettlementPrice = 2;
  if (has_sessionsettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sessionsettlementprice(), target);
  }

  // optional double SessionOpenPrice = 3;
  if (has_sessionopenprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sessionopenprice(), target);
  }

  // optional double SessionHighPrice = 4;
  if (has_sessionhighprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sessionhighprice(), target);
  }

  // optional double SessionLowPrice = 5;
  if (has_sessionlowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sessionlowprice(), target);
  }

  // optional double SessionVolume = 6;
  if (has_sessionvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sessionvolume(), target);
  }

  // optional uint32 SessionNumTrades = 7;
  if (has_sessionnumtrades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sessionnumtrades(), target);
  }

  // optional uint32 OpenInterest = 8;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->openinterest(), target);
  }

  // optional double BidPrice = 9;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bidprice(), target);
  }

  // optional double AskPrice = 10;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->askprice(), target);
  }

  // optional double AskQuantity = 11;
  if (has_askquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->askquantity(), target);
  }

  // optional double BidQuantity = 12;
  if (has_bidquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->bidquantity(), target);
  }

  // optional double LastTradePrice = 13;
  if (has_lasttradeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lasttradeprice(), target);
  }

  // optional double LastTradeVolume = 14;
  if (has_lasttradevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->lasttradevolume(), target);
  }

  // optional double LastTradeDateTime = 15;
  if (has_lasttradedatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lasttradedatetime(), target);
  }

  // optional double BidAskDateTime = 16;
  if (has_bidaskdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->bidaskdatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataSnapshot)
  return target;
}

int MarketDataSnapshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional double SessionSettlementPrice = 2;
    if (has_sessionsettlementprice()) {
      total_size += 1 + 8;
    }

    // optional double SessionOpenPrice = 3;
    if (has_sessionopenprice()) {
      total_size += 1 + 8;
    }

    // optional double SessionHighPrice = 4;
    if (has_sessionhighprice()) {
      total_size += 1 + 8;
    }

    // optional double SessionLowPrice = 5;
    if (has_sessionlowprice()) {
      total_size += 1 + 8;
    }

    // optional double SessionVolume = 6;
    if (has_sessionvolume()) {
      total_size += 1 + 8;
    }

    // optional uint32 SessionNumTrades = 7;
    if (has_sessionnumtrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionnumtrades());
    }

    // optional uint32 OpenInterest = 8;
    if (has_openinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openinterest());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double BidPrice = 9;
    if (has_bidprice()) {
      total_size += 1 + 8;
    }

    // optional double AskPrice = 10;
    if (has_askprice()) {
      total_size += 1 + 8;
    }

    // optional double AskQuantity = 11;
    if (has_askquantity()) {
      total_size += 1 + 8;
    }

    // optional double BidQuantity = 12;
    if (has_bidquantity()) {
      total_size += 1 + 8;
    }

    // optional double LastTradePrice = 13;
    if (has_lasttradeprice()) {
      total_size += 1 + 8;
    }

    // optional double LastTradeVolume = 14;
    if (has_lasttradevolume()) {
      total_size += 1 + 8;
    }

    // optional double LastTradeDateTime = 15;
    if (has_lasttradedatetime()) {
      total_size += 1 + 8;
    }

    // optional double BidAskDateTime = 16;
    if (has_bidaskdatetime()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataSnapshot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataSnapshot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataSnapshot::MergeFrom(const MarketDataSnapshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_sessionsettlementprice()) {
      set_sessionsettlementprice(from.sessionsettlementprice());
    }
    if (from.has_sessionopenprice()) {
      set_sessionopenprice(from.sessionopenprice());
    }
    if (from.has_sessionhighprice()) {
      set_sessionhighprice(from.sessionhighprice());
    }
    if (from.has_sessionlowprice()) {
      set_sessionlowprice(from.sessionlowprice());
    }
    if (from.has_sessionvolume()) {
      set_sessionvolume(from.sessionvolume());
    }
    if (from.has_sessionnumtrades()) {
      set_sessionnumtrades(from.sessionnumtrades());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidprice()) {
      set_bidprice(from.bidprice());
    }
    if (from.has_askprice()) {
      set_askprice(from.askprice());
    }
    if (from.has_askquantity()) {
      set_askquantity(from.askquantity());
    }
    if (from.has_bidquantity()) {
      set_bidquantity(from.bidquantity());
    }
    if (from.has_lasttradeprice()) {
      set_lasttradeprice(from.lasttradeprice());
    }
    if (from.has_lasttradevolume()) {
      set_lasttradevolume(from.lasttradevolume());
    }
    if (from.has_lasttradedatetime()) {
      set_lasttradedatetime(from.lasttradedatetime());
    }
    if (from.has_bidaskdatetime()) {
      set_bidaskdatetime(from.bidaskdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSnapshot::CopyFrom(const MarketDataSnapshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataSnapshot::IsInitialized() const {

  return true;
}

void MarketDataSnapshot::Swap(MarketDataSnapshot* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(sessionsettlementprice_, other->sessionsettlementprice_);
    std::swap(sessionopenprice_, other->sessionopenprice_);
    std::swap(sessionhighprice_, other->sessionhighprice_);
    std::swap(sessionlowprice_, other->sessionlowprice_);
    std::swap(sessionvolume_, other->sessionvolume_);
    std::swap(sessionnumtrades_, other->sessionnumtrades_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(askprice_, other->askprice_);
    std::swap(askquantity_, other->askquantity_);
    std::swap(bidquantity_, other->bidquantity_);
    std::swap(lasttradeprice_, other->lasttradeprice_);
    std::swap(lasttradevolume_, other->lasttradevolume_);
    std::swap(lasttradedatetime_, other->lasttradedatetime_);
    std::swap(bidaskdatetime_, other->bidaskdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataSnapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataSnapshot_descriptor_;
  metadata.reflection = MarketDataSnapshot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataSnapshot_Int::kSymbolIDFieldNumber;
const int MarketDataSnapshot_Int::kSessionSettlementPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionOpenPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionHighPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionLowPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionVolumeFieldNumber;
const int MarketDataSnapshot_Int::kSessionNumTradesFieldNumber;
const int MarketDataSnapshot_Int::kOpenInterestFieldNumber;
const int MarketDataSnapshot_Int::kBidPriceFieldNumber;
const int MarketDataSnapshot_Int::kAskPriceFieldNumber;
const int MarketDataSnapshot_Int::kAskQuantityFieldNumber;
const int MarketDataSnapshot_Int::kBidQuantityFieldNumber;
const int MarketDataSnapshot_Int::kLastTradePriceFieldNumber;
const int MarketDataSnapshot_Int::kLastTradeVolumeFieldNumber;
const int MarketDataSnapshot_Int::kLastTradeDateTimeFieldNumber;
const int MarketDataSnapshot_Int::kBidAskDateTimeFieldNumber;
#endif  // !_MSC_VER

MarketDataSnapshot_Int::MarketDataSnapshot_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataSnapshot_Int)
}

void MarketDataSnapshot_Int::InitAsDefaultInstance() {
}

MarketDataSnapshot_Int::MarketDataSnapshot_Int(const MarketDataSnapshot_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataSnapshot_Int)
}

void MarketDataSnapshot_Int::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  sessionsettlementprice_ = 0;
  sessionopenprice_ = 0;
  sessionhighprice_ = 0;
  sessionlowprice_ = 0;
  sessionvolume_ = 0;
  sessionnumtrades_ = 0u;
  openinterest_ = 0u;
  bidprice_ = 0;
  askprice_ = 0;
  askquantity_ = 0;
  bidquantity_ = 0;
  lasttradeprice_ = 0;
  lasttradevolume_ = 0;
  lasttradedatetime_ = 0;
  bidaskdatetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataSnapshot_Int::~MarketDataSnapshot_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataSnapshot_Int)
  SharedDtor();
}

void MarketDataSnapshot_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataSnapshot_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataSnapshot_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataSnapshot_Int_descriptor_;
}

const MarketDataSnapshot_Int& MarketDataSnapshot_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataSnapshot_Int* MarketDataSnapshot_Int::default_instance_ = NULL;

MarketDataSnapshot_Int* MarketDataSnapshot_Int::New() const {
  return new MarketDataSnapshot_Int;
}

void MarketDataSnapshot_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataSnapshot_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(symbolid_, openinterest_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(bidprice_, bidaskdatetime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataSnapshot_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataSnapshot_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SessionSettlementPrice;
        break;
      }

      // optional int32 SessionSettlementPrice = 2;
      case 2: {
        if (tag == 16) {
         parse_SessionSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionsettlementprice_)));
          set_has_sessionsettlementprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SessionOpenPrice;
        break;
      }

      // optional int32 SessionOpenPrice = 3;
      case 3: {
        if (tag == 24) {
         parse_SessionOpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionopenprice_)));
          set_has_sessionopenprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SessionHighPrice;
        break;
      }

      // optional int32 SessionHighPrice = 4;
      case 4: {
        if (tag == 32) {
         parse_SessionHighPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionhighprice_)));
          set_has_sessionhighprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SessionLowPrice;
        break;
      }

      // optional int32 SessionLowPrice = 5;
      case 5: {
        if (tag == 40) {
         parse_SessionLowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionlowprice_)));
          set_has_sessionlowprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SessionVolume;
        break;
      }

      // optional int32 SessionVolume = 6;
      case 6: {
        if (tag == 48) {
         parse_SessionVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionvolume_)));
          set_has_sessionvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SessionNumTrades;
        break;
      }

      // optional uint32 SessionNumTrades = 7;
      case 7: {
        if (tag == 56) {
         parse_SessionNumTrades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionnumtrades_)));
          set_has_sessionnumtrades();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_OpenInterest;
        break;
      }

      // optional uint32 OpenInterest = 8;
      case 8: {
        if (tag == 64) {
         parse_OpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_BidPrice;
        break;
      }

      // optional int32 BidPrice = 9;
      case 9: {
        if (tag == 72) {
         parse_BidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidprice_)));
          set_has_bidprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_AskPrice;
        break;
      }

      // optional int32 AskPrice = 10;
      case 10: {
        if (tag == 80) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askprice_)));
          set_has_askprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_AskQuantity;
        break;
      }

      // optional int32 AskQuantity = 11;
      case 11: {
        if (tag == 88) {
         parse_AskQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askquantity_)));
          set_has_askquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_BidQuantity;
        break;
      }

      // optional int32 BidQuantity = 12;
      case 12: {
        if (tag == 96) {
         parse_BidQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidquantity_)));
          set_has_bidquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_LastTradePrice;
        break;
      }

      // optional int32 LastTradePrice = 13;
      case 13: {
        if (tag == 104) {
         parse_LastTradePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttradeprice_)));
          set_has_lasttradeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_LastTradeVolume;
        break;
      }

      // optional int32 LastTradeVolume = 14;
      case 14: {
        if (tag == 112) {
         parse_LastTradeVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttradevolume_)));
          set_has_lasttradevolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_LastTradeDateTime;
        break;
      }

      // optional double LastTradeDateTime = 15;
      case 15: {
        if (tag == 121) {
         parse_LastTradeDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradedatetime_)));
          set_has_lasttradedatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_BidAskDateTime;
        break;
      }

      // optional double BidAskDateTime = 16;
      case 16: {
        if (tag == 129) {
         parse_BidAskDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidaskdatetime_)));
          set_has_bidaskdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataSnapshot_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataSnapshot_Int)
  return false;
#undef DO_
}

void MarketDataSnapshot_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataSnapshot_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 SessionSettlementPrice = 2;
  if (has_sessionsettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionsettlementprice(), output);
  }

  // optional int32 SessionOpenPrice = 3;
  if (has_sessionopenprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionopenprice(), output);
  }

  // optional int32 SessionHighPrice = 4;
  if (has_sessionhighprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessionhighprice(), output);
  }

  // optional int32 SessionLowPrice = 5;
  if (has_sessionlowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sessionlowprice(), output);
  }

  // optional int32 SessionVolume = 6;
  if (has_sessionvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sessionvolume(), output);
  }

  // optional uint32 SessionNumTrades = 7;
  if (has_sessionnumtrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sessionnumtrades(), output);
  }

  // optional uint32 OpenInterest = 8;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->openinterest(), output);
  }

  // optional int32 BidPrice = 9;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bidprice(), output);
  }

  // optional int32 AskPrice = 10;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->askprice(), output);
  }

  // optional int32 AskQuantity = 11;
  if (has_askquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->askquantity(), output);
  }

  // optional int32 BidQuantity = 12;
  if (has_bidquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bidquantity(), output);
  }

  // optional int32 LastTradePrice = 13;
  if (has_lasttradeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lasttradeprice(), output);
  }

  // optional int32 LastTradeVolume = 14;
  if (has_lasttradevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lasttradevolume(), output);
  }

  // optional double LastTradeDateTime = 15;
  if (has_lasttradedatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lasttradedatetime(), output);
  }

  // optional double BidAskDateTime = 16;
  if (has_bidaskdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->bidaskdatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataSnapshot_Int)
}

::google::protobuf::uint8* MarketDataSnapshot_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataSnapshot_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 SessionSettlementPrice = 2;
  if (has_sessionsettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sessionsettlementprice(), target);
  }

  // optional int32 SessionOpenPrice = 3;
  if (has_sessionopenprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sessionopenprice(), target);
  }

  // optional int32 SessionHighPrice = 4;
  if (has_sessionhighprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sessionhighprice(), target);
  }

  // optional int32 SessionLowPrice = 5;
  if (has_sessionlowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sessionlowprice(), target);
  }

  // optional int32 SessionVolume = 6;
  if (has_sessionvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sessionvolume(), target);
  }

  // optional uint32 SessionNumTrades = 7;
  if (has_sessionnumtrades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sessionnumtrades(), target);
  }

  // optional uint32 OpenInterest = 8;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->openinterest(), target);
  }

  // optional int32 BidPrice = 9;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bidprice(), target);
  }

  // optional int32 AskPrice = 10;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->askprice(), target);
  }

  // optional int32 AskQuantity = 11;
  if (has_askquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->askquantity(), target);
  }

  // optional int32 BidQuantity = 12;
  if (has_bidquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bidquantity(), target);
  }

  // optional int32 LastTradePrice = 13;
  if (has_lasttradeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lasttradeprice(), target);
  }

  // optional int32 LastTradeVolume = 14;
  if (has_lasttradevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lasttradevolume(), target);
  }

  // optional double LastTradeDateTime = 15;
  if (has_lasttradedatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lasttradedatetime(), target);
  }

  // optional double BidAskDateTime = 16;
  if (has_bidaskdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->bidaskdatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataSnapshot_Int)
  return target;
}

int MarketDataSnapshot_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 SessionSettlementPrice = 2;
    if (has_sessionsettlementprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionsettlementprice());
    }

    // optional int32 SessionOpenPrice = 3;
    if (has_sessionopenprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionopenprice());
    }

    // optional int32 SessionHighPrice = 4;
    if (has_sessionhighprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionhighprice());
    }

    // optional int32 SessionLowPrice = 5;
    if (has_sessionlowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionlowprice());
    }

    // optional int32 SessionVolume = 6;
    if (has_sessionvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionvolume());
    }

    // optional uint32 SessionNumTrades = 7;
    if (has_sessionnumtrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionnumtrades());
    }

    // optional uint32 OpenInterest = 8;
    if (has_openinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openinterest());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 BidPrice = 9;
    if (has_bidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidprice());
    }

    // optional int32 AskPrice = 10;
    if (has_askprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askprice());
    }

    // optional int32 AskQuantity = 11;
    if (has_askquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askquantity());
    }

    // optional int32 BidQuantity = 12;
    if (has_bidquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidquantity());
    }

    // optional int32 LastTradePrice = 13;
    if (has_lasttradeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttradeprice());
    }

    // optional int32 LastTradeVolume = 14;
    if (has_lasttradevolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttradevolume());
    }

    // optional double LastTradeDateTime = 15;
    if (has_lasttradedatetime()) {
      total_size += 1 + 8;
    }

    // optional double BidAskDateTime = 16;
    if (has_bidaskdatetime()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataSnapshot_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataSnapshot_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataSnapshot_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataSnapshot_Int::MergeFrom(const MarketDataSnapshot_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_sessionsettlementprice()) {
      set_sessionsettlementprice(from.sessionsettlementprice());
    }
    if (from.has_sessionopenprice()) {
      set_sessionopenprice(from.sessionopenprice());
    }
    if (from.has_sessionhighprice()) {
      set_sessionhighprice(from.sessionhighprice());
    }
    if (from.has_sessionlowprice()) {
      set_sessionlowprice(from.sessionlowprice());
    }
    if (from.has_sessionvolume()) {
      set_sessionvolume(from.sessionvolume());
    }
    if (from.has_sessionnumtrades()) {
      set_sessionnumtrades(from.sessionnumtrades());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidprice()) {
      set_bidprice(from.bidprice());
    }
    if (from.has_askprice()) {
      set_askprice(from.askprice());
    }
    if (from.has_askquantity()) {
      set_askquantity(from.askquantity());
    }
    if (from.has_bidquantity()) {
      set_bidquantity(from.bidquantity());
    }
    if (from.has_lasttradeprice()) {
      set_lasttradeprice(from.lasttradeprice());
    }
    if (from.has_lasttradevolume()) {
      set_lasttradevolume(from.lasttradevolume());
    }
    if (from.has_lasttradedatetime()) {
      set_lasttradedatetime(from.lasttradedatetime());
    }
    if (from.has_bidaskdatetime()) {
      set_bidaskdatetime(from.bidaskdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataSnapshot_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSnapshot_Int::CopyFrom(const MarketDataSnapshot_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataSnapshot_Int::IsInitialized() const {

  return true;
}

void MarketDataSnapshot_Int::Swap(MarketDataSnapshot_Int* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(sessionsettlementprice_, other->sessionsettlementprice_);
    std::swap(sessionopenprice_, other->sessionopenprice_);
    std::swap(sessionhighprice_, other->sessionhighprice_);
    std::swap(sessionlowprice_, other->sessionlowprice_);
    std::swap(sessionvolume_, other->sessionvolume_);
    std::swap(sessionnumtrades_, other->sessionnumtrades_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(askprice_, other->askprice_);
    std::swap(askquantity_, other->askquantity_);
    std::swap(bidquantity_, other->bidquantity_);
    std::swap(lasttradeprice_, other->lasttradeprice_);
    std::swap(lasttradevolume_, other->lasttradevolume_);
    std::swap(lasttradedatetime_, other->lasttradedatetime_);
    std::swap(bidaskdatetime_, other->bidaskdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataSnapshot_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataSnapshot_Int_descriptor_;
  metadata.reflection = MarketDataSnapshot_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepthEntry::kPriceFieldNumber;
const int DepthEntry::kQuantityFieldNumber;
#endif  // !_MSC_VER

DepthEntry::DepthEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.DepthEntry)
}

void DepthEntry::InitAsDefaultInstance() {
}

DepthEntry::DepthEntry(const DepthEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.DepthEntry)
}

void DepthEntry::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0;
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepthEntry::~DepthEntry() {
  // @@protoc_insertion_point(destructor:DTC_PB.DepthEntry)
  SharedDtor();
}

void DepthEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DepthEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepthEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepthEntry_descriptor_;
}

const DepthEntry& DepthEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

DepthEntry* DepthEntry::default_instance_ = NULL;

DepthEntry* DepthEntry::New() const {
  return new DepthEntry;
}

void DepthEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DepthEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(price_, quantity_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepthEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.DepthEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Price = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_Quantity;
        break;
      }

      // optional float Quantity = 12;
      case 12: {
        if (tag == 101) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.DepthEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.DepthEntry)
  return false;
#undef DO_
}

void DepthEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.DepthEntry)
  // optional double Price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // optional float Quantity = 12;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.DepthEntry)
}

::google::protobuf::uint8* DepthEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.DepthEntry)
  // optional double Price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // optional float Quantity = 12;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.DepthEntry)
  return target;
}

int DepthEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double Price = 1;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional float Quantity = 12;
    if (has_quantity()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepthEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepthEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepthEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepthEntry::MergeFrom(const DepthEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepthEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthEntry::CopyFrom(const DepthEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthEntry::IsInitialized() const {

  return true;
}

void DepthEntry::Swap(DepthEntry* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepthEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepthEntry_descriptor_;
  metadata.reflection = DepthEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDepthFullUpdate20::kSymbolIDFieldNumber;
const int MarketDepthFullUpdate20::kBidDepthFieldNumber;
const int MarketDepthFullUpdate20::kAskDepthFieldNumber;
#endif  // !_MSC_VER

MarketDepthFullUpdate20::MarketDepthFullUpdate20()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthFullUpdate20)
}

void MarketDepthFullUpdate20::InitAsDefaultInstance() {
}

MarketDepthFullUpdate20::MarketDepthFullUpdate20(const MarketDepthFullUpdate20& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthFullUpdate20)
}

void MarketDepthFullUpdate20::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDepthFullUpdate20::~MarketDepthFullUpdate20() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthFullUpdate20)
  SharedDtor();
}

void MarketDepthFullUpdate20::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDepthFullUpdate20::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDepthFullUpdate20::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthFullUpdate20_descriptor_;
}

const MarketDepthFullUpdate20& MarketDepthFullUpdate20::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDepthFullUpdate20* MarketDepthFullUpdate20::default_instance_ = NULL;

MarketDepthFullUpdate20* MarketDepthFullUpdate20::New() const {
  return new MarketDepthFullUpdate20;
}

void MarketDepthFullUpdate20::Clear() {
  symbolid_ = 0u;
  biddepth_.Clear();
  askdepth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDepthFullUpdate20::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthFullUpdate20)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BidDepth;
        break;
      }

      // repeated .DTC_PB.DepthEntry BidDepth = 2;
      case 2: {
        if (tag == 18) {
         parse_BidDepth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_biddepth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BidDepth;
        if (input->ExpectTag(26)) goto parse_AskDepth;
        break;
      }

      // repeated .DTC_PB.DepthEntry AskDepth = 3;
      case 3: {
        if (tag == 26) {
         parse_AskDepth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_askdepth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AskDepth;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthFullUpdate20)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthFullUpdate20)
  return false;
#undef DO_
}

void MarketDepthFullUpdate20::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthFullUpdate20)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (int i = 0; i < this->biddepth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->biddepth(i), output);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (int i = 0; i < this->askdepth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->askdepth(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthFullUpdate20)
}

::google::protobuf::uint8* MarketDepthFullUpdate20::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthFullUpdate20)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (int i = 0; i < this->biddepth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->biddepth(i), target);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (int i = 0; i < this->askdepth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->askdepth(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthFullUpdate20)
  return target;
}

int MarketDepthFullUpdate20::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

  }
  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  total_size += 1 * this->biddepth_size();
  for (int i = 0; i < this->biddepth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->biddepth(i));
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  total_size += 1 * this->askdepth_size();
  for (int i = 0; i < this->askdepth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->askdepth(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDepthFullUpdate20::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDepthFullUpdate20* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDepthFullUpdate20*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDepthFullUpdate20::MergeFrom(const MarketDepthFullUpdate20& from) {
  GOOGLE_CHECK_NE(&from, this);
  biddepth_.MergeFrom(from.biddepth_);
  askdepth_.MergeFrom(from.askdepth_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDepthFullUpdate20::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthFullUpdate20::CopyFrom(const MarketDepthFullUpdate20& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthFullUpdate20::IsInitialized() const {

  return true;
}

void MarketDepthFullUpdate20::Swap(MarketDepthFullUpdate20* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    biddepth_.Swap(&other->biddepth_);
    askdepth_.Swap(&other->askdepth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDepthFullUpdate20::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDepthFullUpdate20_descriptor_;
  metadata.reflection = MarketDepthFullUpdate20_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDepthFullUpdate10::kSymbolIDFieldNumber;
const int MarketDepthFullUpdate10::kBidDepthFieldNumber;
const int MarketDepthFullUpdate10::kAskDepthFieldNumber;
#endif  // !_MSC_VER

MarketDepthFullUpdate10::MarketDepthFullUpdate10()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthFullUpdate10)
}

void MarketDepthFullUpdate10::InitAsDefaultInstance() {
}

MarketDepthFullUpdate10::MarketDepthFullUpdate10(const MarketDepthFullUpdate10& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthFullUpdate10)
}

void MarketDepthFullUpdate10::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDepthFullUpdate10::~MarketDepthFullUpdate10() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthFullUpdate10)
  SharedDtor();
}

void MarketDepthFullUpdate10::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDepthFullUpdate10::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDepthFullUpdate10::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthFullUpdate10_descriptor_;
}

const MarketDepthFullUpdate10& MarketDepthFullUpdate10::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDepthFullUpdate10* MarketDepthFullUpdate10::default_instance_ = NULL;

MarketDepthFullUpdate10* MarketDepthFullUpdate10::New() const {
  return new MarketDepthFullUpdate10;
}

void MarketDepthFullUpdate10::Clear() {
  symbolid_ = 0u;
  biddepth_.Clear();
  askdepth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDepthFullUpdate10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthFullUpdate10)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BidDepth;
        break;
      }

      // repeated .DTC_PB.DepthEntry BidDepth = 2;
      case 2: {
        if (tag == 18) {
         parse_BidDepth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_biddepth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BidDepth;
        if (input->ExpectTag(26)) goto parse_AskDepth;
        break;
      }

      // repeated .DTC_PB.DepthEntry AskDepth = 3;
      case 3: {
        if (tag == 26) {
         parse_AskDepth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_askdepth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AskDepth;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthFullUpdate10)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthFullUpdate10)
  return false;
#undef DO_
}

void MarketDepthFullUpdate10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthFullUpdate10)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (int i = 0; i < this->biddepth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->biddepth(i), output);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (int i = 0; i < this->askdepth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->askdepth(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthFullUpdate10)
}

::google::protobuf::uint8* MarketDepthFullUpdate10::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthFullUpdate10)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (int i = 0; i < this->biddepth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->biddepth(i), target);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (int i = 0; i < this->askdepth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->askdepth(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthFullUpdate10)
  return target;
}

int MarketDepthFullUpdate10::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

  }
  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  total_size += 1 * this->biddepth_size();
  for (int i = 0; i < this->biddepth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->biddepth(i));
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  total_size += 1 * this->askdepth_size();
  for (int i = 0; i < this->askdepth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->askdepth(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDepthFullUpdate10::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDepthFullUpdate10* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDepthFullUpdate10*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDepthFullUpdate10::MergeFrom(const MarketDepthFullUpdate10& from) {
  GOOGLE_CHECK_NE(&from, this);
  biddepth_.MergeFrom(from.biddepth_);
  askdepth_.MergeFrom(from.askdepth_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDepthFullUpdate10::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthFullUpdate10::CopyFrom(const MarketDepthFullUpdate10& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthFullUpdate10::IsInitialized() const {

  return true;
}

void MarketDepthFullUpdate10::Swap(MarketDepthFullUpdate10* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    biddepth_.Swap(&other->biddepth_);
    askdepth_.Swap(&other->askdepth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDepthFullUpdate10::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDepthFullUpdate10_descriptor_;
  metadata.reflection = MarketDepthFullUpdate10_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDepthSnapshotLevel::kSymbolIDFieldNumber;
const int MarketDepthSnapshotLevel::kSideFieldNumber;
const int MarketDepthSnapshotLevel::kPriceFieldNumber;
const int MarketDepthSnapshotLevel::kQuantityFieldNumber;
const int MarketDepthSnapshotLevel::kLevelFieldNumber;
const int MarketDepthSnapshotLevel::kIsFirstMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel::kIsLastMessageInBatchFieldNumber;
#endif  // !_MSC_VER

MarketDepthSnapshotLevel::MarketDepthSnapshotLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthSnapshotLevel)
}

void MarketDepthSnapshotLevel::InitAsDefaultInstance() {
}

MarketDepthSnapshotLevel::MarketDepthSnapshotLevel(const MarketDepthSnapshotLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthSnapshotLevel)
}

void MarketDepthSnapshotLevel::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  side_ = 0;
  price_ = 0;
  quantity_ = 0;
  level_ = 0u;
  isfirstmessageinbatch_ = 0u;
  islastmessageinbatch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDepthSnapshotLevel::~MarketDepthSnapshotLevel() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthSnapshotLevel)
  SharedDtor();
}

void MarketDepthSnapshotLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDepthSnapshotLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDepthSnapshotLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthSnapshotLevel_descriptor_;
}

const MarketDepthSnapshotLevel& MarketDepthSnapshotLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDepthSnapshotLevel* MarketDepthSnapshotLevel::default_instance_ = NULL;

MarketDepthSnapshotLevel* MarketDepthSnapshotLevel::New() const {
  return new MarketDepthSnapshotLevel;
}

void MarketDepthSnapshotLevel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDepthSnapshotLevel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(symbolid_, islastmessageinbatch_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDepthSnapshotLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthSnapshotLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Side;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (tag == 16) {
         parse_Side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Price;
        break;
      }

      // optional double Price = 3;
      case 3: {
        if (tag == 25) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Quantity;
        break;
      }

      // optional double Quantity = 4;
      case 4: {
        if (tag == 33) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 5;
      case 5: {
        if (tag == 40) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsFirstMessageInBatch;
        break;
      }

      // optional uint32 IsFirstMessageInBatch = 6;
      case 6: {
        if (tag == 48) {
         parse_IsFirstMessageInBatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirstmessageinbatch_)));
          set_has_isfirstmessageinbatch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsLastMessageInBatch;
        break;
      }

      // optional uint32 IsLastMessageInBatch = 7;
      case 7: {
        if (tag == 56) {
         parse_IsLastMessageInBatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islastmessageinbatch_)));
          set_has_islastmessageinbatch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthSnapshotLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthSnapshotLevel)
  return false;
#undef DO_
}

void MarketDepthSnapshotLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthSnapshotLevel)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional double Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional double Quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quantity(), output);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 IsFirstMessageInBatch = 6;
  if (has_isfirstmessageinbatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfirstmessageinbatch(), output);
  }

  // optional uint32 IsLastMessageInBatch = 7;
  if (has_islastmessageinbatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->islastmessageinbatch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthSnapshotLevel)
}

::google::protobuf::uint8* MarketDepthSnapshotLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthSnapshotLevel)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional double Price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional double Quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->quantity(), target);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 IsFirstMessageInBatch = 6;
  if (has_isfirstmessageinbatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfirstmessageinbatch(), target);
  }

  // optional uint32 IsLastMessageInBatch = 7;
  if (has_islastmessageinbatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->islastmessageinbatch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthSnapshotLevel)
  return target;
}

int MarketDepthSnapshotLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional double Price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double Quantity = 4;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 IsFirstMessageInBatch = 6;
    if (has_isfirstmessageinbatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfirstmessageinbatch());
    }

    // optional uint32 IsLastMessageInBatch = 7;
    if (has_islastmessageinbatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->islastmessageinbatch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDepthSnapshotLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDepthSnapshotLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDepthSnapshotLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDepthSnapshotLevel::MergeFrom(const MarketDepthSnapshotLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_isfirstmessageinbatch()) {
      set_isfirstmessageinbatch(from.isfirstmessageinbatch());
    }
    if (from.has_islastmessageinbatch()) {
      set_islastmessageinbatch(from.islastmessageinbatch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDepthSnapshotLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSnapshotLevel::CopyFrom(const MarketDepthSnapshotLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSnapshotLevel::IsInitialized() const {

  return true;
}

void MarketDepthSnapshotLevel::Swap(MarketDepthSnapshotLevel* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(side_, other->side_);
    std::swap(price_, other->price_);
    std::swap(quantity_, other->quantity_);
    std::swap(level_, other->level_);
    std::swap(isfirstmessageinbatch_, other->isfirstmessageinbatch_);
    std::swap(islastmessageinbatch_, other->islastmessageinbatch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDepthSnapshotLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDepthSnapshotLevel_descriptor_;
  metadata.reflection = MarketDepthSnapshotLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDepthSnapshotLevel_Int::kSymbolIDFieldNumber;
const int MarketDepthSnapshotLevel_Int::kSideFieldNumber;
const int MarketDepthSnapshotLevel_Int::kPriceFieldNumber;
const int MarketDepthSnapshotLevel_Int::kQuantityFieldNumber;
const int MarketDepthSnapshotLevel_Int::kLevelFieldNumber;
const int MarketDepthSnapshotLevel_Int::kIsFirstMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel_Int::kIsLastMessageInBatchFieldNumber;
#endif  // !_MSC_VER

MarketDepthSnapshotLevel_Int::MarketDepthSnapshotLevel_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthSnapshotLevel_Int)
}

void MarketDepthSnapshotLevel_Int::InitAsDefaultInstance() {
}

MarketDepthSnapshotLevel_Int::MarketDepthSnapshotLevel_Int(const MarketDepthSnapshotLevel_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthSnapshotLevel_Int)
}

void MarketDepthSnapshotLevel_Int::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  side_ = 0;
  price_ = 0;
  quantity_ = 0;
  level_ = 0u;
  isfirstmessageinbatch_ = 0u;
  islastmessageinbatch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDepthSnapshotLevel_Int::~MarketDepthSnapshotLevel_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthSnapshotLevel_Int)
  SharedDtor();
}

void MarketDepthSnapshotLevel_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDepthSnapshotLevel_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDepthSnapshotLevel_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthSnapshotLevel_Int_descriptor_;
}

const MarketDepthSnapshotLevel_Int& MarketDepthSnapshotLevel_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDepthSnapshotLevel_Int* MarketDepthSnapshotLevel_Int::default_instance_ = NULL;

MarketDepthSnapshotLevel_Int* MarketDepthSnapshotLevel_Int::New() const {
  return new MarketDepthSnapshotLevel_Int;
}

void MarketDepthSnapshotLevel_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDepthSnapshotLevel_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(symbolid_, islastmessageinbatch_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDepthSnapshotLevel_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Side;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (tag == 16) {
         parse_Side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Price;
        break;
      }

      // optional int32 Price = 3;
      case 3: {
        if (tag == 24) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Quantity;
        break;
      }

      // optional int32 Quantity = 4;
      case 4: {
        if (tag == 32) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 5;
      case 5: {
        if (tag == 40) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsFirstMessageInBatch;
        break;
      }

      // optional uint32 IsFirstMessageInBatch = 6;
      case 6: {
        if (tag == 48) {
         parse_IsFirstMessageInBatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirstmessageinbatch_)));
          set_has_isfirstmessageinbatch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsLastMessageInBatch;
        break;
      }

      // optional uint32 IsLastMessageInBatch = 7;
      case 7: {
        if (tag == 56) {
         parse_IsLastMessageInBatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islastmessageinbatch_)));
          set_has_islastmessageinbatch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthSnapshotLevel_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthSnapshotLevel_Int)
  return false;
#undef DO_
}

void MarketDepthSnapshotLevel_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional int32 Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 Quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantity(), output);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 IsFirstMessageInBatch = 6;
  if (has_isfirstmessageinbatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfirstmessageinbatch(), output);
  }

  // optional uint32 IsLastMessageInBatch = 7;
  if (has_islastmessageinbatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->islastmessageinbatch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthSnapshotLevel_Int)
}

::google::protobuf::uint8* MarketDepthSnapshotLevel_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional int32 Price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 Quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantity(), target);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 IsFirstMessageInBatch = 6;
  if (has_isfirstmessageinbatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfirstmessageinbatch(), target);
  }

  // optional uint32 IsLastMessageInBatch = 7;
  if (has_islastmessageinbatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->islastmessageinbatch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthSnapshotLevel_Int)
  return target;
}

int MarketDepthSnapshotLevel_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional int32 Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 IsFirstMessageInBatch = 6;
    if (has_isfirstmessageinbatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfirstmessageinbatch());
    }

    // optional uint32 IsLastMessageInBatch = 7;
    if (has_islastmessageinbatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->islastmessageinbatch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDepthSnapshotLevel_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDepthSnapshotLevel_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDepthSnapshotLevel_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDepthSnapshotLevel_Int::MergeFrom(const MarketDepthSnapshotLevel_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_isfirstmessageinbatch()) {
      set_isfirstmessageinbatch(from.isfirstmessageinbatch());
    }
    if (from.has_islastmessageinbatch()) {
      set_islastmessageinbatch(from.islastmessageinbatch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDepthSnapshotLevel_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSnapshotLevel_Int::CopyFrom(const MarketDepthSnapshotLevel_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSnapshotLevel_Int::IsInitialized() const {

  return true;
}

void MarketDepthSnapshotLevel_Int::Swap(MarketDepthSnapshotLevel_Int* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(side_, other->side_);
    std::swap(price_, other->price_);
    std::swap(quantity_, other->quantity_);
    std::swap(level_, other->level_);
    std::swap(isfirstmessageinbatch_, other->isfirstmessageinbatch_);
    std::swap(islastmessageinbatch_, other->islastmessageinbatch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDepthSnapshotLevel_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDepthSnapshotLevel_Int_descriptor_;
  metadata.reflection = MarketDepthSnapshotLevel_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDepthUpdateLevel::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevel::kSideFieldNumber;
const int MarketDepthUpdateLevel::kPriceFieldNumber;
const int MarketDepthUpdateLevel::kQuantityFieldNumber;
const int MarketDepthUpdateLevel::kUpdateTypeFieldNumber;
#endif  // !_MSC_VER

MarketDepthUpdateLevel::MarketDepthUpdateLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevel)
}

void MarketDepthUpdateLevel::InitAsDefaultInstance() {
}

MarketDepthUpdateLevel::MarketDepthUpdateLevel(const MarketDepthUpdateLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevel)
}

void MarketDepthUpdateLevel::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  side_ = 0;
  price_ = 0;
  quantity_ = 0;
  updatetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDepthUpdateLevel::~MarketDepthUpdateLevel() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevel)
  SharedDtor();
}

void MarketDepthUpdateLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDepthUpdateLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthUpdateLevel_descriptor_;
}

const MarketDepthUpdateLevel& MarketDepthUpdateLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDepthUpdateLevel* MarketDepthUpdateLevel::default_instance_ = NULL;

MarketDepthUpdateLevel* MarketDepthUpdateLevel::New() const {
  return new MarketDepthUpdateLevel;
}

void MarketDepthUpdateLevel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDepthUpdateLevel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(symbolid_, updatetype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDepthUpdateLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Side;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (tag == 16) {
         parse_Side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Price;
        break;
      }

      // optional double Price = 3;
      case 3: {
        if (tag == 25) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Quantity;
        break;
      }

      // optional double Quantity = 4;
      case 4: {
        if (tag == 33) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UpdateType;
        break;
      }

      // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
      case 5: {
        if (tag == 40) {
         parse_UpdateType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDepthUpdateTypeEnum_IsValid(value)) {
            set_updatetype(static_cast< ::DTC_PB::MarketDepthUpdateTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevel)
  return false;
#undef DO_
}

void MarketDepthUpdateLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevel)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional double Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional double Quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quantity(), output);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (has_updatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->updatetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevel)
}

::google::protobuf::uint8* MarketDepthUpdateLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevel)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional double Price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional double Quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->quantity(), target);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (has_updatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->updatetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevel)
  return target;
}

int MarketDepthUpdateLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional double Price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double Quantity = 4;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
    if (has_updatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDepthUpdateLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDepthUpdateLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDepthUpdateLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevel::MergeFrom(const MarketDepthUpdateLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_updatetype()) {
      set_updatetype(from.updatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDepthUpdateLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevel::CopyFrom(const MarketDepthUpdateLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevel::IsInitialized() const {

  return true;
}

void MarketDepthUpdateLevel::Swap(MarketDepthUpdateLevel* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(side_, other->side_);
    std::swap(price_, other->price_);
    std::swap(quantity_, other->quantity_);
    std::swap(updatetype_, other->updatetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDepthUpdateLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDepthUpdateLevel_descriptor_;
  metadata.reflection = MarketDepthUpdateLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDepthUpdateLevel_Int::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevel_Int::kSideFieldNumber;
const int MarketDepthUpdateLevel_Int::kPriceFieldNumber;
const int MarketDepthUpdateLevel_Int::kQuantityFieldNumber;
const int MarketDepthUpdateLevel_Int::kUpdateTypeFieldNumber;
#endif  // !_MSC_VER

MarketDepthUpdateLevel_Int::MarketDepthUpdateLevel_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevel_Int)
}

void MarketDepthUpdateLevel_Int::InitAsDefaultInstance() {
}

MarketDepthUpdateLevel_Int::MarketDepthUpdateLevel_Int(const MarketDepthUpdateLevel_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevel_Int)
}

void MarketDepthUpdateLevel_Int::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  side_ = 0;
  price_ = 0;
  quantity_ = 0;
  updatetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDepthUpdateLevel_Int::~MarketDepthUpdateLevel_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevel_Int)
  SharedDtor();
}

void MarketDepthUpdateLevel_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDepthUpdateLevel_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevel_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthUpdateLevel_Int_descriptor_;
}

const MarketDepthUpdateLevel_Int& MarketDepthUpdateLevel_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDepthUpdateLevel_Int* MarketDepthUpdateLevel_Int::default_instance_ = NULL;

MarketDepthUpdateLevel_Int* MarketDepthUpdateLevel_Int::New() const {
  return new MarketDepthUpdateLevel_Int;
}

void MarketDepthUpdateLevel_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDepthUpdateLevel_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(symbolid_, updatetype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDepthUpdateLevel_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevel_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Side;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (tag == 16) {
         parse_Side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Price;
        break;
      }

      // optional int32 Price = 3;
      case 3: {
        if (tag == 24) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Quantity;
        break;
      }

      // optional int32 Quantity = 4;
      case 4: {
        if (tag == 32) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UpdateType;
        break;
      }

      // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
      case 5: {
        if (tag == 40) {
         parse_UpdateType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDepthUpdateTypeEnum_IsValid(value)) {
            set_updatetype(static_cast< ::DTC_PB::MarketDepthUpdateTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevel_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevel_Int)
  return false;
#undef DO_
}

void MarketDepthUpdateLevel_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevel_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional int32 Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 Quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantity(), output);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (has_updatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->updatetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevel_Int)
}

::google::protobuf::uint8* MarketDepthUpdateLevel_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevel_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional int32 Price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 Quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantity(), target);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (has_updatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->updatetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevel_Int)
  return target;
}

int MarketDepthUpdateLevel_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional int32 Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

    // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
    if (has_updatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDepthUpdateLevel_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDepthUpdateLevel_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDepthUpdateLevel_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevel_Int::MergeFrom(const MarketDepthUpdateLevel_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_updatetype()) {
      set_updatetype(from.updatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDepthUpdateLevel_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevel_Int::CopyFrom(const MarketDepthUpdateLevel_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevel_Int::IsInitialized() const {

  return true;
}

void MarketDepthUpdateLevel_Int::Swap(MarketDepthUpdateLevel_Int* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(side_, other->side_);
    std::swap(price_, other->price_);
    std::swap(quantity_, other->quantity_);
    std::swap(updatetype_, other->updatetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDepthUpdateLevel_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDepthUpdateLevel_Int_descriptor_;
  metadata.reflection = MarketDepthUpdateLevel_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDepthUpdateLevelCompact::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevelCompact::kSideFieldNumber;
const int MarketDepthUpdateLevelCompact::kPriceFieldNumber;
const int MarketDepthUpdateLevelCompact::kQuantityFieldNumber;
const int MarketDepthUpdateLevelCompact::kUpdateTypeFieldNumber;
#endif  // !_MSC_VER

MarketDepthUpdateLevelCompact::MarketDepthUpdateLevelCompact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevelCompact)
}

void MarketDepthUpdateLevelCompact::InitAsDefaultInstance() {
}

MarketDepthUpdateLevelCompact::MarketDepthUpdateLevelCompact(const MarketDepthUpdateLevelCompact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevelCompact)
}

void MarketDepthUpdateLevelCompact::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  side_ = 0;
  price_ = 0;
  quantity_ = 0;
  updatetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDepthUpdateLevelCompact::~MarketDepthUpdateLevelCompact() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevelCompact)
  SharedDtor();
}

void MarketDepthUpdateLevelCompact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDepthUpdateLevelCompact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevelCompact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthUpdateLevelCompact_descriptor_;
}

const MarketDepthUpdateLevelCompact& MarketDepthUpdateLevelCompact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDepthUpdateLevelCompact* MarketDepthUpdateLevelCompact::default_instance_ = NULL;

MarketDepthUpdateLevelCompact* MarketDepthUpdateLevelCompact::New() const {
  return new MarketDepthUpdateLevelCompact;
}

void MarketDepthUpdateLevelCompact::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDepthUpdateLevelCompact*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(symbolid_, updatetype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDepthUpdateLevelCompact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevelCompact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Side;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (tag == 16) {
         parse_Side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Price;
        break;
      }

      // optional float Price = 3;
      case 3: {
        if (tag == 29) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_Quantity;
        break;
      }

      // optional float Quantity = 4;
      case 4: {
        if (tag == 37) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UpdateType;
        break;
      }

      // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
      case 5: {
        if (tag == 40) {
         parse_UpdateType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDepthUpdateTypeEnum_IsValid(value)) {
            set_updatetype(static_cast< ::DTC_PB::MarketDepthUpdateTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevelCompact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevelCompact)
  return false;
#undef DO_
}

void MarketDepthUpdateLevelCompact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevelCompact)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional float Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->price(), output);
  }

  // optional float Quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->quantity(), output);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (has_updatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->updatetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevelCompact)
}

::google::protobuf::uint8* MarketDepthUpdateLevelCompact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevelCompact)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional float Price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->price(), target);
  }

  // optional float Quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->quantity(), target);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (has_updatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->updatetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevelCompact)
  return target;
}

int MarketDepthUpdateLevelCompact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional float Price = 3;
    if (has_price()) {
      total_size += 1 + 4;
    }

    // optional float Quantity = 4;
    if (has_quantity()) {
      total_size += 1 + 4;
    }

    // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
    if (has_updatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDepthUpdateLevelCompact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDepthUpdateLevelCompact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDepthUpdateLevelCompact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevelCompact::MergeFrom(const MarketDepthUpdateLevelCompact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_updatetype()) {
      set_updatetype(from.updatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDepthUpdateLevelCompact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevelCompact::CopyFrom(const MarketDepthUpdateLevelCompact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevelCompact::IsInitialized() const {

  return true;
}

void MarketDepthUpdateLevelCompact::Swap(MarketDepthUpdateLevelCompact* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(side_, other->side_);
    std::swap(price_, other->price_);
    std::swap(quantity_, other->quantity_);
    std::swap(updatetype_, other->updatetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDepthUpdateLevelCompact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDepthUpdateLevelCompact_descriptor_;
  metadata.reflection = MarketDepthUpdateLevelCompact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateSessionSettlement::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionSettlement::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateSessionSettlement::MarketDataUpdateSessionSettlement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionSettlement)
}

void MarketDataUpdateSessionSettlement::InitAsDefaultInstance() {
}

MarketDataUpdateSessionSettlement::MarketDataUpdateSessionSettlement(const MarketDataUpdateSessionSettlement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionSettlement)
}

void MarketDataUpdateSessionSettlement::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateSessionSettlement::~MarketDataUpdateSessionSettlement() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionSettlement)
  SharedDtor();
}

void MarketDataUpdateSessionSettlement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateSessionSettlement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionSettlement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateSessionSettlement_descriptor_;
}

const MarketDataUpdateSessionSettlement& MarketDataUpdateSessionSettlement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateSessionSettlement* MarketDataUpdateSessionSettlement::default_instance_ = NULL;

MarketDataUpdateSessionSettlement* MarketDataUpdateSessionSettlement::New() const {
  return new MarketDataUpdateSessionSettlement;
}

void MarketDataUpdateSessionSettlement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateSessionSettlement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(price_, symbolid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateSessionSettlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionSettlement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Price;
        break;
      }

      // optional double Price = 2;
      case 2: {
        if (tag == 17) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionSettlement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionSettlement)
  return false;
#undef DO_
}

void MarketDataUpdateSessionSettlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionSettlement)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionSettlement)
}

::google::protobuf::uint8* MarketDataUpdateSessionSettlement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionSettlement)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionSettlement)
  return target;
}

int MarketDataUpdateSessionSettlement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional double Price = 2;
    if (has_price()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateSessionSettlement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateSessionSettlement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateSessionSettlement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionSettlement::MergeFrom(const MarketDataUpdateSessionSettlement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateSessionSettlement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionSettlement::CopyFrom(const MarketDataUpdateSessionSettlement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionSettlement::IsInitialized() const {

  return true;
}

void MarketDataUpdateSessionSettlement::Swap(MarketDataUpdateSessionSettlement* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateSessionSettlement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateSessionSettlement_descriptor_;
  metadata.reflection = MarketDataUpdateSessionSettlement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateSessionSettlement_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionSettlement_Int::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateSessionSettlement_Int::MarketDataUpdateSessionSettlement_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionSettlement_Int)
}

void MarketDataUpdateSessionSettlement_Int::InitAsDefaultInstance() {
}

MarketDataUpdateSessionSettlement_Int::MarketDataUpdateSessionSettlement_Int(const MarketDataUpdateSessionSettlement_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionSettlement_Int)
}

void MarketDataUpdateSessionSettlement_Int::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateSessionSettlement_Int::~MarketDataUpdateSessionSettlement_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  SharedDtor();
}

void MarketDataUpdateSessionSettlement_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateSessionSettlement_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionSettlement_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateSessionSettlement_Int_descriptor_;
}

const MarketDataUpdateSessionSettlement_Int& MarketDataUpdateSessionSettlement_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateSessionSettlement_Int* MarketDataUpdateSessionSettlement_Int::default_instance_ = NULL;

MarketDataUpdateSessionSettlement_Int* MarketDataUpdateSessionSettlement_Int::New() const {
  return new MarketDataUpdateSessionSettlement_Int;
}

void MarketDataUpdateSessionSettlement_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateSessionSettlement_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(symbolid_, price_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateSessionSettlement_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Price;
        break;
      }

      // optional int32 Price = 2;
      case 2: {
        if (tag == 16) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionSettlement_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionSettlement_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionSettlement_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  return target;
}

int MarketDataUpdateSessionSettlement_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 Price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateSessionSettlement_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateSessionSettlement_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateSessionSettlement_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionSettlement_Int::MergeFrom(const MarketDataUpdateSessionSettlement_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateSessionSettlement_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionSettlement_Int::CopyFrom(const MarketDataUpdateSessionSettlement_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionSettlement_Int::IsInitialized() const {

  return true;
}

void MarketDataUpdateSessionSettlement_Int::Swap(MarketDataUpdateSessionSettlement_Int* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateSessionSettlement_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateSessionSettlement_Int_descriptor_;
  metadata.reflection = MarketDataUpdateSessionSettlement_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateSessionOpen::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionOpen::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateSessionOpen::MarketDataUpdateSessionOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionOpen)
}

void MarketDataUpdateSessionOpen::InitAsDefaultInstance() {
}

MarketDataUpdateSessionOpen::MarketDataUpdateSessionOpen(const MarketDataUpdateSessionOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionOpen)
}

void MarketDataUpdateSessionOpen::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateSessionOpen::~MarketDataUpdateSessionOpen() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionOpen)
  SharedDtor();
}

void MarketDataUpdateSessionOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateSessionOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateSessionOpen_descriptor_;
}

const MarketDataUpdateSessionOpen& MarketDataUpdateSessionOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateSessionOpen* MarketDataUpdateSessionOpen::default_instance_ = NULL;

MarketDataUpdateSessionOpen* MarketDataUpdateSessionOpen::New() const {
  return new MarketDataUpdateSessionOpen;
}

void MarketDataUpdateSessionOpen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateSessionOpen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(price_, symbolid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateSessionOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Price;
        break;
      }

      // optional double Price = 2;
      case 2: {
        if (tag == 17) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionOpen)
  return false;
#undef DO_
}

void MarketDataUpdateSessionOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionOpen)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionOpen)
}

::google::protobuf::uint8* MarketDataUpdateSessionOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionOpen)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionOpen)
  return target;
}

int MarketDataUpdateSessionOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional double Price = 2;
    if (has_price()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateSessionOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateSessionOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateSessionOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionOpen::MergeFrom(const MarketDataUpdateSessionOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateSessionOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionOpen::CopyFrom(const MarketDataUpdateSessionOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionOpen::IsInitialized() const {

  return true;
}

void MarketDataUpdateSessionOpen::Swap(MarketDataUpdateSessionOpen* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateSessionOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateSessionOpen_descriptor_;
  metadata.reflection = MarketDataUpdateSessionOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateSessionOpen_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionOpen_Int::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateSessionOpen_Int::MarketDataUpdateSessionOpen_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionOpen_Int)
}

void MarketDataUpdateSessionOpen_Int::InitAsDefaultInstance() {
}

MarketDataUpdateSessionOpen_Int::MarketDataUpdateSessionOpen_Int(const MarketDataUpdateSessionOpen_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionOpen_Int)
}

void MarketDataUpdateSessionOpen_Int::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateSessionOpen_Int::~MarketDataUpdateSessionOpen_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionOpen_Int)
  SharedDtor();
}

void MarketDataUpdateSessionOpen_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateSessionOpen_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionOpen_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateSessionOpen_Int_descriptor_;
}

const MarketDataUpdateSessionOpen_Int& MarketDataUpdateSessionOpen_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateSessionOpen_Int* MarketDataUpdateSessionOpen_Int::default_instance_ = NULL;

MarketDataUpdateSessionOpen_Int* MarketDataUpdateSessionOpen_Int::New() const {
  return new MarketDataUpdateSessionOpen_Int;
}

void MarketDataUpdateSessionOpen_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateSessionOpen_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(symbolid_, price_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateSessionOpen_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Price;
        break;
      }

      // optional int32 Price = 2;
      case 2: {
        if (tag == 16) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionOpen_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionOpen_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionOpen_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionOpen_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionOpen_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionOpen_Int)
  return target;
}

int MarketDataUpdateSessionOpen_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 Price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateSessionOpen_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateSessionOpen_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateSessionOpen_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionOpen_Int::MergeFrom(const MarketDataUpdateSessionOpen_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateSessionOpen_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionOpen_Int::CopyFrom(const MarketDataUpdateSessionOpen_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionOpen_Int::IsInitialized() const {

  return true;
}

void MarketDataUpdateSessionOpen_Int::Swap(MarketDataUpdateSessionOpen_Int* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateSessionOpen_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateSessionOpen_Int_descriptor_;
  metadata.reflection = MarketDataUpdateSessionOpen_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDepthReject::kSymbolIDFieldNumber;
const int MarketDepthReject::kRejectTextFieldNumber;
#endif  // !_MSC_VER

MarketDepthReject::MarketDepthReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthReject)
}

void MarketDepthReject::InitAsDefaultInstance() {
}

MarketDepthReject::MarketDepthReject(const MarketDepthReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthReject)
}

void MarketDepthReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbolid_ = 0u;
  rejecttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDepthReject::~MarketDepthReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthReject)
  SharedDtor();
}

void MarketDepthReject::SharedDtor() {
  if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rejecttext_;
  }
  if (this != default_instance_) {
  }
}

void MarketDepthReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDepthReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDepthReject_descriptor_;
}

const MarketDepthReject& MarketDepthReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDepthReject* MarketDepthReject::default_instance_ = NULL;

MarketDepthReject* MarketDepthReject::New() const {
  return new MarketDepthReject;
}

void MarketDepthReject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    symbolid_ = 0u;
    if (has_rejecttext()) {
      if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rejecttext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDepthReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RejectText;
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (tag == 18) {
         parse_RejectText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), this->rejecttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rejecttext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthReject)
  return false;
#undef DO_
}

void MarketDepthReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthReject)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthReject)
}

::google::protobuf::uint8* MarketDepthReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthReject)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthReject)
  return target;
}

int MarketDepthReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDepthReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDepthReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDepthReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDepthReject::MergeFrom(const MarketDepthReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_rejecttext()) {
      set_rejecttext(from.rejecttext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDepthReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthReject::CopyFrom(const MarketDepthReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthReject::IsInitialized() const {

  return true;
}

void MarketDepthReject::Swap(MarketDepthReject* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(rejecttext_, other->rejecttext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDepthReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDepthReject_descriptor_;
  metadata.reflection = MarketDepthReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateTrade::kSymbolIDFieldNumber;
const int MarketDataUpdateTrade::kAtBidOrAskFieldNumber;
const int MarketDataUpdateTrade::kPriceFieldNumber;
const int MarketDataUpdateTrade::kVolumeFieldNumber;
const int MarketDataUpdateTrade::kDateTimeFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateTrade::MarketDataUpdateTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTrade)
}

void MarketDataUpdateTrade::InitAsDefaultInstance() {
}

MarketDataUpdateTrade::MarketDataUpdateTrade(const MarketDataUpdateTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTrade)
}

void MarketDataUpdateTrade::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  atbidorask_ = 0;
  price_ = 0;
  volume_ = 0;
  datetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateTrade::~MarketDataUpdateTrade() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTrade)
  SharedDtor();
}

void MarketDataUpdateTrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateTrade_descriptor_;
}

const MarketDataUpdateTrade& MarketDataUpdateTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateTrade* MarketDataUpdateTrade::default_instance_ = NULL;

MarketDataUpdateTrade* MarketDataUpdateTrade::New() const {
  return new MarketDataUpdateTrade;
}

void MarketDataUpdateTrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateTrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(symbolid_, datetime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AtBidOrAsk;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
      case 2: {
        if (tag == 16) {
         parse_AtBidOrAsk:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Price;
        break;
      }

      // optional double Price = 3;
      case 3: {
        if (tag == 25) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Volume;
        break;
      }

      // optional double Volume = 4;
      case 4: {
        if (tag == 33) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_DateTime;
        break;
      }

      // optional double DateTime = 5;
      case 5: {
        if (tag == 41) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTrade)
  return false;
#undef DO_
}

void MarketDataUpdateTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTrade)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (has_atbidorask()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->atbidorask(), output);
  }

  // optional double Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional double Volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // optional double DateTime = 5;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->datetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTrade)
}

::google::protobuf::uint8* MarketDataUpdateTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTrade)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (has_atbidorask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->atbidorask(), target);
  }

  // optional double Price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional double Volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volume(), target);
  }

  // optional double DateTime = 5;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->datetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTrade)
  return target;
}

int MarketDataUpdateTrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

    // optional double Price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double Volume = 4;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // optional double DateTime = 5;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateTrade::MergeFrom(const MarketDataUpdateTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_atbidorask()) {
      set_atbidorask(from.atbidorask());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTrade::CopyFrom(const MarketDataUpdateTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTrade::IsInitialized() const {

  return true;
}

void MarketDataUpdateTrade::Swap(MarketDataUpdateTrade* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(atbidorask_, other->atbidorask_);
    std::swap(price_, other->price_);
    std::swap(volume_, other->volume_);
    std::swap(datetime_, other->datetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateTrade_descriptor_;
  metadata.reflection = MarketDataUpdateTrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateTrade_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateTrade_Int::kAtBidOrAskFieldNumber;
const int MarketDataUpdateTrade_Int::kPriceFieldNumber;
const int MarketDataUpdateTrade_Int::kVolumeFieldNumber;
const int MarketDataUpdateTrade_Int::kDateTimeFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateTrade_Int::MarketDataUpdateTrade_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTrade_Int)
}

void MarketDataUpdateTrade_Int::InitAsDefaultInstance() {
}

MarketDataUpdateTrade_Int::MarketDataUpdateTrade_Int(const MarketDataUpdateTrade_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTrade_Int)
}

void MarketDataUpdateTrade_Int::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  atbidorask_ = 0;
  price_ = 0;
  volume_ = 0;
  datetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateTrade_Int::~MarketDataUpdateTrade_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTrade_Int)
  SharedDtor();
}

void MarketDataUpdateTrade_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateTrade_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateTrade_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateTrade_Int_descriptor_;
}

const MarketDataUpdateTrade_Int& MarketDataUpdateTrade_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateTrade_Int* MarketDataUpdateTrade_Int::default_instance_ = NULL;

MarketDataUpdateTrade_Int* MarketDataUpdateTrade_Int::New() const {
  return new MarketDataUpdateTrade_Int;
}

void MarketDataUpdateTrade_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateTrade_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(symbolid_, datetime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateTrade_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTrade_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AtBidOrAsk;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
      case 2: {
        if (tag == 16) {
         parse_AtBidOrAsk:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Price;
        break;
      }

      // optional int32 Price = 3;
      case 3: {
        if (tag == 24) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Volume;
        break;
      }

      // optional int32 Volume = 4;
      case 4: {
        if (tag == 32) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_DateTime;
        break;
      }

      // optional double DateTime = 5;
      case 5: {
        if (tag == 41) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTrade_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTrade_Int)
  return false;
#undef DO_
}

void MarketDataUpdateTrade_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTrade_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (has_atbidorask()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->atbidorask(), output);
  }

  // optional int32 Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 Volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional double DateTime = 5;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->datetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTrade_Int)
}

::google::protobuf::uint8* MarketDataUpdateTrade_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTrade_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (has_atbidorask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->atbidorask(), target);
  }

  // optional int32 Price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 Volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // optional double DateTime = 5;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->datetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTrade_Int)
  return target;
}

int MarketDataUpdateTrade_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

    // optional int32 Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional double DateTime = 5;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateTrade_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateTrade_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateTrade_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateTrade_Int::MergeFrom(const MarketDataUpdateTrade_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_atbidorask()) {
      set_atbidorask(from.atbidorask());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateTrade_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTrade_Int::CopyFrom(const MarketDataUpdateTrade_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTrade_Int::IsInitialized() const {

  return true;
}

void MarketDataUpdateTrade_Int::Swap(MarketDataUpdateTrade_Int* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(atbidorask_, other->atbidorask_);
    std::swap(price_, other->price_);
    std::swap(volume_, other->volume_);
    std::swap(datetime_, other->datetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateTrade_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateTrade_Int_descriptor_;
  metadata.reflection = MarketDataUpdateTrade_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateBidAsk::kSymbolIDFieldNumber;
const int MarketDataUpdateBidAsk::kBidPriceFieldNumber;
const int MarketDataUpdateBidAsk::kBidQuantityFieldNumber;
const int MarketDataUpdateBidAsk::kAskPriceFieldNumber;
const int MarketDataUpdateBidAsk::kAskQuantityFieldNumber;
const int MarketDataUpdateBidAsk::kDateTimeFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateBidAsk::MarketDataUpdateBidAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateBidAsk)
}

void MarketDataUpdateBidAsk::InitAsDefaultInstance() {
}

MarketDataUpdateBidAsk::MarketDataUpdateBidAsk(const MarketDataUpdateBidAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateBidAsk)
}

void MarketDataUpdateBidAsk::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  bidprice_ = 0;
  bidquantity_ = 0;
  askprice_ = 0;
  askquantity_ = 0;
  datetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateBidAsk::~MarketDataUpdateBidAsk() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateBidAsk)
  SharedDtor();
}

void MarketDataUpdateBidAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateBidAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateBidAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateBidAsk_descriptor_;
}

const MarketDataUpdateBidAsk& MarketDataUpdateBidAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateBidAsk* MarketDataUpdateBidAsk::default_instance_ = NULL;

MarketDataUpdateBidAsk* MarketDataUpdateBidAsk::New() const {
  return new MarketDataUpdateBidAsk;
}

void MarketDataUpdateBidAsk::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateBidAsk*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(bidprice_, datetime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateBidAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateBidAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_BidPrice;
        break;
      }

      // optional double BidPrice = 2;
      case 2: {
        if (tag == 17) {
         parse_BidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
          set_has_bidprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_BidQuantity;
        break;
      }

      // optional float BidQuantity = 3;
      case 3: {
        if (tag == 29) {
         parse_BidQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidquantity_)));
          set_has_bidquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_AskPrice;
        break;
      }

      // optional double AskPrice = 4;
      case 4: {
        if (tag == 33) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
          set_has_askprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_AskQuantity;
        break;
      }

      // optional float AskQuantity = 5;
      case 5: {
        if (tag == 45) {
         parse_AskQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askquantity_)));
          set_has_askquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_DateTime;
        break;
      }

      // optional sfixed32 DateTime = 6;
      case 6: {
        if (tag == 53) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateBidAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateBidAsk)
  return false;
#undef DO_
}

void MarketDataUpdateBidAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateBidAsk)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double BidPrice = 2;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bidprice(), output);
  }

  // optional float BidQuantity = 3;
  if (has_bidquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bidquantity(), output);
  }

  // optional double AskPrice = 4;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->askprice(), output);
  }

  // optional float AskQuantity = 5;
  if (has_askquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->askquantity(), output);
  }

  // optional sfixed32 DateTime = 6;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->datetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateBidAsk)
}

::google::protobuf::uint8* MarketDataUpdateBidAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateBidAsk)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double BidPrice = 2;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bidprice(), target);
  }

  // optional float BidQuantity = 3;
  if (has_bidquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bidquantity(), target);
  }

  // optional double AskPrice = 4;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->askprice(), target);
  }

  // optional float AskQuantity = 5;
  if (has_askquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->askquantity(), target);
  }

  // optional sfixed32 DateTime = 6;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->datetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateBidAsk)
  return target;
}

int MarketDataUpdateBidAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional double BidPrice = 2;
    if (has_bidprice()) {
      total_size += 1 + 8;
    }

    // optional float BidQuantity = 3;
    if (has_bidquantity()) {
      total_size += 1 + 4;
    }

    // optional double AskPrice = 4;
    if (has_askprice()) {
      total_size += 1 + 8;
    }

    // optional float AskQuantity = 5;
    if (has_askquantity()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 DateTime = 6;
    if (has_datetime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateBidAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateBidAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateBidAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateBidAsk::MergeFrom(const MarketDataUpdateBidAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_bidprice()) {
      set_bidprice(from.bidprice());
    }
    if (from.has_bidquantity()) {
      set_bidquantity(from.bidquantity());
    }
    if (from.has_askprice()) {
      set_askprice(from.askprice());
    }
    if (from.has_askquantity()) {
      set_askquantity(from.askquantity());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateBidAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateBidAsk::CopyFrom(const MarketDataUpdateBidAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateBidAsk::IsInitialized() const {

  return true;
}

void MarketDataUpdateBidAsk::Swap(MarketDataUpdateBidAsk* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(bidquantity_, other->bidquantity_);
    std::swap(askprice_, other->askprice_);
    std::swap(askquantity_, other->askquantity_);
    std::swap(datetime_, other->datetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateBidAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateBidAsk_descriptor_;
  metadata.reflection = MarketDataUpdateBidAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateBidAsk_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateBidAsk_Int::kBidPriceFieldNumber;
const int MarketDataUpdateBidAsk_Int::kBidQuantityFieldNumber;
const int MarketDataUpdateBidAsk_Int::kAskPriceFieldNumber;
const int MarketDataUpdateBidAsk_Int::kAskQuantityFieldNumber;
const int MarketDataUpdateBidAsk_Int::kDateTimeFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateBidAsk_Int::MarketDataUpdateBidAsk_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateBidAsk_Int)
}

void MarketDataUpdateBidAsk_Int::InitAsDefaultInstance() {
}

MarketDataUpdateBidAsk_Int::MarketDataUpdateBidAsk_Int(const MarketDataUpdateBidAsk_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateBidAsk_Int)
}

void MarketDataUpdateBidAsk_Int::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  bidprice_ = 0;
  bidquantity_ = 0;
  askprice_ = 0;
  askquantity_ = 0;
  datetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateBidAsk_Int::~MarketDataUpdateBidAsk_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateBidAsk_Int)
  SharedDtor();
}

void MarketDataUpdateBidAsk_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateBidAsk_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateBidAsk_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateBidAsk_Int_descriptor_;
}

const MarketDataUpdateBidAsk_Int& MarketDataUpdateBidAsk_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateBidAsk_Int* MarketDataUpdateBidAsk_Int::default_instance_ = NULL;

MarketDataUpdateBidAsk_Int* MarketDataUpdateBidAsk_Int::New() const {
  return new MarketDataUpdateBidAsk_Int;
}

void MarketDataUpdateBidAsk_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateBidAsk_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(symbolid_, datetime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateBidAsk_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BidPrice;
        break;
      }

      // optional int32 BidPrice = 2;
      case 2: {
        if (tag == 16) {
         parse_BidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidprice_)));
          set_has_bidprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BidQuantity;
        break;
      }

      // optional int32 BidQuantity = 3;
      case 3: {
        if (tag == 24) {
         parse_BidQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidquantity_)));
          set_has_bidquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AskPrice;
        break;
      }

      // optional int32 AskPrice = 4;
      case 4: {
        if (tag == 32) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askprice_)));
          set_has_askprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AskQuantity;
        break;
      }

      // optional int32 AskQuantity = 5;
      case 5: {
        if (tag == 40) {
         parse_AskQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askquantity_)));
          set_has_askquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_DateTime;
        break;
      }

      // optional sfixed32 DateTime = 6;
      case 6: {
        if (tag == 53) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateBidAsk_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateBidAsk_Int)
  return false;
#undef DO_
}

void MarketDataUpdateBidAsk_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 BidPrice = 2;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bidprice(), output);
  }

  // optional int32 BidQuantity = 3;
  if (has_bidquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bidquantity(), output);
  }

  // optional int32 AskPrice = 4;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->askprice(), output);
  }

  // optional int32 AskQuantity = 5;
  if (has_askquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->askquantity(), output);
  }

  // optional sfixed32 DateTime = 6;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->datetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateBidAsk_Int)
}

::google::protobuf::uint8* MarketDataUpdateBidAsk_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 BidPrice = 2;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bidprice(), target);
  }

  // optional int32 BidQuantity = 3;
  if (has_bidquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bidquantity(), target);
  }

  // optional int32 AskPrice = 4;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->askprice(), target);
  }

  // optional int32 AskQuantity = 5;
  if (has_askquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->askquantity(), target);
  }

  // optional sfixed32 DateTime = 6;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->datetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateBidAsk_Int)
  return target;
}

int MarketDataUpdateBidAsk_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 BidPrice = 2;
    if (has_bidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidprice());
    }

    // optional int32 BidQuantity = 3;
    if (has_bidquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidquantity());
    }

    // optional int32 AskPrice = 4;
    if (has_askprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askprice());
    }

    // optional int32 AskQuantity = 5;
    if (has_askquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askquantity());
    }

    // optional sfixed32 DateTime = 6;
    if (has_datetime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateBidAsk_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateBidAsk_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateBidAsk_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateBidAsk_Int::MergeFrom(const MarketDataUpdateBidAsk_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_bidprice()) {
      set_bidprice(from.bidprice());
    }
    if (from.has_bidquantity()) {
      set_bidquantity(from.bidquantity());
    }
    if (from.has_askprice()) {
      set_askprice(from.askprice());
    }
    if (from.has_askquantity()) {
      set_askquantity(from.askquantity());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateBidAsk_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateBidAsk_Int::CopyFrom(const MarketDataUpdateBidAsk_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateBidAsk_Int::IsInitialized() const {

  return true;
}

void MarketDataUpdateBidAsk_Int::Swap(MarketDataUpdateBidAsk_Int* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(bidquantity_, other->bidquantity_);
    std::swap(askprice_, other->askprice_);
    std::swap(askquantity_, other->askquantity_);
    std::swap(datetime_, other->datetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateBidAsk_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateBidAsk_Int_descriptor_;
  metadata.reflection = MarketDataUpdateBidAsk_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateBidAskCompact::kBidPriceFieldNumber;
const int MarketDataUpdateBidAskCompact::kBidQuantityFieldNumber;
const int MarketDataUpdateBidAskCompact::kAskPriceFieldNumber;
const int MarketDataUpdateBidAskCompact::kAskQuantityFieldNumber;
const int MarketDataUpdateBidAskCompact::kDateTimeFieldNumber;
const int MarketDataUpdateBidAskCompact::kSymbolIDFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateBidAskCompact::MarketDataUpdateBidAskCompact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateBidAskCompact)
}

void MarketDataUpdateBidAskCompact::InitAsDefaultInstance() {
}

MarketDataUpdateBidAskCompact::MarketDataUpdateBidAskCompact(const MarketDataUpdateBidAskCompact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateBidAskCompact)
}

void MarketDataUpdateBidAskCompact::SharedCtor() {
  _cached_size_ = 0;
  bidprice_ = 0;
  bidquantity_ = 0;
  askprice_ = 0;
  askquantity_ = 0;
  datetime_ = 0;
  symbolid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateBidAskCompact::~MarketDataUpdateBidAskCompact() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateBidAskCompact)
  SharedDtor();
}

void MarketDataUpdateBidAskCompact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateBidAskCompact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateBidAskCompact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateBidAskCompact_descriptor_;
}

const MarketDataUpdateBidAskCompact& MarketDataUpdateBidAskCompact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateBidAskCompact* MarketDataUpdateBidAskCompact::default_instance_ = NULL;

MarketDataUpdateBidAskCompact* MarketDataUpdateBidAskCompact::New() const {
  return new MarketDataUpdateBidAskCompact;
}

void MarketDataUpdateBidAskCompact::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateBidAskCompact*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(bidprice_, symbolid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateBidAskCompact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateBidAskCompact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float BidPrice = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidprice_)));
          set_has_bidprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_BidQuantity;
        break;
      }

      // optional float BidQuantity = 2;
      case 2: {
        if (tag == 21) {
         parse_BidQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidquantity_)));
          set_has_bidquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_AskPrice;
        break;
      }

      // optional float AskPrice = 3;
      case 3: {
        if (tag == 29) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askprice_)));
          set_has_askprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_AskQuantity;
        break;
      }

      // optional float AskQuantity = 4;
      case 4: {
        if (tag == 37) {
         parse_AskQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askquantity_)));
          set_has_askquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_DateTime;
        break;
      }

      // optional sfixed32 DateTime = 5;
      case 5: {
        if (tag == 45) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SymbolID;
        break;
      }

      // optional uint32 SymbolID = 6;
      case 6: {
        if (tag == 48) {
         parse_SymbolID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateBidAskCompact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateBidAskCompact)
  return false;
#undef DO_
}

void MarketDataUpdateBidAskCompact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateBidAskCompact)
  // optional float BidPrice = 1;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bidprice(), output);
  }

  // optional float BidQuantity = 2;
  if (has_bidquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bidquantity(), output);
  }

  // optional float AskPrice = 3;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->askprice(), output);
  }

  // optional float AskQuantity = 4;
  if (has_askquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->askquantity(), output);
  }

  // optional sfixed32 DateTime = 5;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->datetime(), output);
  }

  // optional uint32 SymbolID = 6;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->symbolid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateBidAskCompact)
}

::google::protobuf::uint8* MarketDataUpdateBidAskCompact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateBidAskCompact)
  // optional float BidPrice = 1;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bidprice(), target);
  }

  // optional float BidQuantity = 2;
  if (has_bidquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bidquantity(), target);
  }

  // optional float AskPrice = 3;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->askprice(), target);
  }

  // optional float AskQuantity = 4;
  if (has_askquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->askquantity(), target);
  }

  // optional sfixed32 DateTime = 5;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->datetime(), target);
  }

  // optional uint32 SymbolID = 6;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->symbolid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateBidAskCompact)
  return target;
}

int MarketDataUpdateBidAskCompact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float BidPrice = 1;
    if (has_bidprice()) {
      total_size += 1 + 4;
    }

    // optional float BidQuantity = 2;
    if (has_bidquantity()) {
      total_size += 1 + 4;
    }

    // optional float AskPrice = 3;
    if (has_askprice()) {
      total_size += 1 + 4;
    }

    // optional float AskQuantity = 4;
    if (has_askquantity()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 DateTime = 5;
    if (has_datetime()) {
      total_size += 1 + 4;
    }

    // optional uint32 SymbolID = 6;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateBidAskCompact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateBidAskCompact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateBidAskCompact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateBidAskCompact::MergeFrom(const MarketDataUpdateBidAskCompact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bidprice()) {
      set_bidprice(from.bidprice());
    }
    if (from.has_bidquantity()) {
      set_bidquantity(from.bidquantity());
    }
    if (from.has_askprice()) {
      set_askprice(from.askprice());
    }
    if (from.has_askquantity()) {
      set_askquantity(from.askquantity());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateBidAskCompact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateBidAskCompact::CopyFrom(const MarketDataUpdateBidAskCompact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateBidAskCompact::IsInitialized() const {

  return true;
}

void MarketDataUpdateBidAskCompact::Swap(MarketDataUpdateBidAskCompact* other) {
  if (other != this) {
    std::swap(bidprice_, other->bidprice_);
    std::swap(bidquantity_, other->bidquantity_);
    std::swap(askprice_, other->askprice_);
    std::swap(askquantity_, other->askquantity_);
    std::swap(datetime_, other->datetime_);
    std::swap(symbolid_, other->symbolid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateBidAskCompact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateBidAskCompact_descriptor_;
  metadata.reflection = MarketDataUpdateBidAskCompact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateTradeCompact::kPriceFieldNumber;
const int MarketDataUpdateTradeCompact::kVolumeFieldNumber;
const int MarketDataUpdateTradeCompact::kDateTimeFieldNumber;
const int MarketDataUpdateTradeCompact::kSymbolIDFieldNumber;
const int MarketDataUpdateTradeCompact::kAtBidOrAskFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateTradeCompact::MarketDataUpdateTradeCompact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTradeCompact)
}

void MarketDataUpdateTradeCompact::InitAsDefaultInstance() {
}

MarketDataUpdateTradeCompact::MarketDataUpdateTradeCompact(const MarketDataUpdateTradeCompact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTradeCompact)
}

void MarketDataUpdateTradeCompact::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0;
  volume_ = 0;
  datetime_ = 0;
  symbolid_ = 0u;
  atbidorask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateTradeCompact::~MarketDataUpdateTradeCompact() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTradeCompact)
  SharedDtor();
}

void MarketDataUpdateTradeCompact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateTradeCompact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateTradeCompact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateTradeCompact_descriptor_;
}

const MarketDataUpdateTradeCompact& MarketDataUpdateTradeCompact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateTradeCompact* MarketDataUpdateTradeCompact::default_instance_ = NULL;

MarketDataUpdateTradeCompact* MarketDataUpdateTradeCompact::New() const {
  return new MarketDataUpdateTradeCompact;
}

void MarketDataUpdateTradeCompact::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateTradeCompact*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(price_, atbidorask_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateTradeCompact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTradeCompact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Price = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Volume;
        break;
      }

      // optional float Volume = 2;
      case 2: {
        if (tag == 21) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_DateTime;
        break;
      }

      // optional sfixed32 DateTime = 3;
      case 3: {
        if (tag == 29) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SymbolID;
        break;
      }

      // optional uint32 SymbolID = 4;
      case 4: {
        if (tag == 32) {
         parse_SymbolID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AtBidOrAsk;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
      case 5: {
        if (tag == 40) {
         parse_AtBidOrAsk:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTradeCompact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTradeCompact)
  return false;
#undef DO_
}

void MarketDataUpdateTradeCompact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTradeCompact)
  // optional float Price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->price(), output);
  }

  // optional float Volume = 2;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->volume(), output);
  }

  // optional sfixed32 DateTime = 3;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->datetime(), output);
  }

  // optional uint32 SymbolID = 4;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (has_atbidorask()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->atbidorask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTradeCompact)
}

::google::protobuf::uint8* MarketDataUpdateTradeCompact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTradeCompact)
  // optional float Price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->price(), target);
  }

  // optional float Volume = 2;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->volume(), target);
  }

  // optional sfixed32 DateTime = 3;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->datetime(), target);
  }

  // optional uint32 SymbolID = 4;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (has_atbidorask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->atbidorask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTradeCompact)
  return target;
}

int MarketDataUpdateTradeCompact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float Price = 1;
    if (has_price()) {
      total_size += 1 + 4;
    }

    // optional float Volume = 2;
    if (has_volume()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 DateTime = 3;
    if (has_datetime()) {
      total_size += 1 + 4;
    }

    // optional uint32 SymbolID = 4;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateTradeCompact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateTradeCompact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateTradeCompact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateTradeCompact::MergeFrom(const MarketDataUpdateTradeCompact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_atbidorask()) {
      set_atbidorask(from.atbidorask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateTradeCompact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTradeCompact::CopyFrom(const MarketDataUpdateTradeCompact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTradeCompact::IsInitialized() const {

  return true;
}

void MarketDataUpdateTradeCompact::Swap(MarketDataUpdateTradeCompact* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(volume_, other->volume_);
    std::swap(datetime_, other->datetime_);
    std::swap(symbolid_, other->symbolid_);
    std::swap(atbidorask_, other->atbidorask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateTradeCompact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateTradeCompact_descriptor_;
  metadata.reflection = MarketDataUpdateTradeCompact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateSessionVolume::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionVolume::kVolumeFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateSessionVolume::MarketDataUpdateSessionVolume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionVolume)
}

void MarketDataUpdateSessionVolume::InitAsDefaultInstance() {
}

MarketDataUpdateSessionVolume::MarketDataUpdateSessionVolume(const MarketDataUpdateSessionVolume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionVolume)
}

void MarketDataUpdateSessionVolume::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateSessionVolume::~MarketDataUpdateSessionVolume() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionVolume)
  SharedDtor();
}

void MarketDataUpdateSessionVolume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateSessionVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionVolume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateSessionVolume_descriptor_;
}

const MarketDataUpdateSessionVolume& MarketDataUpdateSessionVolume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateSessionVolume* MarketDataUpdateSessionVolume::default_instance_ = NULL;

MarketDataUpdateSessionVolume* MarketDataUpdateSessionVolume::New() const {
  return new MarketDataUpdateSessionVolume;
}

void MarketDataUpdateSessionVolume::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateSessionVolume*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(volume_, symbolid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateSessionVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionVolume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Volume;
        break;
      }

      // optional double Volume = 2;
      case 2: {
        if (tag == 17) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionVolume)
  return false;
#undef DO_
}

void MarketDataUpdateSessionVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionVolume)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Volume = 2;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionVolume)
}

::google::protobuf::uint8* MarketDataUpdateSessionVolume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionVolume)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Volume = 2;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionVolume)
  return target;
}

int MarketDataUpdateSessionVolume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional double Volume = 2;
    if (has_volume()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateSessionVolume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateSessionVolume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateSessionVolume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionVolume::MergeFrom(const MarketDataUpdateSessionVolume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateSessionVolume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionVolume::CopyFrom(const MarketDataUpdateSessionVolume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionVolume::IsInitialized() const {

  return true;
}

void MarketDataUpdateSessionVolume::Swap(MarketDataUpdateSessionVolume* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(volume_, other->volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateSessionVolume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateSessionVolume_descriptor_;
  metadata.reflection = MarketDataUpdateSessionVolume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateOpenInterest::kSymbolIDFieldNumber;
const int MarketDataUpdateOpenInterest::kOpenInterestFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateOpenInterest::MarketDataUpdateOpenInterest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateOpenInterest)
}

void MarketDataUpdateOpenInterest::InitAsDefaultInstance() {
}

MarketDataUpdateOpenInterest::MarketDataUpdateOpenInterest(const MarketDataUpdateOpenInterest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateOpenInterest)
}

void MarketDataUpdateOpenInterest::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  openinterest_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateOpenInterest::~MarketDataUpdateOpenInterest() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateOpenInterest)
  SharedDtor();
}

void MarketDataUpdateOpenInterest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateOpenInterest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateOpenInterest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateOpenInterest_descriptor_;
}

const MarketDataUpdateOpenInterest& MarketDataUpdateOpenInterest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateOpenInterest* MarketDataUpdateOpenInterest::default_instance_ = NULL;

MarketDataUpdateOpenInterest* MarketDataUpdateOpenInterest::New() const {
  return new MarketDataUpdateOpenInterest;
}

void MarketDataUpdateOpenInterest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateOpenInterest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(symbolid_, openinterest_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateOpenInterest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateOpenInterest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OpenInterest;
        break;
      }

      // optional uint32 OpenInterest = 2;
      case 2: {
        if (tag == 16) {
         parse_OpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateOpenInterest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateOpenInterest)
  return false;
#undef DO_
}

void MarketDataUpdateOpenInterest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateOpenInterest)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional uint32 OpenInterest = 2;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->openinterest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateOpenInterest)
}

::google::protobuf::uint8* MarketDataUpdateOpenInterest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateOpenInterest)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional uint32 OpenInterest = 2;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->openinterest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateOpenInterest)
  return target;
}

int MarketDataUpdateOpenInterest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional uint32 OpenInterest = 2;
    if (has_openinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openinterest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateOpenInterest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateOpenInterest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateOpenInterest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateOpenInterest::MergeFrom(const MarketDataUpdateOpenInterest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateOpenInterest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateOpenInterest::CopyFrom(const MarketDataUpdateOpenInterest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateOpenInterest::IsInitialized() const {

  return true;
}

void MarketDataUpdateOpenInterest::Swap(MarketDataUpdateOpenInterest* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateOpenInterest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateOpenInterest_descriptor_;
  metadata.reflection = MarketDataUpdateOpenInterest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateSessionHigh::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionHigh::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateSessionHigh::MarketDataUpdateSessionHigh()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionHigh)
}

void MarketDataUpdateSessionHigh::InitAsDefaultInstance() {
}

MarketDataUpdateSessionHigh::MarketDataUpdateSessionHigh(const MarketDataUpdateSessionHigh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionHigh)
}

void MarketDataUpdateSessionHigh::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateSessionHigh::~MarketDataUpdateSessionHigh() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionHigh)
  SharedDtor();
}

void MarketDataUpdateSessionHigh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateSessionHigh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionHigh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateSessionHigh_descriptor_;
}

const MarketDataUpdateSessionHigh& MarketDataUpdateSessionHigh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateSessionHigh* MarketDataUpdateSessionHigh::default_instance_ = NULL;

MarketDataUpdateSessionHigh* MarketDataUpdateSessionHigh::New() const {
  return new MarketDataUpdateSessionHigh;
}

void MarketDataUpdateSessionHigh::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateSessionHigh*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(price_, symbolid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateSessionHigh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionHigh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Price;
        break;
      }

      // optional double Price = 2;
      case 2: {
        if (tag == 17) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionHigh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionHigh)
  return false;
#undef DO_
}

void MarketDataUpdateSessionHigh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionHigh)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionHigh)
}

::google::protobuf::uint8* MarketDataUpdateSessionHigh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionHigh)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionHigh)
  return target;
}

int MarketDataUpdateSessionHigh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional double Price = 2;
    if (has_price()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateSessionHigh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateSessionHigh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateSessionHigh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionHigh::MergeFrom(const MarketDataUpdateSessionHigh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateSessionHigh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionHigh::CopyFrom(const MarketDataUpdateSessionHigh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionHigh::IsInitialized() const {

  return true;
}

void MarketDataUpdateSessionHigh::Swap(MarketDataUpdateSessionHigh* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateSessionHigh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateSessionHigh_descriptor_;
  metadata.reflection = MarketDataUpdateSessionHigh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateSessionHigh_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionHigh_Int::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateSessionHigh_Int::MarketDataUpdateSessionHigh_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionHigh_Int)
}

void MarketDataUpdateSessionHigh_Int::InitAsDefaultInstance() {
}

MarketDataUpdateSessionHigh_Int::MarketDataUpdateSessionHigh_Int(const MarketDataUpdateSessionHigh_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionHigh_Int)
}

void MarketDataUpdateSessionHigh_Int::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateSessionHigh_Int::~MarketDataUpdateSessionHigh_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionHigh_Int)
  SharedDtor();
}

void MarketDataUpdateSessionHigh_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateSessionHigh_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionHigh_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateSessionHigh_Int_descriptor_;
}

const MarketDataUpdateSessionHigh_Int& MarketDataUpdateSessionHigh_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateSessionHigh_Int* MarketDataUpdateSessionHigh_Int::default_instance_ = NULL;

MarketDataUpdateSessionHigh_Int* MarketDataUpdateSessionHigh_Int::New() const {
  return new MarketDataUpdateSessionHigh_Int;
}

void MarketDataUpdateSessionHigh_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateSessionHigh_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(symbolid_, price_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateSessionHigh_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Price;
        break;
      }

      // optional int32 Price = 2;
      case 2: {
        if (tag == 16) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionHigh_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionHigh_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionHigh_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionHigh_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionHigh_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionHigh_Int)
  return target;
}

int MarketDataUpdateSessionHigh_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 Price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateSessionHigh_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateSessionHigh_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateSessionHigh_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionHigh_Int::MergeFrom(const MarketDataUpdateSessionHigh_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateSessionHigh_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionHigh_Int::CopyFrom(const MarketDataUpdateSessionHigh_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionHigh_Int::IsInitialized() const {

  return true;
}

void MarketDataUpdateSessionHigh_Int::Swap(MarketDataUpdateSessionHigh_Int* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateSessionHigh_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateSessionHigh_Int_descriptor_;
  metadata.reflection = MarketDataUpdateSessionHigh_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateSessionLow::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionLow::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateSessionLow::MarketDataUpdateSessionLow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionLow)
}

void MarketDataUpdateSessionLow::InitAsDefaultInstance() {
}

MarketDataUpdateSessionLow::MarketDataUpdateSessionLow(const MarketDataUpdateSessionLow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionLow)
}

void MarketDataUpdateSessionLow::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateSessionLow::~MarketDataUpdateSessionLow() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionLow)
  SharedDtor();
}

void MarketDataUpdateSessionLow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateSessionLow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionLow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateSessionLow_descriptor_;
}

const MarketDataUpdateSessionLow& MarketDataUpdateSessionLow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateSessionLow* MarketDataUpdateSessionLow::default_instance_ = NULL;

MarketDataUpdateSessionLow* MarketDataUpdateSessionLow::New() const {
  return new MarketDataUpdateSessionLow;
}

void MarketDataUpdateSessionLow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateSessionLow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(price_, symbolid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateSessionLow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionLow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Price;
        break;
      }

      // optional double Price = 2;
      case 2: {
        if (tag == 17) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionLow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionLow)
  return false;
#undef DO_
}

void MarketDataUpdateSessionLow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionLow)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionLow)
}

::google::protobuf::uint8* MarketDataUpdateSessionLow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionLow)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionLow)
  return target;
}

int MarketDataUpdateSessionLow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional double Price = 2;
    if (has_price()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateSessionLow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateSessionLow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateSessionLow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionLow::MergeFrom(const MarketDataUpdateSessionLow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateSessionLow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionLow::CopyFrom(const MarketDataUpdateSessionLow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionLow::IsInitialized() const {

  return true;
}

void MarketDataUpdateSessionLow::Swap(MarketDataUpdateSessionLow* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateSessionLow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateSessionLow_descriptor_;
  metadata.reflection = MarketDataUpdateSessionLow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateSessionLow_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionLow_Int::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateSessionLow_Int::MarketDataUpdateSessionLow_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionLow_Int)
}

void MarketDataUpdateSessionLow_Int::InitAsDefaultInstance() {
}

MarketDataUpdateSessionLow_Int::MarketDataUpdateSessionLow_Int(const MarketDataUpdateSessionLow_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionLow_Int)
}

void MarketDataUpdateSessionLow_Int::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateSessionLow_Int::~MarketDataUpdateSessionLow_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionLow_Int)
  SharedDtor();
}

void MarketDataUpdateSessionLow_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateSessionLow_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionLow_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateSessionLow_Int_descriptor_;
}

const MarketDataUpdateSessionLow_Int& MarketDataUpdateSessionLow_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateSessionLow_Int* MarketDataUpdateSessionLow_Int::default_instance_ = NULL;

MarketDataUpdateSessionLow_Int* MarketDataUpdateSessionLow_Int::New() const {
  return new MarketDataUpdateSessionLow_Int;
}

void MarketDataUpdateSessionLow_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateSessionLow_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(symbolid_, price_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateSessionLow_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Price;
        break;
      }

      // optional int32 Price = 2;
      case 2: {
        if (tag == 16) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionLow_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionLow_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionLow_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionLow_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionLow_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionLow_Int)
  return target;
}

int MarketDataUpdateSessionLow_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 Price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateSessionLow_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateSessionLow_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateSessionLow_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionLow_Int::MergeFrom(const MarketDataUpdateSessionLow_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateSessionLow_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionLow_Int::CopyFrom(const MarketDataUpdateSessionLow_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionLow_Int::IsInitialized() const {

  return true;
}

void MarketDataUpdateSessionLow_Int::Swap(MarketDataUpdateSessionLow_Int* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateSessionLow_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateSessionLow_Int_descriptor_;
  metadata.reflection = MarketDataUpdateSessionLow_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataUpdateLastTradeSnapshot::kSymbolIDFieldNumber;
const int MarketDataUpdateLastTradeSnapshot::kLastTradePriceFieldNumber;
const int MarketDataUpdateLastTradeSnapshot::kLastTradeVolumeFieldNumber;
const int MarketDataUpdateLastTradeSnapshot::kLastTradeDateTimeFieldNumber;
#endif  // !_MSC_VER

MarketDataUpdateLastTradeSnapshot::MarketDataUpdateLastTradeSnapshot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateLastTradeSnapshot)
}

void MarketDataUpdateLastTradeSnapshot::InitAsDefaultInstance() {
}

MarketDataUpdateLastTradeSnapshot::MarketDataUpdateLastTradeSnapshot(const MarketDataUpdateLastTradeSnapshot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateLastTradeSnapshot)
}

void MarketDataUpdateLastTradeSnapshot::SharedCtor() {
  _cached_size_ = 0;
  symbolid_ = 0u;
  lasttradeprice_ = 0;
  lasttradevolume_ = 0;
  lasttradedatetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataUpdateLastTradeSnapshot::~MarketDataUpdateLastTradeSnapshot() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  SharedDtor();
}

void MarketDataUpdateLastTradeSnapshot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDataUpdateLastTradeSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataUpdateLastTradeSnapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataUpdateLastTradeSnapshot_descriptor_;
}

const MarketDataUpdateLastTradeSnapshot& MarketDataUpdateLastTradeSnapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

MarketDataUpdateLastTradeSnapshot* MarketDataUpdateLastTradeSnapshot::default_instance_ = NULL;

MarketDataUpdateLastTradeSnapshot* MarketDataUpdateLastTradeSnapshot::New() const {
  return new MarketDataUpdateLastTradeSnapshot;
}

void MarketDataUpdateLastTradeSnapshot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketDataUpdateLastTradeSnapshot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lasttradeprice_, symbolid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataUpdateLastTradeSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_LastTradePrice;
        break;
      }

      // optional double LastTradePrice = 2;
      case 2: {
        if (tag == 17) {
         parse_LastTradePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradeprice_)));
          set_has_lasttradeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_LastTradeVolume;
        break;
      }

      // optional double LastTradeVolume = 3;
      case 3: {
        if (tag == 25) {
         parse_LastTradeVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradevolume_)));
          set_has_lasttradevolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_LastTradeDateTime;
        break;
      }

      // optional double LastTradeDateTime = 4;
      case 4: {
        if (tag == 33) {
         parse_LastTradeDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradedatetime_)));
          set_has_lasttradedatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  return false;
#undef DO_
}

void MarketDataUpdateLastTradeSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double LastTradePrice = 2;
  if (has_lasttradeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lasttradeprice(), output);
  }

  // optional double LastTradeVolume = 3;
  if (has_lasttradevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lasttradevolume(), output);
  }

  // optional double LastTradeDateTime = 4;
  if (has_lasttradedatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lasttradedatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateLastTradeSnapshot)
}

::google::protobuf::uint8* MarketDataUpdateLastTradeSnapshot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double LastTradePrice = 2;
  if (has_lasttradeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lasttradeprice(), target);
  }

  // optional double LastTradeVolume = 3;
  if (has_lasttradevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lasttradevolume(), target);
  }

  // optional double LastTradeDateTime = 4;
  if (has_lasttradedatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lasttradedatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  return target;
}

int MarketDataUpdateLastTradeSnapshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional double LastTradePrice = 2;
    if (has_lasttradeprice()) {
      total_size += 1 + 8;
    }

    // optional double LastTradeVolume = 3;
    if (has_lasttradevolume()) {
      total_size += 1 + 8;
    }

    // optional double LastTradeDateTime = 4;
    if (has_lasttradedatetime()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataUpdateLastTradeSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataUpdateLastTradeSnapshot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataUpdateLastTradeSnapshot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataUpdateLastTradeSnapshot::MergeFrom(const MarketDataUpdateLastTradeSnapshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_lasttradeprice()) {
      set_lasttradeprice(from.lasttradeprice());
    }
    if (from.has_lasttradevolume()) {
      set_lasttradevolume(from.lasttradevolume());
    }
    if (from.has_lasttradedatetime()) {
      set_lasttradedatetime(from.lasttradedatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataUpdateLastTradeSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateLastTradeSnapshot::CopyFrom(const MarketDataUpdateLastTradeSnapshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateLastTradeSnapshot::IsInitialized() const {

  return true;
}

void MarketDataUpdateLastTradeSnapshot::Swap(MarketDataUpdateLastTradeSnapshot* other) {
  if (other != this) {
    std::swap(symbolid_, other->symbolid_);
    std::swap(lasttradeprice_, other->lasttradeprice_);
    std::swap(lasttradevolume_, other->lasttradevolume_);
    std::swap(lasttradedatetime_, other->lasttradedatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataUpdateLastTradeSnapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataUpdateLastTradeSnapshot_descriptor_;
  metadata.reflection = MarketDataUpdateLastTradeSnapshot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitNewSingleOrder::kSymbolFieldNumber;
const int SubmitNewSingleOrder::kExchangeFieldNumber;
const int SubmitNewSingleOrder::kTradeAccountFieldNumber;
const int SubmitNewSingleOrder::kClientOrderIDFieldNumber;
const int SubmitNewSingleOrder::kOrderTypeFieldNumber;
const int SubmitNewSingleOrder::kBuySellFieldNumber;
const int SubmitNewSingleOrder::kPrice1FieldNumber;
const int SubmitNewSingleOrder::kPrice2FieldNumber;
const int SubmitNewSingleOrder::kQuantityFieldNumber;
const int SubmitNewSingleOrder::kTimeInForceFieldNumber;
const int SubmitNewSingleOrder::kGoodTillDateTimeFieldNumber;
const int SubmitNewSingleOrder::kIsAutomatedOrderFieldNumber;
const int SubmitNewSingleOrder::kIsParentOrderFieldNumber;
const int SubmitNewSingleOrder::kFreeFormTextFieldNumber;
const int SubmitNewSingleOrder::kOpenOrCloseFieldNumber;
#endif  // !_MSC_VER

SubmitNewSingleOrder::SubmitNewSingleOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewSingleOrder)
}

void SubmitNewSingleOrder::InitAsDefaultInstance() {
}

SubmitNewSingleOrder::SubmitNewSingleOrder(const SubmitNewSingleOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewSingleOrder)
}

void SubmitNewSingleOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_ = 0;
  buysell_ = 0;
  price1_ = 0;
  price2_ = 0;
  quantity_ = 0;
  timeinforce_ = 0;
  goodtilldatetime_ = GOOGLE_LONGLONG(0);
  isautomatedorder_ = 0u;
  isparentorder_ = 0u;
  freeformtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openorclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitNewSingleOrder::~SubmitNewSingleOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewSingleOrder)
  SharedDtor();
}

void SubmitNewSingleOrder::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_;
  }
  if (freeformtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete freeformtext_;
  }
  if (this != default_instance_) {
  }
}

void SubmitNewSingleOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitNewSingleOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitNewSingleOrder_descriptor_;
}

const SubmitNewSingleOrder& SubmitNewSingleOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SubmitNewSingleOrder* SubmitNewSingleOrder::default_instance_ = NULL;

SubmitNewSingleOrder* SubmitNewSingleOrder::New() const {
  return new SubmitNewSingleOrder;
}

void SubmitNewSingleOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubmitNewSingleOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ordertype_, price2_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
    if (has_clientorderid()) {
      if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(quantity_, isautomatedorder_);
    ZR_(isparentorder_, openorclose_);
    if (has_freeformtext()) {
      if (freeformtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        freeformtext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitNewSingleOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewSingleOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 3;
      case 3: {
        if (tag == 26) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ClientOrderID;
        break;
      }

      // optional string ClientOrderID = 4;
      case 4: {
        if (tag == 34) {
         parse_ClientOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), this->clientorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_OrderType;
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType = 5;
      case 5: {
        if (tag == 40) {
         parse_OrderType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BuySell;
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell = 6;
      case 6: {
        if (tag == 48) {
         parse_BuySell:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_Price1;
        break;
      }

      // optional double Price1 = 7;
      case 7: {
        if (tag == 57) {
         parse_Price1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_)));
          set_has_price1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_Price2;
        break;
      }

      // optional double Price2 = 8;
      case 8: {
        if (tag == 65) {
         parse_Price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_)));
          set_has_price2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_Quantity;
        break;
      }

      // optional double Quantity = 9;
      case 9: {
        if (tag == 73) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TimeInForce;
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
      case 10: {
        if (tag == 80) {
         parse_TimeInForce:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_GoodTillDateTime;
        break;
      }

      // optional sfixed64 GoodTillDateTime = 11;
      case 11: {
        if (tag == 89) {
         parse_GoodTillDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
          set_has_goodtilldatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_IsAutomatedOrder;
        break;
      }

      // optional uint32 IsAutomatedOrder = 12;
      case 12: {
        if (tag == 96) {
         parse_IsAutomatedOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
          set_has_isautomatedorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_IsParentOrder;
        break;
      }

      // optional uint32 IsParentOrder = 13;
      case 13: {
        if (tag == 104) {
         parse_IsParentOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isparentorder_)));
          set_has_isparentorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_FreeFormText;
        break;
      }

      // optional string FreeFormText = 14;
      case 14: {
        if (tag == 114) {
         parse_FreeFormText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeformtext().data(), this->freeformtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "freeformtext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_OpenOrClose;
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
      case 15: {
        if (tag == 120) {
         parse_OpenOrClose:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewSingleOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewSingleOrder)
  return false;
#undef DO_
}

void SubmitNewSingleOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewSingleOrder)
  // optional string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string TradeAccount = 3;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeaccount(), output);
  }

  // optional string ClientOrderID = 4;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientorderid(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 5;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ordertype(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 6;
  if (has_buysell()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->buysell(), output);
  }

  // optional double Price1 = 7;
  if (has_price1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price1(), output);
  }

  // optional double Price2 = 8;
  if (has_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price2(), output);
  }

  // optional double Quantity = 9;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->quantity(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (has_timeinforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 11;
  if (has_goodtilldatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->goodtilldatetime(), output);
  }

  // optional uint32 IsAutomatedOrder = 12;
  if (has_isautomatedorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->isautomatedorder(), output);
  }

  // optional uint32 IsParentOrder = 13;
  if (has_isparentorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->isparentorder(), output);
  }

  // optional string FreeFormText = 14;
  if (has_freeformtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), this->freeformtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "freeformtext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->freeformtext(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
  if (has_openorclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->openorclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewSingleOrder)
}

::google::protobuf::uint8* SubmitNewSingleOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewSingleOrder)
  // optional string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string TradeAccount = 3;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeaccount(), target);
  }

  // optional string ClientOrderID = 4;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientorderid(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 5;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ordertype(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 6;
  if (has_buysell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->buysell(), target);
  }

  // optional double Price1 = 7;
  if (has_price1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price1(), target);
  }

  // optional double Price2 = 8;
  if (has_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->price2(), target);
  }

  // optional double Quantity = 9;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->quantity(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (has_timeinforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 11;
  if (has_goodtilldatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->goodtilldatetime(), target);
  }

  // optional uint32 IsAutomatedOrder = 12;
  if (has_isautomatedorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->isautomatedorder(), target);
  }

  // optional uint32 IsParentOrder = 13;
  if (has_isparentorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->isparentorder(), target);
  }

  // optional string FreeFormText = 14;
  if (has_freeformtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), this->freeformtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "freeformtext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->freeformtext(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
  if (has_openorclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->openorclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewSingleOrder)
  return target;
}

int SubmitNewSingleOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string TradeAccount = 3;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string ClientOrderID = 4;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType = 5;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }

    // optional .DTC_PB.BuySellEnum BuySell = 6;
    if (has_buysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
    }

    // optional double Price1 = 7;
    if (has_price1()) {
      total_size += 1 + 8;
    }

    // optional double Price2 = 8;
    if (has_price2()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double Quantity = 9;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional sfixed64 GoodTillDateTime = 11;
    if (has_goodtilldatetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsAutomatedOrder = 12;
    if (has_isautomatedorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isautomatedorder());
    }

    // optional uint32 IsParentOrder = 13;
    if (has_isparentorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isparentorder());
    }

    // optional string FreeFormText = 14;
    if (has_freeformtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freeformtext());
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
    if (has_openorclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitNewSingleOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitNewSingleOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitNewSingleOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitNewSingleOrder::MergeFrom(const SubmitNewSingleOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_clientorderid()) {
      set_clientorderid(from.clientorderid());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_buysell()) {
      set_buysell(from.buysell());
    }
    if (from.has_price1()) {
      set_price1(from.price1());
    }
    if (from.has_price2()) {
      set_price2(from.price2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_timeinforce()) {
      set_timeinforce(from.timeinforce());
    }
    if (from.has_goodtilldatetime()) {
      set_goodtilldatetime(from.goodtilldatetime());
    }
    if (from.has_isautomatedorder()) {
      set_isautomatedorder(from.isautomatedorder());
    }
    if (from.has_isparentorder()) {
      set_isparentorder(from.isparentorder());
    }
    if (from.has_freeformtext()) {
      set_freeformtext(from.freeformtext());
    }
    if (from.has_openorclose()) {
      set_openorclose(from.openorclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitNewSingleOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewSingleOrder::CopyFrom(const SubmitNewSingleOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewSingleOrder::IsInitialized() const {

  return true;
}

void SubmitNewSingleOrder::Swap(SubmitNewSingleOrder* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(clientorderid_, other->clientorderid_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(buysell_, other->buysell_);
    std::swap(price1_, other->price1_);
    std::swap(price2_, other->price2_);
    std::swap(quantity_, other->quantity_);
    std::swap(timeinforce_, other->timeinforce_);
    std::swap(goodtilldatetime_, other->goodtilldatetime_);
    std::swap(isautomatedorder_, other->isautomatedorder_);
    std::swap(isparentorder_, other->isparentorder_);
    std::swap(freeformtext_, other->freeformtext_);
    std::swap(openorclose_, other->openorclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitNewSingleOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitNewSingleOrder_descriptor_;
  metadata.reflection = SubmitNewSingleOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitNewSingleOrderInt::kSymbolFieldNumber;
const int SubmitNewSingleOrderInt::kExchangeFieldNumber;
const int SubmitNewSingleOrderInt::kTradeAccountFieldNumber;
const int SubmitNewSingleOrderInt::kClientOrderIDFieldNumber;
const int SubmitNewSingleOrderInt::kOrderTypeFieldNumber;
const int SubmitNewSingleOrderInt::kBuySellFieldNumber;
const int SubmitNewSingleOrderInt::kPrice1FieldNumber;
const int SubmitNewSingleOrderInt::kPrice2FieldNumber;
const int SubmitNewSingleOrderInt::kDivisorFieldNumber;
const int SubmitNewSingleOrderInt::kQuantityFieldNumber;
const int SubmitNewSingleOrderInt::kTimeInForceFieldNumber;
const int SubmitNewSingleOrderInt::kGoodTillDateTimeFieldNumber;
const int SubmitNewSingleOrderInt::kIsAutomatedOrderFieldNumber;
const int SubmitNewSingleOrderInt::kIsParentOrderFieldNumber;
const int SubmitNewSingleOrderInt::kFreeFormTextFieldNumber;
const int SubmitNewSingleOrderInt::kOpenOrCloseFieldNumber;
#endif  // !_MSC_VER

SubmitNewSingleOrderInt::SubmitNewSingleOrderInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewSingleOrderInt)
}

void SubmitNewSingleOrderInt::InitAsDefaultInstance() {
}

SubmitNewSingleOrderInt::SubmitNewSingleOrderInt(const SubmitNewSingleOrderInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewSingleOrderInt)
}

void SubmitNewSingleOrderInt::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_ = 0;
  buysell_ = 0;
  price1_ = GOOGLE_LONGLONG(0);
  price2_ = GOOGLE_LONGLONG(0);
  divisor_ = 0;
  quantity_ = GOOGLE_LONGLONG(0);
  timeinforce_ = 0;
  goodtilldatetime_ = GOOGLE_LONGLONG(0);
  isautomatedorder_ = 0u;
  isparentorder_ = 0u;
  freeformtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openorclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitNewSingleOrderInt::~SubmitNewSingleOrderInt() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewSingleOrderInt)
  SharedDtor();
}

void SubmitNewSingleOrderInt::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_;
  }
  if (freeformtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete freeformtext_;
  }
  if (this != default_instance_) {
  }
}

void SubmitNewSingleOrderInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitNewSingleOrderInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitNewSingleOrderInt_descriptor_;
}

const SubmitNewSingleOrderInt& SubmitNewSingleOrderInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SubmitNewSingleOrderInt* SubmitNewSingleOrderInt::default_instance_ = NULL;

SubmitNewSingleOrderInt* SubmitNewSingleOrderInt::New() const {
  return new SubmitNewSingleOrderInt;
}

void SubmitNewSingleOrderInt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubmitNewSingleOrderInt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ordertype_, price2_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
    if (has_clientorderid()) {
      if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(quantity_, isparentorder_);
    if (has_freeformtext()) {
      if (freeformtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        freeformtext_->clear();
      }
    }
    openorclose_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitNewSingleOrderInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewSingleOrderInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 3;
      case 3: {
        if (tag == 26) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ClientOrderID;
        break;
      }

      // optional string ClientOrderID = 4;
      case 4: {
        if (tag == 34) {
         parse_ClientOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), this->clientorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_OrderType;
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType = 5;
      case 5: {
        if (tag == 40) {
         parse_OrderType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BuySell;
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell = 6;
      case 6: {
        if (tag == 48) {
         parse_BuySell:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Price1;
        break;
      }

      // optional int64 Price1 = 7;
      case 7: {
        if (tag == 56) {
         parse_Price1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_)));
          set_has_price1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Price2;
        break;
      }

      // optional int64 Price2 = 8;
      case 8: {
        if (tag == 64) {
         parse_Price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_)));
          set_has_price2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_Divisor;
        break;
      }

      // optional float Divisor = 9;
      case 9: {
        if (tag == 77) {
         parse_Divisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &divisor_)));
          set_has_divisor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Quantity;
        break;
      }

      // optional int64 Quantity = 10;
      case 10: {
        if (tag == 80) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_TimeInForce;
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 11;
      case 11: {
        if (tag == 88) {
         parse_TimeInForce:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_GoodTillDateTime;
        break;
      }

      // optional sfixed64 GoodTillDateTime = 12;
      case 12: {
        if (tag == 97) {
         parse_GoodTillDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
          set_has_goodtilldatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_IsAutomatedOrder;
        break;
      }

      // optional uint32 IsAutomatedOrder = 13;
      case 13: {
        if (tag == 104) {
         parse_IsAutomatedOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
          set_has_isautomatedorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_IsParentOrder;
        break;
      }

      // optional uint32 IsParentOrder = 14;
      case 14: {
        if (tag == 112) {
         parse_IsParentOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isparentorder_)));
          set_has_isparentorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_FreeFormText;
        break;
      }

      // optional string FreeFormText = 15;
      case 15: {
        if (tag == 122) {
         parse_FreeFormText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeformtext().data(), this->freeformtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "freeformtext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_OpenOrClose;
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
      case 16: {
        if (tag == 128) {
         parse_OpenOrClose:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewSingleOrderInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewSingleOrderInt)
  return false;
#undef DO_
}

void SubmitNewSingleOrderInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewSingleOrderInt)
  // optional string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string TradeAccount = 3;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeaccount(), output);
  }

  // optional string ClientOrderID = 4;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientorderid(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 5;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ordertype(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 6;
  if (has_buysell()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->buysell(), output);
  }

  // optional int64 Price1 = 7;
  if (has_price1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->price1(), output);
  }

  // optional int64 Price2 = 8;
  if (has_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->price2(), output);
  }

  // optional float Divisor = 9;
  if (has_divisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->divisor(), output);
  }

  // optional int64 Quantity = 10;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->quantity(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 11;
  if (has_timeinforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 12;
  if (has_goodtilldatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->goodtilldatetime(), output);
  }

  // optional uint32 IsAutomatedOrder = 13;
  if (has_isautomatedorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->isautomatedorder(), output);
  }

  // optional uint32 IsParentOrder = 14;
  if (has_isparentorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->isparentorder(), output);
  }

  // optional string FreeFormText = 15;
  if (has_freeformtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), this->freeformtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "freeformtext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->freeformtext(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
  if (has_openorclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->openorclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewSingleOrderInt)
}

::google::protobuf::uint8* SubmitNewSingleOrderInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewSingleOrderInt)
  // optional string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string TradeAccount = 3;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeaccount(), target);
  }

  // optional string ClientOrderID = 4;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientorderid(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 5;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ordertype(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 6;
  if (has_buysell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->buysell(), target);
  }

  // optional int64 Price1 = 7;
  if (has_price1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->price1(), target);
  }

  // optional int64 Price2 = 8;
  if (has_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->price2(), target);
  }

  // optional float Divisor = 9;
  if (has_divisor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->divisor(), target);
  }

  // optional int64 Quantity = 10;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->quantity(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 11;
  if (has_timeinforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 12;
  if (has_goodtilldatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->goodtilldatetime(), target);
  }

  // optional uint32 IsAutomatedOrder = 13;
  if (has_isautomatedorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->isautomatedorder(), target);
  }

  // optional uint32 IsParentOrder = 14;
  if (has_isparentorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->isparentorder(), target);
  }

  // optional string FreeFormText = 15;
  if (has_freeformtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), this->freeformtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "freeformtext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->freeformtext(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
  if (has_openorclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->openorclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewSingleOrderInt)
  return target;
}

int SubmitNewSingleOrderInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string TradeAccount = 3;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string ClientOrderID = 4;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType = 5;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }

    // optional .DTC_PB.BuySellEnum BuySell = 6;
    if (has_buysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
    }

    // optional int64 Price1 = 7;
    if (has_price1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price1());
    }

    // optional int64 Price2 = 8;
    if (has_price2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float Divisor = 9;
    if (has_divisor()) {
      total_size += 1 + 4;
    }

    // optional int64 Quantity = 10;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity());
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 11;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional sfixed64 GoodTillDateTime = 12;
    if (has_goodtilldatetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsAutomatedOrder = 13;
    if (has_isautomatedorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isautomatedorder());
    }

    // optional uint32 IsParentOrder = 14;
    if (has_isparentorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isparentorder());
    }

    // optional string FreeFormText = 15;
    if (has_freeformtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freeformtext());
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
    if (has_openorclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitNewSingleOrderInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitNewSingleOrderInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitNewSingleOrderInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitNewSingleOrderInt::MergeFrom(const SubmitNewSingleOrderInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_clientorderid()) {
      set_clientorderid(from.clientorderid());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_buysell()) {
      set_buysell(from.buysell());
    }
    if (from.has_price1()) {
      set_price1(from.price1());
    }
    if (from.has_price2()) {
      set_price2(from.price2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_divisor()) {
      set_divisor(from.divisor());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_timeinforce()) {
      set_timeinforce(from.timeinforce());
    }
    if (from.has_goodtilldatetime()) {
      set_goodtilldatetime(from.goodtilldatetime());
    }
    if (from.has_isautomatedorder()) {
      set_isautomatedorder(from.isautomatedorder());
    }
    if (from.has_isparentorder()) {
      set_isparentorder(from.isparentorder());
    }
    if (from.has_freeformtext()) {
      set_freeformtext(from.freeformtext());
    }
    if (from.has_openorclose()) {
      set_openorclose(from.openorclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitNewSingleOrderInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewSingleOrderInt::CopyFrom(const SubmitNewSingleOrderInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewSingleOrderInt::IsInitialized() const {

  return true;
}

void SubmitNewSingleOrderInt::Swap(SubmitNewSingleOrderInt* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(clientorderid_, other->clientorderid_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(buysell_, other->buysell_);
    std::swap(price1_, other->price1_);
    std::swap(price2_, other->price2_);
    std::swap(divisor_, other->divisor_);
    std::swap(quantity_, other->quantity_);
    std::swap(timeinforce_, other->timeinforce_);
    std::swap(goodtilldatetime_, other->goodtilldatetime_);
    std::swap(isautomatedorder_, other->isautomatedorder_);
    std::swap(isparentorder_, other->isparentorder_);
    std::swap(freeformtext_, other->freeformtext_);
    std::swap(openorclose_, other->openorclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitNewSingleOrderInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitNewSingleOrderInt_descriptor_;
  metadata.reflection = SubmitNewSingleOrderInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelReplaceOrder::kServerOrderIDFieldNumber;
const int CancelReplaceOrder::kClientOrderIDFieldNumber;
const int CancelReplaceOrder::kPrice1FieldNumber;
const int CancelReplaceOrder::kPrice2FieldNumber;
const int CancelReplaceOrder::kQuantityFieldNumber;
const int CancelReplaceOrder::kPrice1IsSetFieldNumber;
const int CancelReplaceOrder::kPrice2IsSetFieldNumber;
#endif  // !_MSC_VER

CancelReplaceOrder::CancelReplaceOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CancelReplaceOrder)
}

void CancelReplaceOrder::InitAsDefaultInstance() {
}

CancelReplaceOrder::CancelReplaceOrder(const CancelReplaceOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CancelReplaceOrder)
}

void CancelReplaceOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price1_ = 0;
  price2_ = 0;
  quantity_ = 0;
  price1isset_ = 0u;
  price2isset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelReplaceOrder::~CancelReplaceOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.CancelReplaceOrder)
  SharedDtor();
}

void CancelReplaceOrder::SharedDtor() {
  if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverorderid_;
  }
  if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_;
  }
  if (this != default_instance_) {
  }
}

void CancelReplaceOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelReplaceOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelReplaceOrder_descriptor_;
}

const CancelReplaceOrder& CancelReplaceOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

CancelReplaceOrder* CancelReplaceOrder::default_instance_ = NULL;

CancelReplaceOrder* CancelReplaceOrder::New() const {
  return new CancelReplaceOrder;
}

void CancelReplaceOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CancelReplaceOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(price1_, price2isset_);
    if (has_serverorderid()) {
      if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverorderid_->clear();
      }
    }
    if (has_clientorderid()) {
      if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelReplaceOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CancelReplaceOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerOrderID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), this->serverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ClientOrderID;
        break;
      }

      // optional string ClientOrderID = 2;
      case 2: {
        if (tag == 18) {
         parse_ClientOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), this->clientorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Price1;
        break;
      }

      // optional double Price1 = 3;
      case 3: {
        if (tag == 25) {
         parse_Price1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_)));
          set_has_price1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Price2;
        break;
      }

      // optional double Price2 = 4;
      case 4: {
        if (tag == 33) {
         parse_Price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_)));
          set_has_price2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Quantity;
        break;
      }

      // optional double Quantity = 5;
      case 5: {
        if (tag == 41) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Price1IsSet;
        break;
      }

      // optional uint32 Price1IsSet = 6;
      case 6: {
        if (tag == 48) {
         parse_Price1IsSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price1isset_)));
          set_has_price1isset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Price2IsSet;
        break;
      }

      // optional uint32 Price2IsSet = 7;
      case 7: {
        if (tag == 56) {
         parse_Price2IsSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price2isset_)));
          set_has_price2isset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CancelReplaceOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CancelReplaceOrder)
  return false;
#undef DO_
}

void CancelReplaceOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CancelReplaceOrder)
  // optional string ServerOrderID = 1;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverorderid(), output);
  }

  // optional string ClientOrderID = 2;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientorderid(), output);
  }

  // optional double Price1 = 3;
  if (has_price1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price1(), output);
  }

  // optional double Price2 = 4;
  if (has_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price2(), output);
  }

  // optional double Quantity = 5;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->quantity(), output);
  }

  // optional uint32 Price1IsSet = 6;
  if (has_price1isset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->price1isset(), output);
  }

  // optional uint32 Price2IsSet = 7;
  if (has_price2isset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price2isset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CancelReplaceOrder)
}

::google::protobuf::uint8* CancelReplaceOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CancelReplaceOrder)
  // optional string ServerOrderID = 1;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverorderid(), target);
  }

  // optional string ClientOrderID = 2;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientorderid(), target);
  }

  // optional double Price1 = 3;
  if (has_price1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price1(), target);
  }

  // optional double Price2 = 4;
  if (has_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price2(), target);
  }

  // optional double Quantity = 5;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->quantity(), target);
  }

  // optional uint32 Price1IsSet = 6;
  if (has_price1isset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->price1isset(), target);
  }

  // optional uint32 Price2IsSet = 7;
  if (has_price2isset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->price2isset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CancelReplaceOrder)
  return target;
}

int CancelReplaceOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerOrderID = 1;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string ClientOrderID = 2;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

    // optional double Price1 = 3;
    if (has_price1()) {
      total_size += 1 + 8;
    }

    // optional double Price2 = 4;
    if (has_price2()) {
      total_size += 1 + 8;
    }

    // optional double Quantity = 5;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional uint32 Price1IsSet = 6;
    if (has_price1isset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price1isset());
    }

    // optional uint32 Price2IsSet = 7;
    if (has_price2isset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price2isset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelReplaceOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelReplaceOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelReplaceOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelReplaceOrder::MergeFrom(const CancelReplaceOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverorderid()) {
      set_serverorderid(from.serverorderid());
    }
    if (from.has_clientorderid()) {
      set_clientorderid(from.clientorderid());
    }
    if (from.has_price1()) {
      set_price1(from.price1());
    }
    if (from.has_price2()) {
      set_price2(from.price2());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_price1isset()) {
      set_price1isset(from.price1isset());
    }
    if (from.has_price2isset()) {
      set_price2isset(from.price2isset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelReplaceOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelReplaceOrder::CopyFrom(const CancelReplaceOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelReplaceOrder::IsInitialized() const {

  return true;
}

void CancelReplaceOrder::Swap(CancelReplaceOrder* other) {
  if (other != this) {
    std::swap(serverorderid_, other->serverorderid_);
    std::swap(clientorderid_, other->clientorderid_);
    std::swap(price1_, other->price1_);
    std::swap(price2_, other->price2_);
    std::swap(quantity_, other->quantity_);
    std::swap(price1isset_, other->price1isset_);
    std::swap(price2isset_, other->price2isset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelReplaceOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelReplaceOrder_descriptor_;
  metadata.reflection = CancelReplaceOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelReplaceOrderInt::kServerOrderIDFieldNumber;
const int CancelReplaceOrderInt::kClientOrderIDFieldNumber;
const int CancelReplaceOrderInt::kPrice1FieldNumber;
const int CancelReplaceOrderInt::kPrice2FieldNumber;
const int CancelReplaceOrderInt::kDivisorFieldNumber;
const int CancelReplaceOrderInt::kQuantityFieldNumber;
const int CancelReplaceOrderInt::kPrice1IsSetFieldNumber;
const int CancelReplaceOrderInt::kPrice2IsSetFieldNumber;
#endif  // !_MSC_VER

CancelReplaceOrderInt::CancelReplaceOrderInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CancelReplaceOrderInt)
}

void CancelReplaceOrderInt::InitAsDefaultInstance() {
}

CancelReplaceOrderInt::CancelReplaceOrderInt(const CancelReplaceOrderInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CancelReplaceOrderInt)
}

void CancelReplaceOrderInt::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price1_ = GOOGLE_LONGLONG(0);
  price2_ = GOOGLE_LONGLONG(0);
  divisor_ = 0;
  quantity_ = GOOGLE_LONGLONG(0);
  price1isset_ = 0u;
  price2isset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelReplaceOrderInt::~CancelReplaceOrderInt() {
  // @@protoc_insertion_point(destructor:DTC_PB.CancelReplaceOrderInt)
  SharedDtor();
}

void CancelReplaceOrderInt::SharedDtor() {
  if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverorderid_;
  }
  if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_;
  }
  if (this != default_instance_) {
  }
}

void CancelReplaceOrderInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelReplaceOrderInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelReplaceOrderInt_descriptor_;
}

const CancelReplaceOrderInt& CancelReplaceOrderInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

CancelReplaceOrderInt* CancelReplaceOrderInt::default_instance_ = NULL;

CancelReplaceOrderInt* CancelReplaceOrderInt::New() const {
  return new CancelReplaceOrderInt;
}

void CancelReplaceOrderInt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CancelReplaceOrderInt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(price1_, price2isset_);
    if (has_serverorderid()) {
      if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverorderid_->clear();
      }
    }
    if (has_clientorderid()) {
      if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelReplaceOrderInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CancelReplaceOrderInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerOrderID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), this->serverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ClientOrderID;
        break;
      }

      // optional string ClientOrderID = 2;
      case 2: {
        if (tag == 18) {
         parse_ClientOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), this->clientorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Price1;
        break;
      }

      // optional int64 Price1 = 3;
      case 3: {
        if (tag == 24) {
         parse_Price1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_)));
          set_has_price1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Price2;
        break;
      }

      // optional int64 Price2 = 4;
      case 4: {
        if (tag == 32) {
         parse_Price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_)));
          set_has_price2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Divisor;
        break;
      }

      // optional float Divisor = 5;
      case 5: {
        if (tag == 45) {
         parse_Divisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &divisor_)));
          set_has_divisor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Quantity;
        break;
      }

      // optional int64 Quantity = 6;
      case 6: {
        if (tag == 48) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Price1IsSet;
        break;
      }

      // optional uint32 Price1IsSet = 7;
      case 7: {
        if (tag == 56) {
         parse_Price1IsSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price1isset_)));
          set_has_price1isset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Price2IsSet;
        break;
      }

      // optional uint32 Price2IsSet = 8;
      case 8: {
        if (tag == 64) {
         parse_Price2IsSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price2isset_)));
          set_has_price2isset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CancelReplaceOrderInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CancelReplaceOrderInt)
  return false;
#undef DO_
}

void CancelReplaceOrderInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CancelReplaceOrderInt)
  // optional string ServerOrderID = 1;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverorderid(), output);
  }

  // optional string ClientOrderID = 2;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientorderid(), output);
  }

  // optional int64 Price1 = 3;
  if (has_price1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->price1(), output);
  }

  // optional int64 Price2 = 4;
  if (has_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->price2(), output);
  }

  // optional float Divisor = 5;
  if (has_divisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->divisor(), output);
  }

  // optional int64 Quantity = 6;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->quantity(), output);
  }

  // optional uint32 Price1IsSet = 7;
  if (has_price1isset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price1isset(), output);
  }

  // optional uint32 Price2IsSet = 8;
  if (has_price2isset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->price2isset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CancelReplaceOrderInt)
}

::google::protobuf::uint8* CancelReplaceOrderInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CancelReplaceOrderInt)
  // optional string ServerOrderID = 1;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverorderid(), target);
  }

  // optional string ClientOrderID = 2;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientorderid(), target);
  }

  // optional int64 Price1 = 3;
  if (has_price1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->price1(), target);
  }

  // optional int64 Price2 = 4;
  if (has_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->price2(), target);
  }

  // optional float Divisor = 5;
  if (has_divisor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->divisor(), target);
  }

  // optional int64 Quantity = 6;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->quantity(), target);
  }

  // optional uint32 Price1IsSet = 7;
  if (has_price1isset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->price1isset(), target);
  }

  // optional uint32 Price2IsSet = 8;
  if (has_price2isset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->price2isset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CancelReplaceOrderInt)
  return target;
}

int CancelReplaceOrderInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerOrderID = 1;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string ClientOrderID = 2;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

    // optional int64 Price1 = 3;
    if (has_price1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price1());
    }

    // optional int64 Price2 = 4;
    if (has_price2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price2());
    }

    // optional float Divisor = 5;
    if (has_divisor()) {
      total_size += 1 + 4;
    }

    // optional int64 Quantity = 6;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity());
    }

    // optional uint32 Price1IsSet = 7;
    if (has_price1isset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price1isset());
    }

    // optional uint32 Price2IsSet = 8;
    if (has_price2isset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price2isset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelReplaceOrderInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelReplaceOrderInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelReplaceOrderInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelReplaceOrderInt::MergeFrom(const CancelReplaceOrderInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverorderid()) {
      set_serverorderid(from.serverorderid());
    }
    if (from.has_clientorderid()) {
      set_clientorderid(from.clientorderid());
    }
    if (from.has_price1()) {
      set_price1(from.price1());
    }
    if (from.has_price2()) {
      set_price2(from.price2());
    }
    if (from.has_divisor()) {
      set_divisor(from.divisor());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_price1isset()) {
      set_price1isset(from.price1isset());
    }
    if (from.has_price2isset()) {
      set_price2isset(from.price2isset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelReplaceOrderInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelReplaceOrderInt::CopyFrom(const CancelReplaceOrderInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelReplaceOrderInt::IsInitialized() const {

  return true;
}

void CancelReplaceOrderInt::Swap(CancelReplaceOrderInt* other) {
  if (other != this) {
    std::swap(serverorderid_, other->serverorderid_);
    std::swap(clientorderid_, other->clientorderid_);
    std::swap(price1_, other->price1_);
    std::swap(price2_, other->price2_);
    std::swap(divisor_, other->divisor_);
    std::swap(quantity_, other->quantity_);
    std::swap(price1isset_, other->price1isset_);
    std::swap(price2isset_, other->price2isset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelReplaceOrderInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelReplaceOrderInt_descriptor_;
  metadata.reflection = CancelReplaceOrderInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelOrder::kServerOrderIDFieldNumber;
const int CancelOrder::kClientOrderIDFieldNumber;
#endif  // !_MSC_VER

CancelOrder::CancelOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CancelOrder)
}

void CancelOrder::InitAsDefaultInstance() {
}

CancelOrder::CancelOrder(const CancelOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CancelOrder)
}

void CancelOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelOrder::~CancelOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.CancelOrder)
  SharedDtor();
}

void CancelOrder::SharedDtor() {
  if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverorderid_;
  }
  if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_;
  }
  if (this != default_instance_) {
  }
}

void CancelOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelOrder_descriptor_;
}

const CancelOrder& CancelOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

CancelOrder* CancelOrder::default_instance_ = NULL;

CancelOrder* CancelOrder::New() const {
  return new CancelOrder;
}

void CancelOrder::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_serverorderid()) {
      if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverorderid_->clear();
      }
    }
    if (has_clientorderid()) {
      if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CancelOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerOrderID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), this->serverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ClientOrderID;
        break;
      }

      // optional string ClientOrderID = 2;
      case 2: {
        if (tag == 18) {
         parse_ClientOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), this->clientorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CancelOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CancelOrder)
  return false;
#undef DO_
}

void CancelOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CancelOrder)
  // optional string ServerOrderID = 1;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverorderid(), output);
  }

  // optional string ClientOrderID = 2;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientorderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CancelOrder)
}

::google::protobuf::uint8* CancelOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CancelOrder)
  // optional string ServerOrderID = 1;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverorderid(), target);
  }

  // optional string ClientOrderID = 2;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientorderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CancelOrder)
  return target;
}

int CancelOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerOrderID = 1;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string ClientOrderID = 2;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelOrder::MergeFrom(const CancelOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverorderid()) {
      set_serverorderid(from.serverorderid());
    }
    if (from.has_clientorderid()) {
      set_clientorderid(from.clientorderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrder::CopyFrom(const CancelOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrder::IsInitialized() const {

  return true;
}

void CancelOrder::Swap(CancelOrder* other) {
  if (other != this) {
    std::swap(serverorderid_, other->serverorderid_);
    std::swap(clientorderid_, other->clientorderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelOrder_descriptor_;
  metadata.reflection = CancelOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitNewOCOOrder::kSymbolFieldNumber;
const int SubmitNewOCOOrder::kExchangeFieldNumber;
const int SubmitNewOCOOrder::kClientOrderID1FieldNumber;
const int SubmitNewOCOOrder::kOrderType1FieldNumber;
const int SubmitNewOCOOrder::kBuySell1FieldNumber;
const int SubmitNewOCOOrder::kPrice11FieldNumber;
const int SubmitNewOCOOrder::kPrice21FieldNumber;
const int SubmitNewOCOOrder::kQuantity1FieldNumber;
const int SubmitNewOCOOrder::kClientOrderID2FieldNumber;
const int SubmitNewOCOOrder::kOrderType2FieldNumber;
const int SubmitNewOCOOrder::kBuySell2FieldNumber;
const int SubmitNewOCOOrder::kPrice12FieldNumber;
const int SubmitNewOCOOrder::kPrice22FieldNumber;
const int SubmitNewOCOOrder::kQuantity2FieldNumber;
const int SubmitNewOCOOrder::kTimeInForceFieldNumber;
const int SubmitNewOCOOrder::kGoodTillDateTimeFieldNumber;
const int SubmitNewOCOOrder::kTradeAccountFieldNumber;
const int SubmitNewOCOOrder::kIsAutomatedOrderFieldNumber;
const int SubmitNewOCOOrder::kParentTriggerClientOrderIDFieldNumber;
const int SubmitNewOCOOrder::kFreeFormTextFieldNumber;
const int SubmitNewOCOOrder::kOpenOrCloseFieldNumber;
#endif  // !_MSC_VER

SubmitNewOCOOrder::SubmitNewOCOOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewOCOOrder)
}

void SubmitNewOCOOrder::InitAsDefaultInstance() {
}

SubmitNewOCOOrder::SubmitNewOCOOrder(const SubmitNewOCOOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewOCOOrder)
}

void SubmitNewOCOOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_1_ = 0;
  buysell_1_ = 0;
  price1_1_ = 0;
  price2_1_ = 0;
  quantity_1_ = 0;
  clientorderid_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_2_ = 0;
  buysell_2_ = 0;
  price1_2_ = 0;
  price2_2_ = 0;
  quantity_2_ = 0;
  timeinforce_ = 0;
  goodtilldatetime_ = GOOGLE_LONGLONG(0);
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isautomatedorder_ = 0u;
  parenttriggerclientorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openorclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitNewOCOOrder::~SubmitNewOCOOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewOCOOrder)
  SharedDtor();
}

void SubmitNewOCOOrder::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (clientorderid_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_1_;
  }
  if (clientorderid_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_2_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (parenttriggerclientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parenttriggerclientorderid_;
  }
  if (freeformtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete freeformtext_;
  }
  if (this != default_instance_) {
  }
}

void SubmitNewOCOOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitNewOCOOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitNewOCOOrder_descriptor_;
}

const SubmitNewOCOOrder& SubmitNewOCOOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SubmitNewOCOOrder* SubmitNewOCOOrder::default_instance_ = NULL;

SubmitNewOCOOrder* SubmitNewOCOOrder::New() const {
  return new SubmitNewOCOOrder;
}

void SubmitNewOCOOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubmitNewOCOOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ordertype_1_, quantity_1_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    if (has_clientorderid_1()) {
      if (clientorderid_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_1_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ordertype_2_, timeinforce_);
    if (has_clientorderid_2()) {
      if (clientorderid_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_2_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 2031616) {
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
    isautomatedorder_ = 0u;
    if (has_parenttriggerclientorderid()) {
      if (parenttriggerclientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parenttriggerclientorderid_->clear();
      }
    }
    if (has_freeformtext()) {
      if (freeformtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        freeformtext_->clear();
      }
    }
    openorclose_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitNewOCOOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewOCOOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ClientOrderID_1;
        break;
      }

      // optional string ClientOrderID_1 = 3;
      case 3: {
        if (tag == 26) {
         parse_ClientOrderID_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid_1().data(), this->clientorderid_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid_1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OrderType_1;
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_OrderType_1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype_1(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BuySell_1;
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
      case 5: {
        if (tag == 40) {
         parse_BuySell_1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell_1(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_Price1_1;
        break;
      }

      // optional double Price1_1 = 6;
      case 6: {
        if (tag == 49) {
         parse_Price1_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_1_)));
          set_has_price1_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_Price2_1;
        break;
      }

      // optional double Price2_1 = 7;
      case 7: {
        if (tag == 57) {
         parse_Price2_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_1_)));
          set_has_price2_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_Quantity_1;
        break;
      }

      // optional double Quantity_1 = 8;
      case 8: {
        if (tag == 65) {
         parse_Quantity_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_1_)));
          set_has_quantity_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ClientOrderID_2;
        break;
      }

      // optional string ClientOrderID_2 = 9;
      case 9: {
        if (tag == 74) {
         parse_ClientOrderID_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid_2().data(), this->clientorderid_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid_2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_OrderType_2;
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
      case 10: {
        if (tag == 80) {
         parse_OrderType_2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype_2(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_BuySell_2;
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
      case 11: {
        if (tag == 88) {
         parse_BuySell_2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell_2(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_Price1_2;
        break;
      }

      // optional double Price1_2 = 12;
      case 12: {
        if (tag == 97) {
         parse_Price1_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_2_)));
          set_has_price1_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_Price2_2;
        break;
      }

      // optional double Price2_2 = 13;
      case 13: {
        if (tag == 105) {
         parse_Price2_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_2_)));
          set_has_price2_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_Quantity_2;
        break;
      }

      // optional double Quantity_2 = 14;
      case 14: {
        if (tag == 113) {
         parse_Quantity_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_2_)));
          set_has_quantity_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_TimeInForce;
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
      case 15: {
        if (tag == 120) {
         parse_TimeInForce:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_GoodTillDateTime;
        break;
      }

      // optional sfixed64 GoodTillDateTime = 16;
      case 16: {
        if (tag == 129) {
         parse_GoodTillDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
          set_has_goodtilldatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 17;
      case 17: {
        if (tag == 138) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_IsAutomatedOrder;
        break;
      }

      // optional uint32 IsAutomatedOrder = 18;
      case 18: {
        if (tag == 144) {
         parse_IsAutomatedOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
          set_has_isautomatedorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_ParentTriggerClientOrderID;
        break;
      }

      // optional string ParentTriggerClientOrderID = 19;
      case 19: {
        if (tag == 154) {
         parse_ParentTriggerClientOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parenttriggerclientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parenttriggerclientorderid().data(), this->parenttriggerclientorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parenttriggerclientorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_FreeFormText;
        break;
      }

      // optional string FreeFormText = 20;
      case 20: {
        if (tag == 162) {
         parse_FreeFormText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeformtext().data(), this->freeformtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "freeformtext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_OpenOrClose;
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
      case 21: {
        if (tag == 168) {
         parse_OpenOrClose:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewOCOOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewOCOOrder)
  return false;
#undef DO_
}

void SubmitNewOCOOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewOCOOrder)
  // optional string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string ClientOrderID_1 = 3;
  if (has_clientorderid_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_1().data(), this->clientorderid_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientorderid_1(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (has_ordertype_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ordertype_1(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (has_buysell_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->buysell_1(), output);
  }

  // optional double Price1_1 = 6;
  if (has_price1_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->price1_1(), output);
  }

  // optional double Price2_1 = 7;
  if (has_price2_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price2_1(), output);
  }

  // optional double Quantity_1 = 8;
  if (has_quantity_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->quantity_1(), output);
  }

  // optional string ClientOrderID_2 = 9;
  if (has_clientorderid_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_2().data(), this->clientorderid_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->clientorderid_2(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (has_ordertype_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ordertype_2(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (has_buysell_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->buysell_2(), output);
  }

  // optional double Price1_2 = 12;
  if (has_price1_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->price1_2(), output);
  }

  // optional double Price2_2 = 13;
  if (has_price2_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->price2_2(), output);
  }

  // optional double Quantity_2 = 14;
  if (has_quantity_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->quantity_2(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (has_timeinforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 16;
  if (has_goodtilldatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(16, this->goodtilldatetime(), output);
  }

  // optional string TradeAccount = 17;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->tradeaccount(), output);
  }

  // optional uint32 IsAutomatedOrder = 18;
  if (has_isautomatedorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->isautomatedorder(), output);
  }

  // optional string ParentTriggerClientOrderID = 19;
  if (has_parenttriggerclientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parenttriggerclientorderid().data(), this->parenttriggerclientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parenttriggerclientorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->parenttriggerclientorderid(), output);
  }

  // optional string FreeFormText = 20;
  if (has_freeformtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), this->freeformtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "freeformtext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->freeformtext(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
  if (has_openorclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->openorclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewOCOOrder)
}

::google::protobuf::uint8* SubmitNewOCOOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewOCOOrder)
  // optional string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string ClientOrderID_1 = 3;
  if (has_clientorderid_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_1().data(), this->clientorderid_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientorderid_1(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (has_ordertype_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ordertype_1(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (has_buysell_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->buysell_1(), target);
  }

  // optional double Price1_1 = 6;
  if (has_price1_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->price1_1(), target);
  }

  // optional double Price2_1 = 7;
  if (has_price2_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price2_1(), target);
  }

  // optional double Quantity_1 = 8;
  if (has_quantity_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->quantity_1(), target);
  }

  // optional string ClientOrderID_2 = 9;
  if (has_clientorderid_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_2().data(), this->clientorderid_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientorderid_2(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (has_ordertype_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ordertype_2(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (has_buysell_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->buysell_2(), target);
  }

  // optional double Price1_2 = 12;
  if (has_price1_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->price1_2(), target);
  }

  // optional double Price2_2 = 13;
  if (has_price2_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->price2_2(), target);
  }

  // optional double Quantity_2 = 14;
  if (has_quantity_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->quantity_2(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (has_timeinforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 16;
  if (has_goodtilldatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(16, this->goodtilldatetime(), target);
  }

  // optional string TradeAccount = 17;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tradeaccount(), target);
  }

  // optional uint32 IsAutomatedOrder = 18;
  if (has_isautomatedorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->isautomatedorder(), target);
  }

  // optional string ParentTriggerClientOrderID = 19;
  if (has_parenttriggerclientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parenttriggerclientorderid().data(), this->parenttriggerclientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parenttriggerclientorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->parenttriggerclientorderid(), target);
  }

  // optional string FreeFormText = 20;
  if (has_freeformtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), this->freeformtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "freeformtext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->freeformtext(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
  if (has_openorclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->openorclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewOCOOrder)
  return target;
}

int SubmitNewOCOOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string ClientOrderID_1 = 3;
    if (has_clientorderid_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid_1());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
    if (has_ordertype_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_1());
    }

    // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
    if (has_buysell_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_1());
    }

    // optional double Price1_1 = 6;
    if (has_price1_1()) {
      total_size += 1 + 8;
    }

    // optional double Price2_1 = 7;
    if (has_price2_1()) {
      total_size += 1 + 8;
    }

    // optional double Quantity_1 = 8;
    if (has_quantity_1()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ClientOrderID_2 = 9;
    if (has_clientorderid_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid_2());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
    if (has_ordertype_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_2());
    }

    // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
    if (has_buysell_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_2());
    }

    // optional double Price1_2 = 12;
    if (has_price1_2()) {
      total_size += 1 + 8;
    }

    // optional double Price2_2 = 13;
    if (has_price2_2()) {
      total_size += 1 + 8;
    }

    // optional double Quantity_2 = 14;
    if (has_quantity_2()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional sfixed64 GoodTillDateTime = 16;
    if (has_goodtilldatetime()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string TradeAccount = 17;
    if (has_tradeaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional uint32 IsAutomatedOrder = 18;
    if (has_isautomatedorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isautomatedorder());
    }

    // optional string ParentTriggerClientOrderID = 19;
    if (has_parenttriggerclientorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parenttriggerclientorderid());
    }

    // optional string FreeFormText = 20;
    if (has_freeformtext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freeformtext());
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
    if (has_openorclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitNewOCOOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitNewOCOOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitNewOCOOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitNewOCOOrder::MergeFrom(const SubmitNewOCOOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_clientorderid_1()) {
      set_clientorderid_1(from.clientorderid_1());
    }
    if (from.has_ordertype_1()) {
      set_ordertype_1(from.ordertype_1());
    }
    if (from.has_buysell_1()) {
      set_buysell_1(from.buysell_1());
    }
    if (from.has_price1_1()) {
      set_price1_1(from.price1_1());
    }
    if (from.has_price2_1()) {
      set_price2_1(from.price2_1());
    }
    if (from.has_quantity_1()) {
      set_quantity_1(from.quantity_1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clientorderid_2()) {
      set_clientorderid_2(from.clientorderid_2());
    }
    if (from.has_ordertype_2()) {
      set_ordertype_2(from.ordertype_2());
    }
    if (from.has_buysell_2()) {
      set_buysell_2(from.buysell_2());
    }
    if (from.has_price1_2()) {
      set_price1_2(from.price1_2());
    }
    if (from.has_price2_2()) {
      set_price2_2(from.price2_2());
    }
    if (from.has_quantity_2()) {
      set_quantity_2(from.quantity_2());
    }
    if (from.has_timeinforce()) {
      set_timeinforce(from.timeinforce());
    }
    if (from.has_goodtilldatetime()) {
      set_goodtilldatetime(from.goodtilldatetime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_isautomatedorder()) {
      set_isautomatedorder(from.isautomatedorder());
    }
    if (from.has_parenttriggerclientorderid()) {
      set_parenttriggerclientorderid(from.parenttriggerclientorderid());
    }
    if (from.has_freeformtext()) {
      set_freeformtext(from.freeformtext());
    }
    if (from.has_openorclose()) {
      set_openorclose(from.openorclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitNewOCOOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewOCOOrder::CopyFrom(const SubmitNewOCOOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewOCOOrder::IsInitialized() const {

  return true;
}

void SubmitNewOCOOrder::Swap(SubmitNewOCOOrder* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(clientorderid_1_, other->clientorderid_1_);
    std::swap(ordertype_1_, other->ordertype_1_);
    std::swap(buysell_1_, other->buysell_1_);
    std::swap(price1_1_, other->price1_1_);
    std::swap(price2_1_, other->price2_1_);
    std::swap(quantity_1_, other->quantity_1_);
    std::swap(clientorderid_2_, other->clientorderid_2_);
    std::swap(ordertype_2_, other->ordertype_2_);
    std::swap(buysell_2_, other->buysell_2_);
    std::swap(price1_2_, other->price1_2_);
    std::swap(price2_2_, other->price2_2_);
    std::swap(quantity_2_, other->quantity_2_);
    std::swap(timeinforce_, other->timeinforce_);
    std::swap(goodtilldatetime_, other->goodtilldatetime_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(isautomatedorder_, other->isautomatedorder_);
    std::swap(parenttriggerclientorderid_, other->parenttriggerclientorderid_);
    std::swap(freeformtext_, other->freeformtext_);
    std::swap(openorclose_, other->openorclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitNewOCOOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitNewOCOOrder_descriptor_;
  metadata.reflection = SubmitNewOCOOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitNewOCOOrderInt::kSymbolFieldNumber;
const int SubmitNewOCOOrderInt::kExchangeFieldNumber;
const int SubmitNewOCOOrderInt::kClientOrderID1FieldNumber;
const int SubmitNewOCOOrderInt::kOrderType1FieldNumber;
const int SubmitNewOCOOrderInt::kBuySell1FieldNumber;
const int SubmitNewOCOOrderInt::kPrice11FieldNumber;
const int SubmitNewOCOOrderInt::kPrice21FieldNumber;
const int SubmitNewOCOOrderInt::kQuantity1FieldNumber;
const int SubmitNewOCOOrderInt::kClientOrderID2FieldNumber;
const int SubmitNewOCOOrderInt::kOrderType2FieldNumber;
const int SubmitNewOCOOrderInt::kBuySell2FieldNumber;
const int SubmitNewOCOOrderInt::kPrice12FieldNumber;
const int SubmitNewOCOOrderInt::kPrice22FieldNumber;
const int SubmitNewOCOOrderInt::kQuantity2FieldNumber;
const int SubmitNewOCOOrderInt::kTimeInForceFieldNumber;
const int SubmitNewOCOOrderInt::kGoodTillDateTimeFieldNumber;
const int SubmitNewOCOOrderInt::kTradeAccountFieldNumber;
const int SubmitNewOCOOrderInt::kIsAutomatedOrderFieldNumber;
const int SubmitNewOCOOrderInt::kParentTriggerClientOrderIDFieldNumber;
const int SubmitNewOCOOrderInt::kFreeFormTextFieldNumber;
const int SubmitNewOCOOrderInt::kDivisorFieldNumber;
const int SubmitNewOCOOrderInt::kOpenOrCloseFieldNumber;
#endif  // !_MSC_VER

SubmitNewOCOOrderInt::SubmitNewOCOOrderInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewOCOOrderInt)
}

void SubmitNewOCOOrderInt::InitAsDefaultInstance() {
}

SubmitNewOCOOrderInt::SubmitNewOCOOrderInt(const SubmitNewOCOOrderInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewOCOOrderInt)
}

void SubmitNewOCOOrderInt::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_1_ = 0;
  buysell_1_ = 0;
  price1_1_ = GOOGLE_LONGLONG(0);
  price2_1_ = GOOGLE_LONGLONG(0);
  quantity_1_ = GOOGLE_LONGLONG(0);
  clientorderid_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_2_ = 0;
  buysell_2_ = 0;
  price1_2_ = GOOGLE_LONGLONG(0);
  price2_2_ = GOOGLE_LONGLONG(0);
  quantity_2_ = GOOGLE_LONGLONG(0);
  timeinforce_ = 0;
  goodtilldatetime_ = GOOGLE_LONGLONG(0);
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isautomatedorder_ = 0u;
  parenttriggerclientorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  divisor_ = 0;
  openorclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitNewOCOOrderInt::~SubmitNewOCOOrderInt() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewOCOOrderInt)
  SharedDtor();
}

void SubmitNewOCOOrderInt::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (clientorderid_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_1_;
  }
  if (clientorderid_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_2_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (parenttriggerclientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parenttriggerclientorderid_;
  }
  if (freeformtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete freeformtext_;
  }
  if (this != default_instance_) {
  }
}

void SubmitNewOCOOrderInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitNewOCOOrderInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitNewOCOOrderInt_descriptor_;
}

const SubmitNewOCOOrderInt& SubmitNewOCOOrderInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SubmitNewOCOOrderInt* SubmitNewOCOOrderInt::default_instance_ = NULL;

SubmitNewOCOOrderInt* SubmitNewOCOOrderInt::New() const {
  return new SubmitNewOCOOrderInt;
}

void SubmitNewOCOOrderInt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubmitNewOCOOrderInt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ordertype_1_, quantity_1_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    if (has_clientorderid_1()) {
      if (clientorderid_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_1_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ordertype_2_, timeinforce_);
    if (has_clientorderid_2()) {
      if (clientorderid_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_2_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(divisor_, openorclose_);
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
    isautomatedorder_ = 0u;
    if (has_parenttriggerclientorderid()) {
      if (parenttriggerclientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parenttriggerclientorderid_->clear();
      }
    }
    if (has_freeformtext()) {
      if (freeformtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        freeformtext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitNewOCOOrderInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewOCOOrderInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ClientOrderID_1;
        break;
      }

      // optional string ClientOrderID_1 = 3;
      case 3: {
        if (tag == 26) {
         parse_ClientOrderID_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid_1().data(), this->clientorderid_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid_1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OrderType_1;
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_OrderType_1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype_1(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BuySell_1;
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
      case 5: {
        if (tag == 40) {
         parse_BuySell_1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell_1(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Price1_1;
        break;
      }

      // optional int64 Price1_1 = 6;
      case 6: {
        if (tag == 48) {
         parse_Price1_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_1_)));
          set_has_price1_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Price2_1;
        break;
      }

      // optional int64 Price2_1 = 7;
      case 7: {
        if (tag == 56) {
         parse_Price2_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_1_)));
          set_has_price2_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Quantity_1;
        break;
      }

      // optional int64 Quantity_1 = 8;
      case 8: {
        if (tag == 64) {
         parse_Quantity_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_1_)));
          set_has_quantity_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ClientOrderID_2;
        break;
      }

      // optional string ClientOrderID_2 = 9;
      case 9: {
        if (tag == 74) {
         parse_ClientOrderID_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid_2().data(), this->clientorderid_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid_2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_OrderType_2;
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
      case 10: {
        if (tag == 80) {
         parse_OrderType_2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype_2(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_BuySell_2;
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
      case 11: {
        if (tag == 88) {
         parse_BuySell_2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell_2(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Price1_2;
        break;
      }

      // optional int64 Price1_2 = 12;
      case 12: {
        if (tag == 96) {
         parse_Price1_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_2_)));
          set_has_price1_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Price2_2;
        break;
      }

      // optional int64 Price2_2 = 13;
      case 13: {
        if (tag == 104) {
         parse_Price2_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_2_)));
          set_has_price2_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Quantity_2;
        break;
      }

      // optional int64 Quantity_2 = 14;
      case 14: {
        if (tag == 112) {
         parse_Quantity_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_2_)));
          set_has_quantity_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_TimeInForce;
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
      case 15: {
        if (tag == 120) {
         parse_TimeInForce:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_GoodTillDateTime;
        break;
      }

      // optional sfixed64 GoodTillDateTime = 16;
      case 16: {
        if (tag == 129) {
         parse_GoodTillDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
          set_has_goodtilldatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 17;
      case 17: {
        if (tag == 138) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_IsAutomatedOrder;
        break;
      }

      // optional uint32 IsAutomatedOrder = 18;
      case 18: {
        if (tag == 144) {
         parse_IsAutomatedOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
          set_has_isautomatedorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_ParentTriggerClientOrderID;
        break;
      }

      // optional string ParentTriggerClientOrderID = 19;
      case 19: {
        if (tag == 154) {
         parse_ParentTriggerClientOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parenttriggerclientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parenttriggerclientorderid().data(), this->parenttriggerclientorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parenttriggerclientorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_FreeFormText;
        break;
      }

      // optional string FreeFormText = 20;
      case 20: {
        if (tag == 162) {
         parse_FreeFormText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeformtext().data(), this->freeformtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "freeformtext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_Divisor;
        break;
      }

      // optional float Divisor = 21;
      case 21: {
        if (tag == 173) {
         parse_Divisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &divisor_)));
          set_has_divisor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_OpenOrClose;
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
      case 22: {
        if (tag == 176) {
         parse_OpenOrClose:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewOCOOrderInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewOCOOrderInt)
  return false;
#undef DO_
}

void SubmitNewOCOOrderInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewOCOOrderInt)
  // optional string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string ClientOrderID_1 = 3;
  if (has_clientorderid_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_1().data(), this->clientorderid_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientorderid_1(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (has_ordertype_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ordertype_1(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (has_buysell_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->buysell_1(), output);
  }

  // optional int64 Price1_1 = 6;
  if (has_price1_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->price1_1(), output);
  }

  // optional int64 Price2_1 = 7;
  if (has_price2_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->price2_1(), output);
  }

  // optional int64 Quantity_1 = 8;
  if (has_quantity_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->quantity_1(), output);
  }

  // optional string ClientOrderID_2 = 9;
  if (has_clientorderid_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_2().data(), this->clientorderid_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->clientorderid_2(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (has_ordertype_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ordertype_2(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (has_buysell_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->buysell_2(), output);
  }

  // optional int64 Price1_2 = 12;
  if (has_price1_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->price1_2(), output);
  }

  // optional int64 Price2_2 = 13;
  if (has_price2_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->price2_2(), output);
  }

  // optional int64 Quantity_2 = 14;
  if (has_quantity_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->quantity_2(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (has_timeinforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 16;
  if (has_goodtilldatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(16, this->goodtilldatetime(), output);
  }

  // optional string TradeAccount = 17;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->tradeaccount(), output);
  }

  // optional uint32 IsAutomatedOrder = 18;
  if (has_isautomatedorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->isautomatedorder(), output);
  }

  // optional string ParentTriggerClientOrderID = 19;
  if (has_parenttriggerclientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parenttriggerclientorderid().data(), this->parenttriggerclientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parenttriggerclientorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->parenttriggerclientorderid(), output);
  }

  // optional string FreeFormText = 20;
  if (has_freeformtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), this->freeformtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "freeformtext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->freeformtext(), output);
  }

  // optional float Divisor = 21;
  if (has_divisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->divisor(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
  if (has_openorclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->openorclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewOCOOrderInt)
}

::google::protobuf::uint8* SubmitNewOCOOrderInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewOCOOrderInt)
  // optional string Symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string ClientOrderID_1 = 3;
  if (has_clientorderid_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_1().data(), this->clientorderid_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientorderid_1(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (has_ordertype_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ordertype_1(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (has_buysell_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->buysell_1(), target);
  }

  // optional int64 Price1_1 = 6;
  if (has_price1_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->price1_1(), target);
  }

  // optional int64 Price2_1 = 7;
  if (has_price2_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->price2_1(), target);
  }

  // optional int64 Quantity_1 = 8;
  if (has_quantity_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->quantity_1(), target);
  }

  // optional string ClientOrderID_2 = 9;
  if (has_clientorderid_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_2().data(), this->clientorderid_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientorderid_2(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (has_ordertype_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ordertype_2(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (has_buysell_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->buysell_2(), target);
  }

  // optional int64 Price1_2 = 12;
  if (has_price1_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->price1_2(), target);
  }

  // optional int64 Price2_2 = 13;
  if (has_price2_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->price2_2(), target);
  }

  // optional int64 Quantity_2 = 14;
  if (has_quantity_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->quantity_2(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (has_timeinforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 16;
  if (has_goodtilldatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(16, this->goodtilldatetime(), target);
  }

  // optional string TradeAccount = 17;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tradeaccount(), target);
  }

  // optional uint32 IsAutomatedOrder = 18;
  if (has_isautomatedorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->isautomatedorder(), target);
  }

  // optional string ParentTriggerClientOrderID = 19;
  if (has_parenttriggerclientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parenttriggerclientorderid().data(), this->parenttriggerclientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parenttriggerclientorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->parenttriggerclientorderid(), target);
  }

  // optional string FreeFormText = 20;
  if (has_freeformtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), this->freeformtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "freeformtext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->freeformtext(), target);
  }

  // optional float Divisor = 21;
  if (has_divisor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->divisor(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
  if (has_openorclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->openorclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewOCOOrderInt)
  return target;
}

int SubmitNewOCOOrderInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string ClientOrderID_1 = 3;
    if (has_clientorderid_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid_1());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
    if (has_ordertype_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_1());
    }

    // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
    if (has_buysell_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_1());
    }

    // optional int64 Price1_1 = 6;
    if (has_price1_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price1_1());
    }

    // optional int64 Price2_1 = 7;
    if (has_price2_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price2_1());
    }

    // optional int64 Quantity_1 = 8;
    if (has_quantity_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity_1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ClientOrderID_2 = 9;
    if (has_clientorderid_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid_2());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
    if (has_ordertype_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_2());
    }

    // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
    if (has_buysell_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_2());
    }

    // optional int64 Price1_2 = 12;
    if (has_price1_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price1_2());
    }

    // optional int64 Price2_2 = 13;
    if (has_price2_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price2_2());
    }

    // optional int64 Quantity_2 = 14;
    if (has_quantity_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity_2());
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional sfixed64 GoodTillDateTime = 16;
    if (has_goodtilldatetime()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string TradeAccount = 17;
    if (has_tradeaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional uint32 IsAutomatedOrder = 18;
    if (has_isautomatedorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isautomatedorder());
    }

    // optional string ParentTriggerClientOrderID = 19;
    if (has_parenttriggerclientorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parenttriggerclientorderid());
    }

    // optional string FreeFormText = 20;
    if (has_freeformtext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freeformtext());
    }

    // optional float Divisor = 21;
    if (has_divisor()) {
      total_size += 2 + 4;
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
    if (has_openorclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitNewOCOOrderInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitNewOCOOrderInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitNewOCOOrderInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitNewOCOOrderInt::MergeFrom(const SubmitNewOCOOrderInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_clientorderid_1()) {
      set_clientorderid_1(from.clientorderid_1());
    }
    if (from.has_ordertype_1()) {
      set_ordertype_1(from.ordertype_1());
    }
    if (from.has_buysell_1()) {
      set_buysell_1(from.buysell_1());
    }
    if (from.has_price1_1()) {
      set_price1_1(from.price1_1());
    }
    if (from.has_price2_1()) {
      set_price2_1(from.price2_1());
    }
    if (from.has_quantity_1()) {
      set_quantity_1(from.quantity_1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clientorderid_2()) {
      set_clientorderid_2(from.clientorderid_2());
    }
    if (from.has_ordertype_2()) {
      set_ordertype_2(from.ordertype_2());
    }
    if (from.has_buysell_2()) {
      set_buysell_2(from.buysell_2());
    }
    if (from.has_price1_2()) {
      set_price1_2(from.price1_2());
    }
    if (from.has_price2_2()) {
      set_price2_2(from.price2_2());
    }
    if (from.has_quantity_2()) {
      set_quantity_2(from.quantity_2());
    }
    if (from.has_timeinforce()) {
      set_timeinforce(from.timeinforce());
    }
    if (from.has_goodtilldatetime()) {
      set_goodtilldatetime(from.goodtilldatetime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_isautomatedorder()) {
      set_isautomatedorder(from.isautomatedorder());
    }
    if (from.has_parenttriggerclientorderid()) {
      set_parenttriggerclientorderid(from.parenttriggerclientorderid());
    }
    if (from.has_freeformtext()) {
      set_freeformtext(from.freeformtext());
    }
    if (from.has_divisor()) {
      set_divisor(from.divisor());
    }
    if (from.has_openorclose()) {
      set_openorclose(from.openorclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitNewOCOOrderInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewOCOOrderInt::CopyFrom(const SubmitNewOCOOrderInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewOCOOrderInt::IsInitialized() const {

  return true;
}

void SubmitNewOCOOrderInt::Swap(SubmitNewOCOOrderInt* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(clientorderid_1_, other->clientorderid_1_);
    std::swap(ordertype_1_, other->ordertype_1_);
    std::swap(buysell_1_, other->buysell_1_);
    std::swap(price1_1_, other->price1_1_);
    std::swap(price2_1_, other->price2_1_);
    std::swap(quantity_1_, other->quantity_1_);
    std::swap(clientorderid_2_, other->clientorderid_2_);
    std::swap(ordertype_2_, other->ordertype_2_);
    std::swap(buysell_2_, other->buysell_2_);
    std::swap(price1_2_, other->price1_2_);
    std::swap(price2_2_, other->price2_2_);
    std::swap(quantity_2_, other->quantity_2_);
    std::swap(timeinforce_, other->timeinforce_);
    std::swap(goodtilldatetime_, other->goodtilldatetime_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(isautomatedorder_, other->isautomatedorder_);
    std::swap(parenttriggerclientorderid_, other->parenttriggerclientorderid_);
    std::swap(freeformtext_, other->freeformtext_);
    std::swap(divisor_, other->divisor_);
    std::swap(openorclose_, other->openorclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitNewOCOOrderInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitNewOCOOrderInt_descriptor_;
  metadata.reflection = SubmitNewOCOOrderInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenOrdersRequest::kRequestIDFieldNumber;
const int OpenOrdersRequest::kRequestAllOrdersFieldNumber;
const int OpenOrdersRequest::kServerOrderIDFieldNumber;
#endif  // !_MSC_VER

OpenOrdersRequest::OpenOrdersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.OpenOrdersRequest)
}

void OpenOrdersRequest::InitAsDefaultInstance() {
}

OpenOrdersRequest::OpenOrdersRequest(const OpenOrdersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.OpenOrdersRequest)
}

void OpenOrdersRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  requestallorders_ = 0;
  serverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenOrdersRequest::~OpenOrdersRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.OpenOrdersRequest)
  SharedDtor();
}

void OpenOrdersRequest::SharedDtor() {
  if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverorderid_;
  }
  if (this != default_instance_) {
  }
}

void OpenOrdersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenOrdersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenOrdersRequest_descriptor_;
}

const OpenOrdersRequest& OpenOrdersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

OpenOrdersRequest* OpenOrdersRequest::default_instance_ = NULL;

OpenOrdersRequest* OpenOrdersRequest::New() const {
  return new OpenOrdersRequest;
}

void OpenOrdersRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenOrdersRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(requestid_, requestallorders_);
    if (has_serverorderid()) {
      if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverorderid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenOrdersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.OpenOrdersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RequestAllOrders;
        break;
      }

      // optional int32 RequestAllOrders = 2;
      case 2: {
        if (tag == 16) {
         parse_RequestAllOrders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestallorders_)));
          set_has_requestallorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ServerOrderID;
        break;
      }

      // optional string ServerOrderID = 3;
      case 3: {
        if (tag == 26) {
         parse_ServerOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), this->serverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.OpenOrdersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.OpenOrdersRequest)
  return false;
#undef DO_
}

void OpenOrdersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.OpenOrdersRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional int32 RequestAllOrders = 2;
  if (has_requestallorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->requestallorders(), output);
  }

  // optional string ServerOrderID = 3;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serverorderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.OpenOrdersRequest)
}

::google::protobuf::uint8* OpenOrdersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.OpenOrdersRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional int32 RequestAllOrders = 2;
  if (has_requestallorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->requestallorders(), target);
  }

  // optional string ServerOrderID = 3;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverorderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.OpenOrdersRequest)
  return target;
}

int OpenOrdersRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 RequestAllOrders = 2;
    if (has_requestallorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestallorders());
    }

    // optional string ServerOrderID = 3;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenOrdersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenOrdersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenOrdersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenOrdersRequest::MergeFrom(const OpenOrdersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_requestallorders()) {
      set_requestallorders(from.requestallorders());
    }
    if (from.has_serverorderid()) {
      set_serverorderid(from.serverorderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenOrdersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOrdersRequest::CopyFrom(const OpenOrdersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOrdersRequest::IsInitialized() const {

  return true;
}

void OpenOrdersRequest::Swap(OpenOrdersRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(requestallorders_, other->requestallorders_);
    std::swap(serverorderid_, other->serverorderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenOrdersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenOrdersRequest_descriptor_;
  metadata.reflection = OpenOrdersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalOrderFillsRequest::kRequestIDFieldNumber;
const int HistoricalOrderFillsRequest::kServerOrderIDFieldNumber;
const int HistoricalOrderFillsRequest::kNumberOfDaysFieldNumber;
const int HistoricalOrderFillsRequest::kTradeAccountFieldNumber;
#endif  // !_MSC_VER

HistoricalOrderFillsRequest::HistoricalOrderFillsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalOrderFillsRequest)
}

void HistoricalOrderFillsRequest::InitAsDefaultInstance() {
}

HistoricalOrderFillsRequest::HistoricalOrderFillsRequest(const HistoricalOrderFillsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalOrderFillsRequest)
}

void HistoricalOrderFillsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  serverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numberofdays_ = 0;
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalOrderFillsRequest::~HistoricalOrderFillsRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalOrderFillsRequest)
  SharedDtor();
}

void HistoricalOrderFillsRequest::SharedDtor() {
  if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverorderid_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (this != default_instance_) {
  }
}

void HistoricalOrderFillsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalOrderFillsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalOrderFillsRequest_descriptor_;
}

const HistoricalOrderFillsRequest& HistoricalOrderFillsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalOrderFillsRequest* HistoricalOrderFillsRequest::default_instance_ = NULL;

HistoricalOrderFillsRequest* HistoricalOrderFillsRequest::New() const {
  return new HistoricalOrderFillsRequest;
}

void HistoricalOrderFillsRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoricalOrderFillsRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(requestid_, numberofdays_);
    if (has_serverorderid()) {
      if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverorderid_->clear();
      }
    }
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalOrderFillsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalOrderFillsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerOrderID;
        break;
      }

      // optional string ServerOrderID = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), this->serverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NumberOfDays;
        break;
      }

      // optional int32 NumberOfDays = 3;
      case 3: {
        if (tag == 24) {
         parse_NumberOfDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofdays_)));
          set_has_numberofdays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 4;
      case 4: {
        if (tag == 34) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalOrderFillsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalOrderFillsRequest)
  return false;
#undef DO_
}

void HistoricalOrderFillsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalOrderFillsRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string ServerOrderID = 2;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverorderid(), output);
  }

  // optional int32 NumberOfDays = 3;
  if (has_numberofdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numberofdays(), output);
  }

  // optional string TradeAccount = 4;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tradeaccount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalOrderFillsRequest)
}

::google::protobuf::uint8* HistoricalOrderFillsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalOrderFillsRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string ServerOrderID = 2;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverorderid(), target);
  }

  // optional int32 NumberOfDays = 3;
  if (has_numberofdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numberofdays(), target);
  }

  // optional string TradeAccount = 4;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradeaccount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalOrderFillsRequest)
  return target;
}

int HistoricalOrderFillsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string ServerOrderID = 2;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional int32 NumberOfDays = 3;
    if (has_numberofdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofdays());
    }

    // optional string TradeAccount = 4;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalOrderFillsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalOrderFillsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalOrderFillsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalOrderFillsRequest::MergeFrom(const HistoricalOrderFillsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_serverorderid()) {
      set_serverorderid(from.serverorderid());
    }
    if (from.has_numberofdays()) {
      set_numberofdays(from.numberofdays());
    }
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalOrderFillsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalOrderFillsRequest::CopyFrom(const HistoricalOrderFillsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalOrderFillsRequest::IsInitialized() const {

  return true;
}

void HistoricalOrderFillsRequest::Swap(HistoricalOrderFillsRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(serverorderid_, other->serverorderid_);
    std::swap(numberofdays_, other->numberofdays_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalOrderFillsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalOrderFillsRequest_descriptor_;
  metadata.reflection = HistoricalOrderFillsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalOrderFillsReject::kRequestIDFieldNumber;
const int HistoricalOrderFillsReject::kRejectTextFieldNumber;
#endif  // !_MSC_VER

HistoricalOrderFillsReject::HistoricalOrderFillsReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalOrderFillsReject)
}

void HistoricalOrderFillsReject::InitAsDefaultInstance() {
}

HistoricalOrderFillsReject::HistoricalOrderFillsReject(const HistoricalOrderFillsReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalOrderFillsReject)
}

void HistoricalOrderFillsReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  rejecttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalOrderFillsReject::~HistoricalOrderFillsReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalOrderFillsReject)
  SharedDtor();
}

void HistoricalOrderFillsReject::SharedDtor() {
  if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rejecttext_;
  }
  if (this != default_instance_) {
  }
}

void HistoricalOrderFillsReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalOrderFillsReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalOrderFillsReject_descriptor_;
}

const HistoricalOrderFillsReject& HistoricalOrderFillsReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalOrderFillsReject* HistoricalOrderFillsReject::default_instance_ = NULL;

HistoricalOrderFillsReject* HistoricalOrderFillsReject::New() const {
  return new HistoricalOrderFillsReject;
}

void HistoricalOrderFillsReject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    requestid_ = 0;
    if (has_rejecttext()) {
      if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rejecttext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalOrderFillsReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalOrderFillsReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RejectText;
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (tag == 18) {
         parse_RejectText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), this->rejecttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rejecttext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalOrderFillsReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalOrderFillsReject)
  return false;
#undef DO_
}

void HistoricalOrderFillsReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalOrderFillsReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalOrderFillsReject)
}

::google::protobuf::uint8* HistoricalOrderFillsReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalOrderFillsReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalOrderFillsReject)
  return target;
}

int HistoricalOrderFillsReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalOrderFillsReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalOrderFillsReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalOrderFillsReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalOrderFillsReject::MergeFrom(const HistoricalOrderFillsReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_rejecttext()) {
      set_rejecttext(from.rejecttext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalOrderFillsReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalOrderFillsReject::CopyFrom(const HistoricalOrderFillsReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalOrderFillsReject::IsInitialized() const {

  return true;
}

void HistoricalOrderFillsReject::Swap(HistoricalOrderFillsReject* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(rejecttext_, other->rejecttext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalOrderFillsReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalOrderFillsReject_descriptor_;
  metadata.reflection = HistoricalOrderFillsReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentPositionsRequest::kRequestIDFieldNumber;
const int CurrentPositionsRequest::kTradeAccountFieldNumber;
#endif  // !_MSC_VER

CurrentPositionsRequest::CurrentPositionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CurrentPositionsRequest)
}

void CurrentPositionsRequest::InitAsDefaultInstance() {
}

CurrentPositionsRequest::CurrentPositionsRequest(const CurrentPositionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CurrentPositionsRequest)
}

void CurrentPositionsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentPositionsRequest::~CurrentPositionsRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.CurrentPositionsRequest)
  SharedDtor();
}

void CurrentPositionsRequest::SharedDtor() {
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (this != default_instance_) {
  }
}

void CurrentPositionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentPositionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentPositionsRequest_descriptor_;
}

const CurrentPositionsRequest& CurrentPositionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

CurrentPositionsRequest* CurrentPositionsRequest::default_instance_ = NULL;

CurrentPositionsRequest* CurrentPositionsRequest::New() const {
  return new CurrentPositionsRequest;
}

void CurrentPositionsRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    requestid_ = 0;
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentPositionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CurrentPositionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 2;
      case 2: {
        if (tag == 18) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CurrentPositionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CurrentPositionsRequest)
  return false;
#undef DO_
}

void CurrentPositionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CurrentPositionsRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string TradeAccount = 2;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tradeaccount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CurrentPositionsRequest)
}

::google::protobuf::uint8* CurrentPositionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CurrentPositionsRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string TradeAccount = 2;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradeaccount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CurrentPositionsRequest)
  return target;
}

int CurrentPositionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string TradeAccount = 2;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentPositionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentPositionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentPositionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentPositionsRequest::MergeFrom(const CurrentPositionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentPositionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentPositionsRequest::CopyFrom(const CurrentPositionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionsRequest::IsInitialized() const {

  return true;
}

void CurrentPositionsRequest::Swap(CurrentPositionsRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentPositionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentPositionsRequest_descriptor_;
  metadata.reflection = CurrentPositionsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentPositionsReject::kRequestIDFieldNumber;
const int CurrentPositionsReject::kRejectTextFieldNumber;
#endif  // !_MSC_VER

CurrentPositionsReject::CurrentPositionsReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CurrentPositionsReject)
}

void CurrentPositionsReject::InitAsDefaultInstance() {
}

CurrentPositionsReject::CurrentPositionsReject(const CurrentPositionsReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CurrentPositionsReject)
}

void CurrentPositionsReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  rejecttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentPositionsReject::~CurrentPositionsReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.CurrentPositionsReject)
  SharedDtor();
}

void CurrentPositionsReject::SharedDtor() {
  if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rejecttext_;
  }
  if (this != default_instance_) {
  }
}

void CurrentPositionsReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentPositionsReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentPositionsReject_descriptor_;
}

const CurrentPositionsReject& CurrentPositionsReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

CurrentPositionsReject* CurrentPositionsReject::default_instance_ = NULL;

CurrentPositionsReject* CurrentPositionsReject::New() const {
  return new CurrentPositionsReject;
}

void CurrentPositionsReject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    requestid_ = 0;
    if (has_rejecttext()) {
      if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rejecttext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentPositionsReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CurrentPositionsReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RejectText;
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (tag == 18) {
         parse_RejectText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), this->rejecttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rejecttext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CurrentPositionsReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CurrentPositionsReject)
  return false;
#undef DO_
}

void CurrentPositionsReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CurrentPositionsReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CurrentPositionsReject)
}

::google::protobuf::uint8* CurrentPositionsReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CurrentPositionsReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CurrentPositionsReject)
  return target;
}

int CurrentPositionsReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentPositionsReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentPositionsReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentPositionsReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentPositionsReject::MergeFrom(const CurrentPositionsReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_rejecttext()) {
      set_rejecttext(from.rejecttext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentPositionsReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentPositionsReject::CopyFrom(const CurrentPositionsReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionsReject::IsInitialized() const {

  return true;
}

void CurrentPositionsReject::Swap(CurrentPositionsReject* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(rejecttext_, other->rejecttext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentPositionsReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentPositionsReject_descriptor_;
  metadata.reflection = CurrentPositionsReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderUpdate::kRequestIDFieldNumber;
const int OrderUpdate::kTotalNumMessagesFieldNumber;
const int OrderUpdate::kMessageNumberFieldNumber;
const int OrderUpdate::kSymbolFieldNumber;
const int OrderUpdate::kExchangeFieldNumber;
const int OrderUpdate::kPreviousServerOrderIDFieldNumber;
const int OrderUpdate::kServerOrderIDFieldNumber;
const int OrderUpdate::kClientOrderIDFieldNumber;
const int OrderUpdate::kExchangeOrderIDFieldNumber;
const int OrderUpdate::kOrderStatusFieldNumber;
const int OrderUpdate::kOrderUpdateReasonFieldNumber;
const int OrderUpdate::kOrderTypeFieldNumber;
const int OrderUpdate::kBuySellFieldNumber;
const int OrderUpdate::kPrice1FieldNumber;
const int OrderUpdate::kPrice2FieldNumber;
const int OrderUpdate::kTimeInForceFieldNumber;
const int OrderUpdate::kGoodTillDateTimeFieldNumber;
const int OrderUpdate::kOrderQuantityFieldNumber;
const int OrderUpdate::kFilledQuantityFieldNumber;
const int OrderUpdate::kRemainingQuantityFieldNumber;
const int OrderUpdate::kAverageFillPriceFieldNumber;
const int OrderUpdate::kLastFillPriceFieldNumber;
const int OrderUpdate::kLastFillDateTimeFieldNumber;
const int OrderUpdate::kLastFillQuantityFieldNumber;
const int OrderUpdate::kLastFillExecutionIDFieldNumber;
const int OrderUpdate::kTradeAccountFieldNumber;
const int OrderUpdate::kInfoTextFieldNumber;
const int OrderUpdate::kNoOrdersFieldNumber;
const int OrderUpdate::kParentServerOrderIDFieldNumber;
const int OrderUpdate::kOCOLinkedOrderServerOrderIDFieldNumber;
const int OrderUpdate::kOpenOrCloseFieldNumber;
#endif  // !_MSC_VER

OrderUpdate::OrderUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.OrderUpdate)
}

void OrderUpdate::InitAsDefaultInstance() {
}

OrderUpdate::OrderUpdate(const OrderUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.OrderUpdate)
}

void OrderUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  totalnummessages_ = 0;
  messagenumber_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousserverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderstatus_ = 0;
  orderupdatereason_ = 0;
  ordertype_ = 0;
  buysell_ = 0;
  price1_ = 0;
  price2_ = 0;
  timeinforce_ = 0;
  goodtilldatetime_ = GOOGLE_LONGLONG(0);
  orderquantity_ = 0;
  filledquantity_ = 0;
  remainingquantity_ = 0;
  averagefillprice_ = 0;
  lastfillprice_ = 0;
  lastfilldatetime_ = GOOGLE_LONGLONG(0);
  lastfillquantity_ = 0;
  lastfillexecutionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noorders_ = 0u;
  parentserverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ocolinkedorderserverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openorclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderUpdate::~OrderUpdate() {
  // @@protoc_insertion_point(destructor:DTC_PB.OrderUpdate)
  SharedDtor();
}

void OrderUpdate::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (previousserverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete previousserverorderid_;
  }
  if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverorderid_;
  }
  if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientorderid_;
  }
  if (exchangeorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeorderid_;
  }
  if (lastfillexecutionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastfillexecutionid_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (infotext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infotext_;
  }
  if (parentserverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentserverorderid_;
  }
  if (ocolinkedorderserverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ocolinkedorderserverorderid_;
  }
  if (this != default_instance_) {
  }
}

void OrderUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderUpdate_descriptor_;
}

const OrderUpdate& OrderUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

OrderUpdate* OrderUpdate::default_instance_ = NULL;

OrderUpdate* OrderUpdate::New() const {
  return new OrderUpdate;
}

void OrderUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(requestid_, totalnummessages_);
    messagenumber_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    if (has_previousserverorderid()) {
      if (previousserverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        previousserverorderid_->clear();
      }
    }
    if (has_serverorderid()) {
      if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverorderid_->clear();
      }
    }
    if (has_clientorderid()) {
      if (clientorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientorderid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(orderupdatereason_, price2_);
    if (has_exchangeorderid()) {
      if (exchangeorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchangeorderid_->clear();
      }
    }
    orderstatus_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(goodtilldatetime_, lastfillquantity_);
  }
  if (_has_bits_[24 / 32] & 2130706432) {
    ZR_(noorders_, openorclose_);
    if (has_lastfillexecutionid()) {
      if (lastfillexecutionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastfillexecutionid_->clear();
      }
    }
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
    if (has_infotext()) {
      if (infotext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        infotext_->clear();
      }
    }
    if (has_parentserverorderid()) {
      if (parentserverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parentserverorderid_->clear();
      }
    }
    if (has_ocolinkedorderserverorderid()) {
      if (ocolinkedorderserverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ocolinkedorderserverorderid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.OrderUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalNumMessages;
        break;
      }

      // optional int32 TotalNumMessages = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalNumMessages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnummessages_)));
          set_has_totalnummessages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MessageNumber;
        break;
      }

      // optional int32 MessageNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_MessageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
          set_has_messagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Symbol;
        break;
      }

      // optional string Symbol = 4;
      case 4: {
        if (tag == 34) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 5;
      case 5: {
        if (tag == 42) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_PreviousServerOrderID;
        break;
      }

      // optional string PreviousServerOrderID = 6;
      case 6: {
        if (tag == 50) {
         parse_PreviousServerOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previousserverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->previousserverorderid().data(), this->previousserverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "previousserverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ServerOrderID;
        break;
      }

      // optional string ServerOrderID = 7;
      case 7: {
        if (tag == 58) {
         parse_ServerOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), this->serverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ClientOrderID;
        break;
      }

      // optional string ClientOrderID = 8;
      case 8: {
        if (tag == 66) {
         parse_ClientOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), this->clientorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ExchangeOrderID;
        break;
      }

      // optional string ExchangeOrderID = 9;
      case 9: {
        if (tag == 74) {
         parse_ExchangeOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeorderid().data(), this->exchangeorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchangeorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_OrderStatus;
        break;
      }

      // optional .DTC_PB.OrderStatusEnum OrderStatus = 10;
      case 10: {
        if (tag == 80) {
         parse_OrderStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderStatusEnum_IsValid(value)) {
            set_orderstatus(static_cast< ::DTC_PB::OrderStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_OrderUpdateReason;
        break;
      }

      // optional .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
      case 11: {
        if (tag == 88) {
         parse_OrderUpdateReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderUpdateReasonEnum_IsValid(value)) {
            set_orderupdatereason(static_cast< ::DTC_PB::OrderUpdateReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_OrderType;
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType = 12;
      case 12: {
        if (tag == 96) {
         parse_OrderType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_BuySell;
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell = 13;
      case 13: {
        if (tag == 104) {
         parse_BuySell:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_Price1;
        break;
      }

      // optional double Price1 = 14;
      case 14: {
        if (tag == 113) {
         parse_Price1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_)));
          set_has_price1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_Price2;
        break;
      }

      // optional double Price2 = 15;
      case 15: {
        if (tag == 121) {
         parse_Price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_)));
          set_has_price2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_TimeInForce;
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 16;
      case 16: {
        if (tag == 128) {
         parse_TimeInForce:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_GoodTillDateTime;
        break;
      }

      // optional sfixed64 GoodTillDateTime = 17;
      case 17: {
        if (tag == 137) {
         parse_GoodTillDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
          set_has_goodtilldatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_OrderQuantity;
        break;
      }

      // optional double OrderQuantity = 18;
      case 18: {
        if (tag == 145) {
         parse_OrderQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orderquantity_)));
          set_has_orderquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_FilledQuantity;
        break;
      }

      // optional double FilledQuantity = 19;
      case 19: {
        if (tag == 153) {
         parse_FilledQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &filledquantity_)));
          set_has_filledquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_RemainingQuantity;
        break;
      }

      // optional double RemainingQuantity = 20;
      case 20: {
        if (tag == 161) {
         parse_RemainingQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remainingquantity_)));
          set_has_remainingquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_AverageFillPrice;
        break;
      }

      // optional double AverageFillPrice = 21;
      case 21: {
        if (tag == 169) {
         parse_AverageFillPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averagefillprice_)));
          set_has_averagefillprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_LastFillPrice;
        break;
      }

      // optional double LastFillPrice = 22;
      case 22: {
        if (tag == 177) {
         parse_LastFillPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastfillprice_)));
          set_has_lastfillprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_LastFillDateTime;
        break;
      }

      // optional sfixed64 LastFillDateTime = 23;
      case 23: {
        if (tag == 185) {
         parse_LastFillDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &lastfilldatetime_)));
          set_has_lastfilldatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_LastFillQuantity;
        break;
      }

      // optional double LastFillQuantity = 24;
      case 24: {
        if (tag == 193) {
         parse_LastFillQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastfillquantity_)));
          set_has_lastfillquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_LastFillExecutionID;
        break;
      }

      // optional string LastFillExecutionID = 25;
      case 25: {
        if (tag == 202) {
         parse_LastFillExecutionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastfillexecutionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastfillexecutionid().data(), this->lastfillexecutionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastfillexecutionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 26;
      case 26: {
        if (tag == 210) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_InfoText;
        break;
      }

      // optional string InfoText = 27;
      case 27: {
        if (tag == 218) {
         parse_InfoText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infotext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infotext().data(), this->infotext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "infotext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_NoOrders;
        break;
      }

      // optional uint32 NoOrders = 28;
      case 28: {
        if (tag == 224) {
         parse_NoOrders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noorders_)));
          set_has_noorders();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_ParentServerOrderID;
        break;
      }

      // optional string ParentServerOrderID = 29;
      case 29: {
        if (tag == 234) {
         parse_ParentServerOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentserverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parentserverorderid().data(), this->parentserverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parentserverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_OCOLinkedOrderServerOrderID;
        break;
      }

      // optional string OCOLinkedOrderServerOrderID = 30;
      case 30: {
        if (tag == 242) {
         parse_OCOLinkedOrderServerOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ocolinkedorderserverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ocolinkedorderserverorderid().data(), this->ocolinkedorderserverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ocolinkedorderserverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_OpenOrClose;
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
      case 31: {
        if (tag == 248) {
         parse_OpenOrClose:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(31, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.OrderUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.OrderUpdate)
  return false;
#undef DO_
}

void OrderUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.OrderUpdate)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional int32 TotalNumMessages = 2;
  if (has_totalnummessages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalnummessages(), output);
  }

  // optional int32 MessageNumber = 3;
  if (has_messagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messagenumber(), output);
  }

  // optional string Symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // optional string Exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // optional string PreviousServerOrderID = 6;
  if (has_previousserverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previousserverorderid().data(), this->previousserverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "previousserverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->previousserverorderid(), output);
  }

  // optional string ServerOrderID = 7;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serverorderid(), output);
  }

  // optional string ClientOrderID = 8;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->clientorderid(), output);
  }

  // optional string ExchangeOrderID = 9;
  if (has_exchangeorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeorderid().data(), this->exchangeorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->exchangeorderid(), output);
  }

  // optional .DTC_PB.OrderStatusEnum OrderStatus = 10;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->orderstatus(), output);
  }

  // optional .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
  if (has_orderupdatereason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->orderupdatereason(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 12;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->ordertype(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 13;
  if (has_buysell()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->buysell(), output);
  }

  // optional double Price1 = 14;
  if (has_price1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->price1(), output);
  }

  // optional double Price2 = 15;
  if (has_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->price2(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 16;
  if (has_timeinforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 17;
  if (has_goodtilldatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(17, this->goodtilldatetime(), output);
  }

  // optional double OrderQuantity = 18;
  if (has_orderquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->orderquantity(), output);
  }

  // optional double FilledQuantity = 19;
  if (has_filledquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->filledquantity(), output);
  }

  // optional double RemainingQuantity = 20;
  if (has_remainingquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->remainingquantity(), output);
  }

  // optional double AverageFillPrice = 21;
  if (has_averagefillprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->averagefillprice(), output);
  }

  // optional double LastFillPrice = 22;
  if (has_lastfillprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->lastfillprice(), output);
  }

  // optional sfixed64 LastFillDateTime = 23;
  if (has_lastfilldatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(23, this->lastfilldatetime(), output);
  }

  // optional double LastFillQuantity = 24;
  if (has_lastfillquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->lastfillquantity(), output);
  }

  // optional string LastFillExecutionID = 25;
  if (has_lastfillexecutionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastfillexecutionid().data(), this->lastfillexecutionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastfillexecutionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->lastfillexecutionid(), output);
  }

  // optional string TradeAccount = 26;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->tradeaccount(), output);
  }

  // optional string InfoText = 27;
  if (has_infotext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), this->infotext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "infotext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->infotext(), output);
  }

  // optional uint32 NoOrders = 28;
  if (has_noorders()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->noorders(), output);
  }

  // optional string ParentServerOrderID = 29;
  if (has_parentserverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentserverorderid().data(), this->parentserverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentserverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->parentserverorderid(), output);
  }

  // optional string OCOLinkedOrderServerOrderID = 30;
  if (has_ocolinkedorderserverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ocolinkedorderserverorderid().data(), this->ocolinkedorderserverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ocolinkedorderserverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->ocolinkedorderserverorderid(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
  if (has_openorclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->openorclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.OrderUpdate)
}

::google::protobuf::uint8* OrderUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.OrderUpdate)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional int32 TotalNumMessages = 2;
  if (has_totalnummessages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalnummessages(), target);
  }

  // optional int32 MessageNumber = 3;
  if (has_messagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messagenumber(), target);
  }

  // optional string Symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional string Exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // optional string PreviousServerOrderID = 6;
  if (has_previousserverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previousserverorderid().data(), this->previousserverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "previousserverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->previousserverorderid(), target);
  }

  // optional string ServerOrderID = 7;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serverorderid(), target);
  }

  // optional string ClientOrderID = 8;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), this->clientorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->clientorderid(), target);
  }

  // optional string ExchangeOrderID = 9;
  if (has_exchangeorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeorderid().data(), this->exchangeorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->exchangeorderid(), target);
  }

  // optional .DTC_PB.OrderStatusEnum OrderStatus = 10;
  if (has_orderstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->orderstatus(), target);
  }

  // optional .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
  if (has_orderupdatereason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->orderupdatereason(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 12;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->ordertype(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 13;
  if (has_buysell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->buysell(), target);
  }

  // optional double Price1 = 14;
  if (has_price1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->price1(), target);
  }

  // optional double Price2 = 15;
  if (has_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->price2(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 16;
  if (has_timeinforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 17;
  if (has_goodtilldatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(17, this->goodtilldatetime(), target);
  }

  // optional double OrderQuantity = 18;
  if (has_orderquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->orderquantity(), target);
  }

  // optional double FilledQuantity = 19;
  if (has_filledquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->filledquantity(), target);
  }

  // optional double RemainingQuantity = 20;
  if (has_remainingquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->remainingquantity(), target);
  }

  // optional double AverageFillPrice = 21;
  if (has_averagefillprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->averagefillprice(), target);
  }

  // optional double LastFillPrice = 22;
  if (has_lastfillprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->lastfillprice(), target);
  }

  // optional sfixed64 LastFillDateTime = 23;
  if (has_lastfilldatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(23, this->lastfilldatetime(), target);
  }

  // optional double LastFillQuantity = 24;
  if (has_lastfillquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->lastfillquantity(), target);
  }

  // optional string LastFillExecutionID = 25;
  if (has_lastfillexecutionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastfillexecutionid().data(), this->lastfillexecutionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastfillexecutionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->lastfillexecutionid(), target);
  }

  // optional string TradeAccount = 26;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->tradeaccount(), target);
  }

  // optional string InfoText = 27;
  if (has_infotext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), this->infotext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "infotext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->infotext(), target);
  }

  // optional uint32 NoOrders = 28;
  if (has_noorders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->noorders(), target);
  }

  // optional string ParentServerOrderID = 29;
  if (has_parentserverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentserverorderid().data(), this->parentserverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentserverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->parentserverorderid(), target);
  }

  // optional string OCOLinkedOrderServerOrderID = 30;
  if (has_ocolinkedorderserverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ocolinkedorderserverorderid().data(), this->ocolinkedorderserverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ocolinkedorderserverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->ocolinkedorderserverorderid(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
  if (has_openorclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->openorclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.OrderUpdate)
  return target;
}

int OrderUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 TotalNumMessages = 2;
    if (has_totalnummessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnummessages());
    }

    // optional int32 MessageNumber = 3;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

    // optional string Symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string PreviousServerOrderID = 6;
    if (has_previousserverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previousserverorderid());
    }

    // optional string ServerOrderID = 7;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string ClientOrderID = 8;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ExchangeOrderID = 9;
    if (has_exchangeorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeorderid());
    }

    // optional .DTC_PB.OrderStatusEnum OrderStatus = 10;
    if (has_orderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orderstatus());
    }

    // optional .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
    if (has_orderupdatereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orderupdatereason());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType = 12;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }

    // optional .DTC_PB.BuySellEnum BuySell = 13;
    if (has_buysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
    }

    // optional double Price1 = 14;
    if (has_price1()) {
      total_size += 1 + 8;
    }

    // optional double Price2 = 15;
    if (has_price2()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 16;
    if (has_timeinforce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sfixed64 GoodTillDateTime = 17;
    if (has_goodtilldatetime()) {
      total_size += 2 + 8;
    }

    // optional double OrderQuantity = 18;
    if (has_orderquantity()) {
      total_size += 2 + 8;
    }

    // optional double FilledQuantity = 19;
    if (has_filledquantity()) {
      total_size += 2 + 8;
    }

    // optional double RemainingQuantity = 20;
    if (has_remainingquantity()) {
      total_size += 2 + 8;
    }

    // optional double AverageFillPrice = 21;
    if (has_averagefillprice()) {
      total_size += 2 + 8;
    }

    // optional double LastFillPrice = 22;
    if (has_lastfillprice()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 LastFillDateTime = 23;
    if (has_lastfilldatetime()) {
      total_size += 2 + 8;
    }

    // optional double LastFillQuantity = 24;
    if (has_lastfillquantity()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string LastFillExecutionID = 25;
    if (has_lastfillexecutionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastfillexecutionid());
    }

    // optional string TradeAccount = 26;
    if (has_tradeaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string InfoText = 27;
    if (has_infotext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infotext());
    }

    // optional uint32 NoOrders = 28;
    if (has_noorders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noorders());
    }

    // optional string ParentServerOrderID = 29;
    if (has_parentserverorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentserverorderid());
    }

    // optional string OCOLinkedOrderServerOrderID = 30;
    if (has_ocolinkedorderserverorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ocolinkedorderserverorderid());
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
    if (has_openorclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderUpdate::MergeFrom(const OrderUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_totalnummessages()) {
      set_totalnummessages(from.totalnummessages());
    }
    if (from.has_messagenumber()) {
      set_messagenumber(from.messagenumber());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_previousserverorderid()) {
      set_previousserverorderid(from.previousserverorderid());
    }
    if (from.has_serverorderid()) {
      set_serverorderid(from.serverorderid());
    }
    if (from.has_clientorderid()) {
      set_clientorderid(from.clientorderid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exchangeorderid()) {
      set_exchangeorderid(from.exchangeorderid());
    }
    if (from.has_orderstatus()) {
      set_orderstatus(from.orderstatus());
    }
    if (from.has_orderupdatereason()) {
      set_orderupdatereason(from.orderupdatereason());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_buysell()) {
      set_buysell(from.buysell());
    }
    if (from.has_price1()) {
      set_price1(from.price1());
    }
    if (from.has_price2()) {
      set_price2(from.price2());
    }
    if (from.has_timeinforce()) {
      set_timeinforce(from.timeinforce());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_goodtilldatetime()) {
      set_goodtilldatetime(from.goodtilldatetime());
    }
    if (from.has_orderquantity()) {
      set_orderquantity(from.orderquantity());
    }
    if (from.has_filledquantity()) {
      set_filledquantity(from.filledquantity());
    }
    if (from.has_remainingquantity()) {
      set_remainingquantity(from.remainingquantity());
    }
    if (from.has_averagefillprice()) {
      set_averagefillprice(from.averagefillprice());
    }
    if (from.has_lastfillprice()) {
      set_lastfillprice(from.lastfillprice());
    }
    if (from.has_lastfilldatetime()) {
      set_lastfilldatetime(from.lastfilldatetime());
    }
    if (from.has_lastfillquantity()) {
      set_lastfillquantity(from.lastfillquantity());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lastfillexecutionid()) {
      set_lastfillexecutionid(from.lastfillexecutionid());
    }
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_infotext()) {
      set_infotext(from.infotext());
    }
    if (from.has_noorders()) {
      set_noorders(from.noorders());
    }
    if (from.has_parentserverorderid()) {
      set_parentserverorderid(from.parentserverorderid());
    }
    if (from.has_ocolinkedorderserverorderid()) {
      set_ocolinkedorderserverorderid(from.ocolinkedorderserverorderid());
    }
    if (from.has_openorclose()) {
      set_openorclose(from.openorclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderUpdate::CopyFrom(const OrderUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdate::IsInitialized() const {

  return true;
}

void OrderUpdate::Swap(OrderUpdate* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(totalnummessages_, other->totalnummessages_);
    std::swap(messagenumber_, other->messagenumber_);
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(previousserverorderid_, other->previousserverorderid_);
    std::swap(serverorderid_, other->serverorderid_);
    std::swap(clientorderid_, other->clientorderid_);
    std::swap(exchangeorderid_, other->exchangeorderid_);
    std::swap(orderstatus_, other->orderstatus_);
    std::swap(orderupdatereason_, other->orderupdatereason_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(buysell_, other->buysell_);
    std::swap(price1_, other->price1_);
    std::swap(price2_, other->price2_);
    std::swap(timeinforce_, other->timeinforce_);
    std::swap(goodtilldatetime_, other->goodtilldatetime_);
    std::swap(orderquantity_, other->orderquantity_);
    std::swap(filledquantity_, other->filledquantity_);
    std::swap(remainingquantity_, other->remainingquantity_);
    std::swap(averagefillprice_, other->averagefillprice_);
    std::swap(lastfillprice_, other->lastfillprice_);
    std::swap(lastfilldatetime_, other->lastfilldatetime_);
    std::swap(lastfillquantity_, other->lastfillquantity_);
    std::swap(lastfillexecutionid_, other->lastfillexecutionid_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(infotext_, other->infotext_);
    std::swap(noorders_, other->noorders_);
    std::swap(parentserverorderid_, other->parentserverorderid_);
    std::swap(ocolinkedorderserverorderid_, other->ocolinkedorderserverorderid_);
    std::swap(openorclose_, other->openorclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderUpdate_descriptor_;
  metadata.reflection = OrderUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenOrdersReject::kRequestIDFieldNumber;
const int OpenOrdersReject::kRejectTextFieldNumber;
#endif  // !_MSC_VER

OpenOrdersReject::OpenOrdersReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.OpenOrdersReject)
}

void OpenOrdersReject::InitAsDefaultInstance() {
}

OpenOrdersReject::OpenOrdersReject(const OpenOrdersReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.OpenOrdersReject)
}

void OpenOrdersReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  rejecttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenOrdersReject::~OpenOrdersReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.OpenOrdersReject)
  SharedDtor();
}

void OpenOrdersReject::SharedDtor() {
  if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rejecttext_;
  }
  if (this != default_instance_) {
  }
}

void OpenOrdersReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenOrdersReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenOrdersReject_descriptor_;
}

const OpenOrdersReject& OpenOrdersReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

OpenOrdersReject* OpenOrdersReject::default_instance_ = NULL;

OpenOrdersReject* OpenOrdersReject::New() const {
  return new OpenOrdersReject;
}

void OpenOrdersReject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    requestid_ = 0;
    if (has_rejecttext()) {
      if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rejecttext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenOrdersReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.OpenOrdersReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RejectText;
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (tag == 18) {
         parse_RejectText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), this->rejecttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rejecttext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.OpenOrdersReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.OpenOrdersReject)
  return false;
#undef DO_
}

void OpenOrdersReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.OpenOrdersReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.OpenOrdersReject)
}

::google::protobuf::uint8* OpenOrdersReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.OpenOrdersReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.OpenOrdersReject)
  return target;
}

int OpenOrdersReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenOrdersReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenOrdersReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenOrdersReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenOrdersReject::MergeFrom(const OpenOrdersReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_rejecttext()) {
      set_rejecttext(from.rejecttext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenOrdersReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOrdersReject::CopyFrom(const OpenOrdersReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOrdersReject::IsInitialized() const {

  return true;
}

void OpenOrdersReject::Swap(OpenOrdersReject* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(rejecttext_, other->rejecttext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenOrdersReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenOrdersReject_descriptor_;
  metadata.reflection = OpenOrdersReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalOrderFillResponse::kRequestIDFieldNumber;
const int HistoricalOrderFillResponse::kTotalNumberMessagesFieldNumber;
const int HistoricalOrderFillResponse::kMessageNumberFieldNumber;
const int HistoricalOrderFillResponse::kSymbolFieldNumber;
const int HistoricalOrderFillResponse::kExchangeFieldNumber;
const int HistoricalOrderFillResponse::kServerOrderIDFieldNumber;
const int HistoricalOrderFillResponse::kBuySellFieldNumber;
const int HistoricalOrderFillResponse::kPriceFieldNumber;
const int HistoricalOrderFillResponse::kDateTimeFieldNumber;
const int HistoricalOrderFillResponse::kQuantityFieldNumber;
const int HistoricalOrderFillResponse::kUniqueExecutionIDFieldNumber;
const int HistoricalOrderFillResponse::kTradeAccountFieldNumber;
const int HistoricalOrderFillResponse::kOpenCloseFieldNumber;
const int HistoricalOrderFillResponse::kNoOrderFillsFieldNumber;
#endif  // !_MSC_VER

HistoricalOrderFillResponse::HistoricalOrderFillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalOrderFillResponse)
}

void HistoricalOrderFillResponse::InitAsDefaultInstance() {
}

HistoricalOrderFillResponse::HistoricalOrderFillResponse(const HistoricalOrderFillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalOrderFillResponse)
}

void HistoricalOrderFillResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  totalnumbermessages_ = 0;
  messagenumber_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buysell_ = 0;
  price_ = 0;
  datetime_ = GOOGLE_LONGLONG(0);
  quantity_ = 0;
  uniqueexecutionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openclose_ = 0;
  noorderfills_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalOrderFillResponse::~HistoricalOrderFillResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalOrderFillResponse)
  SharedDtor();
}

void HistoricalOrderFillResponse::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverorderid_;
  }
  if (uniqueexecutionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uniqueexecutionid_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (this != default_instance_) {
  }
}

void HistoricalOrderFillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalOrderFillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalOrderFillResponse_descriptor_;
}

const HistoricalOrderFillResponse& HistoricalOrderFillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalOrderFillResponse* HistoricalOrderFillResponse::default_instance_ = NULL;

HistoricalOrderFillResponse* HistoricalOrderFillResponse::New() const {
  return new HistoricalOrderFillResponse;
}

void HistoricalOrderFillResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoricalOrderFillResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(requestid_, totalnumbermessages_);
    ZR_(messagenumber_, buysell_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    if (has_serverorderid()) {
      if (serverorderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverorderid_->clear();
      }
    }
    price_ = 0;
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(datetime_, quantity_);
    ZR_(openclose_, noorderfills_);
    if (has_uniqueexecutionid()) {
      if (uniqueexecutionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uniqueexecutionid_->clear();
      }
    }
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalOrderFillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalOrderFillResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalNumberMessages;
        break;
      }

      // optional int32 TotalNumberMessages = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalNumberMessages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
          set_has_totalnumbermessages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MessageNumber;
        break;
      }

      // optional int32 MessageNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_MessageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
          set_has_messagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Symbol;
        break;
      }

      // optional string Symbol = 4;
      case 4: {
        if (tag == 34) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 5;
      case 5: {
        if (tag == 42) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ServerOrderID;
        break;
      }

      // optional string ServerOrderID = 6;
      case 6: {
        if (tag == 50) {
         parse_ServerOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), this->serverorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverorderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BuySell;
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell = 7;
      case 7: {
        if (tag == 56) {
         parse_BuySell:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_Price;
        break;
      }

      // optional double Price = 8;
      case 8: {
        if (tag == 65) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_DateTime;
        break;
      }

      // optional sfixed64 DateTime = 9;
      case 9: {
        if (tag == 73) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_Quantity;
        break;
      }

      // optional double Quantity = 10;
      case 10: {
        if (tag == 81) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_UniqueExecutionID;
        break;
      }

      // optional string UniqueExecutionID = 11;
      case 11: {
        if (tag == 90) {
         parse_UniqueExecutionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueexecutionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uniqueexecutionid().data(), this->uniqueexecutionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uniqueexecutionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 12;
      case 12: {
        if (tag == 98) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_OpenClose;
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
      case 13: {
        if (tag == 104) {
         parse_OpenClose:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_NoOrderFills;
        break;
      }

      // optional uint32 NoOrderFills = 14;
      case 14: {
        if (tag == 112) {
         parse_NoOrderFills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noorderfills_)));
          set_has_noorderfills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalOrderFillResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalOrderFillResponse)
  return false;
#undef DO_
}

void HistoricalOrderFillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalOrderFillResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional int32 TotalNumberMessages = 2;
  if (has_totalnumbermessages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalnumbermessages(), output);
  }

  // optional int32 MessageNumber = 3;
  if (has_messagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messagenumber(), output);
  }

  // optional string Symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // optional string Exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // optional string ServerOrderID = 6;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->serverorderid(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 7;
  if (has_buysell()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->buysell(), output);
  }

  // optional double Price = 8;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price(), output);
  }

  // optional sfixed64 DateTime = 9;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(9, this->datetime(), output);
  }

  // optional double Quantity = 10;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->quantity(), output);
  }

  // optional string UniqueExecutionID = 11;
  if (has_uniqueexecutionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uniqueexecutionid().data(), this->uniqueexecutionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uniqueexecutionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->uniqueexecutionid(), output);
  }

  // optional string TradeAccount = 12;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->tradeaccount(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
  if (has_openclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->openclose(), output);
  }

  // optional uint32 NoOrderFills = 14;
  if (has_noorderfills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->noorderfills(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalOrderFillResponse)
}

::google::protobuf::uint8* HistoricalOrderFillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalOrderFillResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional int32 TotalNumberMessages = 2;
  if (has_totalnumbermessages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalnumbermessages(), target);
  }

  // optional int32 MessageNumber = 3;
  if (has_messagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messagenumber(), target);
  }

  // optional string Symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional string Exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // optional string ServerOrderID = 6;
  if (has_serverorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), this->serverorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverorderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->serverorderid(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 7;
  if (has_buysell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->buysell(), target);
  }

  // optional double Price = 8;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->price(), target);
  }

  // optional sfixed64 DateTime = 9;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(9, this->datetime(), target);
  }

  // optional double Quantity = 10;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->quantity(), target);
  }

  // optional string UniqueExecutionID = 11;
  if (has_uniqueexecutionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uniqueexecutionid().data(), this->uniqueexecutionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uniqueexecutionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->uniqueexecutionid(), target);
  }

  // optional string TradeAccount = 12;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->tradeaccount(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
  if (has_openclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->openclose(), target);
  }

  // optional uint32 NoOrderFills = 14;
  if (has_noorderfills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->noorderfills(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalOrderFillResponse)
  return target;
}

int HistoricalOrderFillResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 TotalNumberMessages = 2;
    if (has_totalnumbermessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumbermessages());
    }

    // optional int32 MessageNumber = 3;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

    // optional string Symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string ServerOrderID = 6;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional .DTC_PB.BuySellEnum BuySell = 7;
    if (has_buysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
    }

    // optional double Price = 8;
    if (has_price()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed64 DateTime = 9;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional double Quantity = 10;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional string UniqueExecutionID = 11;
    if (has_uniqueexecutionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueexecutionid());
    }

    // optional string TradeAccount = 12;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
    if (has_openclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openclose());
    }

    // optional uint32 NoOrderFills = 14;
    if (has_noorderfills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noorderfills());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalOrderFillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalOrderFillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalOrderFillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalOrderFillResponse::MergeFrom(const HistoricalOrderFillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_totalnumbermessages()) {
      set_totalnumbermessages(from.totalnumbermessages());
    }
    if (from.has_messagenumber()) {
      set_messagenumber(from.messagenumber());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_serverorderid()) {
      set_serverorderid(from.serverorderid());
    }
    if (from.has_buysell()) {
      set_buysell(from.buysell());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_uniqueexecutionid()) {
      set_uniqueexecutionid(from.uniqueexecutionid());
    }
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_openclose()) {
      set_openclose(from.openclose());
    }
    if (from.has_noorderfills()) {
      set_noorderfills(from.noorderfills());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalOrderFillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalOrderFillResponse::CopyFrom(const HistoricalOrderFillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalOrderFillResponse::IsInitialized() const {

  return true;
}

void HistoricalOrderFillResponse::Swap(HistoricalOrderFillResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(totalnumbermessages_, other->totalnumbermessages_);
    std::swap(messagenumber_, other->messagenumber_);
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(serverorderid_, other->serverorderid_);
    std::swap(buysell_, other->buysell_);
    std::swap(price_, other->price_);
    std::swap(datetime_, other->datetime_);
    std::swap(quantity_, other->quantity_);
    std::swap(uniqueexecutionid_, other->uniqueexecutionid_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(openclose_, other->openclose_);
    std::swap(noorderfills_, other->noorderfills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalOrderFillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalOrderFillResponse_descriptor_;
  metadata.reflection = HistoricalOrderFillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PositionUpdate::kRequestIDFieldNumber;
const int PositionUpdate::kTotalNumberMessagesFieldNumber;
const int PositionUpdate::kMessageNumberFieldNumber;
const int PositionUpdate::kSymbolFieldNumber;
const int PositionUpdate::kExchangeFieldNumber;
const int PositionUpdate::kQuantityFieldNumber;
const int PositionUpdate::kAveragePriceFieldNumber;
const int PositionUpdate::kPositionIdentifierFieldNumber;
const int PositionUpdate::kTradeAccountFieldNumber;
const int PositionUpdate::kNoPositionsFieldNumber;
const int PositionUpdate::kUnsolicitedFieldNumber;
#endif  // !_MSC_VER

PositionUpdate::PositionUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.PositionUpdate)
}

void PositionUpdate::InitAsDefaultInstance() {
}

PositionUpdate::PositionUpdate(const PositionUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.PositionUpdate)
}

void PositionUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  totalnumbermessages_ = 0;
  messagenumber_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0;
  averageprice_ = 0;
  positionidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nopositions_ = 0u;
  unsolicited_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionUpdate::~PositionUpdate() {
  // @@protoc_insertion_point(destructor:DTC_PB.PositionUpdate)
  SharedDtor();
}

void PositionUpdate::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (positionidentifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete positionidentifier_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (this != default_instance_) {
  }
}

void PositionUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionUpdate_descriptor_;
}

const PositionUpdate& PositionUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

PositionUpdate* PositionUpdate::default_instance_ = NULL;

PositionUpdate* PositionUpdate::New() const {
  return new PositionUpdate;
}

void PositionUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PositionUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(requestid_, totalnumbermessages_);
    ZR_(quantity_, messagenumber_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    averageprice_ = 0;
    if (has_positionidentifier()) {
      if (positionidentifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        positionidentifier_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
    nopositions_ = 0u;
    unsolicited_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.PositionUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalNumberMessages;
        break;
      }

      // optional int32 TotalNumberMessages = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalNumberMessages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
          set_has_totalnumbermessages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MessageNumber;
        break;
      }

      // optional int32 MessageNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_MessageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
          set_has_messagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Symbol;
        break;
      }

      // optional string Symbol = 4;
      case 4: {
        if (tag == 34) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 5;
      case 5: {
        if (tag == 42) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_Quantity;
        break;
      }

      // optional double Quantity = 6;
      case 6: {
        if (tag == 49) {
         parse_Quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_AveragePrice;
        break;
      }

      // optional double AveragePrice = 7;
      case 7: {
        if (tag == 57) {
         parse_AveragePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averageprice_)));
          set_has_averageprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_PositionIdentifier;
        break;
      }

      // optional string PositionIdentifier = 8;
      case 8: {
        if (tag == 66) {
         parse_PositionIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positionidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->positionidentifier().data(), this->positionidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "positionidentifier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 9;
      case 9: {
        if (tag == 74) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_NoPositions;
        break;
      }

      // optional uint32 NoPositions = 10;
      case 10: {
        if (tag == 80) {
         parse_NoPositions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nopositions_)));
          set_has_nopositions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Unsolicited;
        break;
      }

      // optional uint32 Unsolicited = 11;
      case 11: {
        if (tag == 88) {
         parse_Unsolicited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsolicited_)));
          set_has_unsolicited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.PositionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.PositionUpdate)
  return false;
#undef DO_
}

void PositionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.PositionUpdate)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional int32 TotalNumberMessages = 2;
  if (has_totalnumbermessages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalnumbermessages(), output);
  }

  // optional int32 MessageNumber = 3;
  if (has_messagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messagenumber(), output);
  }

  // optional string Symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // optional string Exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // optional double Quantity = 6;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->quantity(), output);
  }

  // optional double AveragePrice = 7;
  if (has_averageprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->averageprice(), output);
  }

  // optional string PositionIdentifier = 8;
  if (has_positionidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->positionidentifier().data(), this->positionidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "positionidentifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->positionidentifier(), output);
  }

  // optional string TradeAccount = 9;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tradeaccount(), output);
  }

  // optional uint32 NoPositions = 10;
  if (has_nopositions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nopositions(), output);
  }

  // optional uint32 Unsolicited = 11;
  if (has_unsolicited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unsolicited(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.PositionUpdate)
}

::google::protobuf::uint8* PositionUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.PositionUpdate)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional int32 TotalNumberMessages = 2;
  if (has_totalnumbermessages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalnumbermessages(), target);
  }

  // optional int32 MessageNumber = 3;
  if (has_messagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messagenumber(), target);
  }

  // optional string Symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional string Exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // optional double Quantity = 6;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->quantity(), target);
  }

  // optional double AveragePrice = 7;
  if (has_averageprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->averageprice(), target);
  }

  // optional string PositionIdentifier = 8;
  if (has_positionidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->positionidentifier().data(), this->positionidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "positionidentifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->positionidentifier(), target);
  }

  // optional string TradeAccount = 9;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tradeaccount(), target);
  }

  // optional uint32 NoPositions = 10;
  if (has_nopositions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->nopositions(), target);
  }

  // optional uint32 Unsolicited = 11;
  if (has_unsolicited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->unsolicited(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.PositionUpdate)
  return target;
}

int PositionUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 TotalNumberMessages = 2;
    if (has_totalnumbermessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumbermessages());
    }

    // optional int32 MessageNumber = 3;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

    // optional string Symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional double Quantity = 6;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional double AveragePrice = 7;
    if (has_averageprice()) {
      total_size += 1 + 8;
    }

    // optional string PositionIdentifier = 8;
    if (has_positionidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positionidentifier());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string TradeAccount = 9;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional uint32 NoPositions = 10;
    if (has_nopositions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nopositions());
    }

    // optional uint32 Unsolicited = 11;
    if (has_unsolicited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unsolicited());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionUpdate::MergeFrom(const PositionUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_totalnumbermessages()) {
      set_totalnumbermessages(from.totalnumbermessages());
    }
    if (from.has_messagenumber()) {
      set_messagenumber(from.messagenumber());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_averageprice()) {
      set_averageprice(from.averageprice());
    }
    if (from.has_positionidentifier()) {
      set_positionidentifier(from.positionidentifier());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_nopositions()) {
      set_nopositions(from.nopositions());
    }
    if (from.has_unsolicited()) {
      set_unsolicited(from.unsolicited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionUpdate::CopyFrom(const PositionUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionUpdate::IsInitialized() const {

  return true;
}

void PositionUpdate::Swap(PositionUpdate* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(totalnumbermessages_, other->totalnumbermessages_);
    std::swap(messagenumber_, other->messagenumber_);
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(quantity_, other->quantity_);
    std::swap(averageprice_, other->averageprice_);
    std::swap(positionidentifier_, other->positionidentifier_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(nopositions_, other->nopositions_);
    std::swap(unsolicited_, other->unsolicited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionUpdate_descriptor_;
  metadata.reflection = PositionUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeAccountsRequest::kRequestIDFieldNumber;
#endif  // !_MSC_VER

TradeAccountsRequest::TradeAccountsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.TradeAccountsRequest)
}

void TradeAccountsRequest::InitAsDefaultInstance() {
}

TradeAccountsRequest::TradeAccountsRequest(const TradeAccountsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.TradeAccountsRequest)
}

void TradeAccountsRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeAccountsRequest::~TradeAccountsRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.TradeAccountsRequest)
  SharedDtor();
}

void TradeAccountsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeAccountsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeAccountsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeAccountsRequest_descriptor_;
}

const TradeAccountsRequest& TradeAccountsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

TradeAccountsRequest* TradeAccountsRequest::default_instance_ = NULL;

TradeAccountsRequest* TradeAccountsRequest::New() const {
  return new TradeAccountsRequest;
}

void TradeAccountsRequest::Clear() {
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeAccountsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.TradeAccountsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.TradeAccountsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.TradeAccountsRequest)
  return false;
#undef DO_
}

void TradeAccountsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.TradeAccountsRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.TradeAccountsRequest)
}

::google::protobuf::uint8* TradeAccountsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.TradeAccountsRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.TradeAccountsRequest)
  return target;
}

int TradeAccountsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeAccountsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeAccountsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeAccountsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeAccountsRequest::MergeFrom(const TradeAccountsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeAccountsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeAccountsRequest::CopyFrom(const TradeAccountsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeAccountsRequest::IsInitialized() const {

  return true;
}

void TradeAccountsRequest::Swap(TradeAccountsRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeAccountsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeAccountsRequest_descriptor_;
  metadata.reflection = TradeAccountsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeAccountResponse::kTotalNumberMessagesFieldNumber;
const int TradeAccountResponse::kMessageNumberFieldNumber;
const int TradeAccountResponse::kTradeAccountFieldNumber;
const int TradeAccountResponse::kRequestIDFieldNumber;
#endif  // !_MSC_VER

TradeAccountResponse::TradeAccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.TradeAccountResponse)
}

void TradeAccountResponse::InitAsDefaultInstance() {
}

TradeAccountResponse::TradeAccountResponse(const TradeAccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.TradeAccountResponse)
}

void TradeAccountResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  totalnumbermessages_ = 0;
  messagenumber_ = 0;
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeAccountResponse::~TradeAccountResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.TradeAccountResponse)
  SharedDtor();
}

void TradeAccountResponse::SharedDtor() {
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (this != default_instance_) {
  }
}

void TradeAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeAccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeAccountResponse_descriptor_;
}

const TradeAccountResponse& TradeAccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

TradeAccountResponse* TradeAccountResponse::default_instance_ = NULL;

TradeAccountResponse* TradeAccountResponse::New() const {
  return new TradeAccountResponse;
}

void TradeAccountResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradeAccountResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(totalnumbermessages_, messagenumber_);
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
    requestid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.TradeAccountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TotalNumberMessages = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
          set_has_totalnumbermessages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MessageNumber;
        break;
      }

      // optional int32 MessageNumber = 2;
      case 2: {
        if (tag == 16) {
         parse_MessageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
          set_has_messagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 3;
      case 3: {
        if (tag == 26) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RequestID;
        break;
      }

      // optional int32 RequestID = 4;
      case 4: {
        if (tag == 32) {
         parse_RequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.TradeAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.TradeAccountResponse)
  return false;
#undef DO_
}

void TradeAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.TradeAccountResponse)
  // optional int32 TotalNumberMessages = 1;
  if (has_totalnumbermessages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalnumbermessages(), output);
  }

  // optional int32 MessageNumber = 2;
  if (has_messagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messagenumber(), output);
  }

  // optional string TradeAccount = 3;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeaccount(), output);
  }

  // optional int32 RequestID = 4;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->requestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.TradeAccountResponse)
}

::google::protobuf::uint8* TradeAccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.TradeAccountResponse)
  // optional int32 TotalNumberMessages = 1;
  if (has_totalnumbermessages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalnumbermessages(), target);
  }

  // optional int32 MessageNumber = 2;
  if (has_messagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messagenumber(), target);
  }

  // optional string TradeAccount = 3;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeaccount(), target);
  }

  // optional int32 RequestID = 4;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->requestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.TradeAccountResponse)
  return target;
}

int TradeAccountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TotalNumberMessages = 1;
    if (has_totalnumbermessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumbermessages());
    }

    // optional int32 MessageNumber = 2;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

    // optional string TradeAccount = 3;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional int32 RequestID = 4;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeAccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeAccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeAccountResponse::MergeFrom(const TradeAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalnumbermessages()) {
      set_totalnumbermessages(from.totalnumbermessages());
    }
    if (from.has_messagenumber()) {
      set_messagenumber(from.messagenumber());
    }
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeAccountResponse::CopyFrom(const TradeAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeAccountResponse::IsInitialized() const {

  return true;
}

void TradeAccountResponse::Swap(TradeAccountResponse* other) {
  if (other != this) {
    std::swap(totalnumbermessages_, other->totalnumbermessages_);
    std::swap(messagenumber_, other->messagenumber_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeAccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeAccountResponse_descriptor_;
  metadata.reflection = TradeAccountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeListRequest::kRequestIDFieldNumber;
#endif  // !_MSC_VER

ExchangeListRequest::ExchangeListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.ExchangeListRequest)
}

void ExchangeListRequest::InitAsDefaultInstance() {
}

ExchangeListRequest::ExchangeListRequest(const ExchangeListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.ExchangeListRequest)
}

void ExchangeListRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeListRequest::~ExchangeListRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.ExchangeListRequest)
  SharedDtor();
}

void ExchangeListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeListRequest_descriptor_;
}

const ExchangeListRequest& ExchangeListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

ExchangeListRequest* ExchangeListRequest::default_instance_ = NULL;

ExchangeListRequest* ExchangeListRequest::New() const {
  return new ExchangeListRequest;
}

void ExchangeListRequest::Clear() {
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.ExchangeListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.ExchangeListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.ExchangeListRequest)
  return false;
#undef DO_
}

void ExchangeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.ExchangeListRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.ExchangeListRequest)
}

::google::protobuf::uint8* ExchangeListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.ExchangeListRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.ExchangeListRequest)
  return target;
}

int ExchangeListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeListRequest::MergeFrom(const ExchangeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeListRequest::CopyFrom(const ExchangeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeListRequest::IsInitialized() const {

  return true;
}

void ExchangeListRequest::Swap(ExchangeListRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeListRequest_descriptor_;
  metadata.reflection = ExchangeListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeListResponse::kRequestIDFieldNumber;
const int ExchangeListResponse::kExchangeFieldNumber;
const int ExchangeListResponse::kIsFinalMessageFieldNumber;
const int ExchangeListResponse::kDescriptionFieldNumber;
#endif  // !_MSC_VER

ExchangeListResponse::ExchangeListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.ExchangeListResponse)
}

void ExchangeListResponse::InitAsDefaultInstance() {
}

ExchangeListResponse::ExchangeListResponse(const ExchangeListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.ExchangeListResponse)
}

void ExchangeListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isfinalmessage_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeListResponse::~ExchangeListResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.ExchangeListResponse)
  SharedDtor();
}

void ExchangeListResponse::SharedDtor() {
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void ExchangeListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeListResponse_descriptor_;
}

const ExchangeListResponse& ExchangeListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

ExchangeListResponse* ExchangeListResponse::default_instance_ = NULL;

ExchangeListResponse* ExchangeListResponse::New() const {
  return new ExchangeListResponse;
}

void ExchangeListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExchangeListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(requestid_, isfinalmessage_);
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.ExchangeListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsFinalMessage;
        break;
      }

      // optional uint32 IsFinalMessage = 3;
      case 3: {
        if (tag == 24) {
         parse_IsFinalMessage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalmessage_)));
          set_has_isfinalmessage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Description;
        break;
      }

      // optional string Description = 4;
      case 4: {
        if (tag == 34) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.ExchangeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.ExchangeListResponse)
  return false;
#undef DO_
}

void ExchangeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.ExchangeListResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional uint32 IsFinalMessage = 3;
  if (has_isfinalmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isfinalmessage(), output);
  }

  // optional string Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.ExchangeListResponse)
}

::google::protobuf::uint8* ExchangeListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.ExchangeListResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional uint32 IsFinalMessage = 3;
  if (has_isfinalmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isfinalmessage(), target);
  }

  // optional string Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.ExchangeListResponse)
  return target;
}

int ExchangeListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional uint32 IsFinalMessage = 3;
    if (has_isfinalmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalmessage());
    }

    // optional string Description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeListResponse::MergeFrom(const ExchangeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_isfinalmessage()) {
      set_isfinalmessage(from.isfinalmessage());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeListResponse::CopyFrom(const ExchangeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeListResponse::IsInitialized() const {

  return true;
}

void ExchangeListResponse::Swap(ExchangeListResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(exchange_, other->exchange_);
    std::swap(isfinalmessage_, other->isfinalmessage_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeListResponse_descriptor_;
  metadata.reflection = ExchangeListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolsForExchangeRequest::kRequestIDFieldNumber;
const int SymbolsForExchangeRequest::kExchangeFieldNumber;
const int SymbolsForExchangeRequest::kSecurityTypeFieldNumber;
#endif  // !_MSC_VER

SymbolsForExchangeRequest::SymbolsForExchangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SymbolsForExchangeRequest)
}

void SymbolsForExchangeRequest::InitAsDefaultInstance() {
}

SymbolsForExchangeRequest::SymbolsForExchangeRequest(const SymbolsForExchangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SymbolsForExchangeRequest)
}

void SymbolsForExchangeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolsForExchangeRequest::~SymbolsForExchangeRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SymbolsForExchangeRequest)
  SharedDtor();
}

void SymbolsForExchangeRequest::SharedDtor() {
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (this != default_instance_) {
  }
}

void SymbolsForExchangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolsForExchangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolsForExchangeRequest_descriptor_;
}

const SymbolsForExchangeRequest& SymbolsForExchangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SymbolsForExchangeRequest* SymbolsForExchangeRequest::default_instance_ = NULL;

SymbolsForExchangeRequest* SymbolsForExchangeRequest::New() const {
  return new SymbolsForExchangeRequest;
}

void SymbolsForExchangeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SymbolsForExchangeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(requestid_, securitytype_);
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolsForExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SymbolsForExchangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SecurityType;
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
      case 3: {
        if (tag == 24) {
         parse_SecurityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SymbolsForExchangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SymbolsForExchangeRequest)
  return false;
#undef DO_
}

void SymbolsForExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SymbolsForExchangeRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->securitytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SymbolsForExchangeRequest)
}

::google::protobuf::uint8* SymbolsForExchangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SymbolsForExchangeRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->securitytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SymbolsForExchangeRequest)
  return target;
}

int SymbolsForExchangeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolsForExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolsForExchangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolsForExchangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolsForExchangeRequest::MergeFrom(const SymbolsForExchangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolsForExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolsForExchangeRequest::CopyFrom(const SymbolsForExchangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolsForExchangeRequest::IsInitialized() const {

  return true;
}

void SymbolsForExchangeRequest::Swap(SymbolsForExchangeRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(exchange_, other->exchange_);
    std::swap(securitytype_, other->securitytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolsForExchangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolsForExchangeRequest_descriptor_;
  metadata.reflection = SymbolsForExchangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnderlyingSymbolsForExchangeRequest::kRequestIDFieldNumber;
const int UnderlyingSymbolsForExchangeRequest::kExchangeFieldNumber;
const int UnderlyingSymbolsForExchangeRequest::kSecurityTypeFieldNumber;
#endif  // !_MSC_VER

UnderlyingSymbolsForExchangeRequest::UnderlyingSymbolsForExchangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.UnderlyingSymbolsForExchangeRequest)
}

void UnderlyingSymbolsForExchangeRequest::InitAsDefaultInstance() {
}

UnderlyingSymbolsForExchangeRequest::UnderlyingSymbolsForExchangeRequest(const UnderlyingSymbolsForExchangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.UnderlyingSymbolsForExchangeRequest)
}

void UnderlyingSymbolsForExchangeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnderlyingSymbolsForExchangeRequest::~UnderlyingSymbolsForExchangeRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  SharedDtor();
}

void UnderlyingSymbolsForExchangeRequest::SharedDtor() {
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (this != default_instance_) {
  }
}

void UnderlyingSymbolsForExchangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnderlyingSymbolsForExchangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnderlyingSymbolsForExchangeRequest_descriptor_;
}

const UnderlyingSymbolsForExchangeRequest& UnderlyingSymbolsForExchangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

UnderlyingSymbolsForExchangeRequest* UnderlyingSymbolsForExchangeRequest::default_instance_ = NULL;

UnderlyingSymbolsForExchangeRequest* UnderlyingSymbolsForExchangeRequest::New() const {
  return new UnderlyingSymbolsForExchangeRequest;
}

void UnderlyingSymbolsForExchangeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnderlyingSymbolsForExchangeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(requestid_, securitytype_);
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnderlyingSymbolsForExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SecurityType;
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
      case 3: {
        if (tag == 24) {
         parse_SecurityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  return false;
#undef DO_
}

void UnderlyingSymbolsForExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->securitytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.UnderlyingSymbolsForExchangeRequest)
}

::google::protobuf::uint8* UnderlyingSymbolsForExchangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->securitytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  return target;
}

int UnderlyingSymbolsForExchangeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnderlyingSymbolsForExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnderlyingSymbolsForExchangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnderlyingSymbolsForExchangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnderlyingSymbolsForExchangeRequest::MergeFrom(const UnderlyingSymbolsForExchangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnderlyingSymbolsForExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingSymbolsForExchangeRequest::CopyFrom(const UnderlyingSymbolsForExchangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingSymbolsForExchangeRequest::IsInitialized() const {

  return true;
}

void UnderlyingSymbolsForExchangeRequest::Swap(UnderlyingSymbolsForExchangeRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(exchange_, other->exchange_);
    std::swap(securitytype_, other->securitytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnderlyingSymbolsForExchangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnderlyingSymbolsForExchangeRequest_descriptor_;
  metadata.reflection = UnderlyingSymbolsForExchangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolsForUnderlyingRequest::kRequestIDFieldNumber;
const int SymbolsForUnderlyingRequest::kUnderlyingSymbolFieldNumber;
const int SymbolsForUnderlyingRequest::kExchangeFieldNumber;
const int SymbolsForUnderlyingRequest::kSecurityTypeFieldNumber;
#endif  // !_MSC_VER

SymbolsForUnderlyingRequest::SymbolsForUnderlyingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SymbolsForUnderlyingRequest)
}

void SymbolsForUnderlyingRequest::InitAsDefaultInstance() {
}

SymbolsForUnderlyingRequest::SymbolsForUnderlyingRequest(const SymbolsForUnderlyingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SymbolsForUnderlyingRequest)
}

void SymbolsForUnderlyingRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  underlyingsymbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolsForUnderlyingRequest::~SymbolsForUnderlyingRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SymbolsForUnderlyingRequest)
  SharedDtor();
}

void SymbolsForUnderlyingRequest::SharedDtor() {
  if (underlyingsymbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete underlyingsymbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (this != default_instance_) {
  }
}

void SymbolsForUnderlyingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolsForUnderlyingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolsForUnderlyingRequest_descriptor_;
}

const SymbolsForUnderlyingRequest& SymbolsForUnderlyingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SymbolsForUnderlyingRequest* SymbolsForUnderlyingRequest::default_instance_ = NULL;

SymbolsForUnderlyingRequest* SymbolsForUnderlyingRequest::New() const {
  return new SymbolsForUnderlyingRequest;
}

void SymbolsForUnderlyingRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SymbolsForUnderlyingRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(requestid_, securitytype_);
    if (has_underlyingsymbol()) {
      if (underlyingsymbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        underlyingsymbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolsForUnderlyingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SymbolsForUnderlyingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnderlyingSymbol;
        break;
      }

      // optional string UnderlyingSymbol = 2;
      case 2: {
        if (tag == 18) {
         parse_UnderlyingSymbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyingsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlyingsymbol().data(), this->underlyingsymbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "underlyingsymbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (tag == 26) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SecurityType;
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
      case 4: {
        if (tag == 32) {
         parse_SecurityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SymbolsForUnderlyingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SymbolsForUnderlyingRequest)
  return false;
#undef DO_
}

void SymbolsForUnderlyingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SymbolsForUnderlyingRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string UnderlyingSymbol = 2;
  if (has_underlyingsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), this->underlyingsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlyingsymbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->underlyingsymbol(), output);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->securitytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SymbolsForUnderlyingRequest)
}

::google::protobuf::uint8* SymbolsForUnderlyingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SymbolsForUnderlyingRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string UnderlyingSymbol = 2;
  if (has_underlyingsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), this->underlyingsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlyingsymbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->underlyingsymbol(), target);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->securitytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SymbolsForUnderlyingRequest)
  return target;
}

int SymbolsForUnderlyingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string UnderlyingSymbol = 2;
    if (has_underlyingsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlyingsymbol());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolsForUnderlyingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolsForUnderlyingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolsForUnderlyingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolsForUnderlyingRequest::MergeFrom(const SymbolsForUnderlyingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_underlyingsymbol()) {
      set_underlyingsymbol(from.underlyingsymbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolsForUnderlyingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolsForUnderlyingRequest::CopyFrom(const SymbolsForUnderlyingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolsForUnderlyingRequest::IsInitialized() const {

  return true;
}

void SymbolsForUnderlyingRequest::Swap(SymbolsForUnderlyingRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(underlyingsymbol_, other->underlyingsymbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(securitytype_, other->securitytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolsForUnderlyingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolsForUnderlyingRequest_descriptor_;
  metadata.reflection = SymbolsForUnderlyingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolSearchRequest::kRequestIDFieldNumber;
const int SymbolSearchRequest::kSearchTextFieldNumber;
const int SymbolSearchRequest::kExchangeFieldNumber;
const int SymbolSearchRequest::kSecurityTypeFieldNumber;
const int SymbolSearchRequest::kSearchTypeFieldNumber;
#endif  // !_MSC_VER

SymbolSearchRequest::SymbolSearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SymbolSearchRequest)
}

void SymbolSearchRequest::InitAsDefaultInstance() {
}

SymbolSearchRequest::SymbolSearchRequest(const SymbolSearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SymbolSearchRequest)
}

void SymbolSearchRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  searchtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_ = 0;
  searchtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolSearchRequest::~SymbolSearchRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SymbolSearchRequest)
  SharedDtor();
}

void SymbolSearchRequest::SharedDtor() {
  if (searchtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchtext_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (this != default_instance_) {
  }
}

void SymbolSearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolSearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolSearchRequest_descriptor_;
}

const SymbolSearchRequest& SymbolSearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SymbolSearchRequest* SymbolSearchRequest::default_instance_ = NULL;

SymbolSearchRequest* SymbolSearchRequest::New() const {
  return new SymbolSearchRequest;
}

void SymbolSearchRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SymbolSearchRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(requestid_, securitytype_);
    if (has_searchtext()) {
      if (searchtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        searchtext_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    searchtype_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolSearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SymbolSearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SearchText;
        break;
      }

      // optional string SearchText = 2;
      case 2: {
        if (tag == 18) {
         parse_SearchText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchtext().data(), this->searchtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "searchtext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (tag == 26) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SecurityType;
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
      case 4: {
        if (tag == 32) {
         parse_SecurityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SearchType;
        break;
      }

      // optional .DTC_PB.SearchTypeEnum SearchType = 5;
      case 5: {
        if (tag == 40) {
         parse_SearchType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SearchTypeEnum_IsValid(value)) {
            set_searchtype(static_cast< ::DTC_PB::SearchTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SymbolSearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SymbolSearchRequest)
  return false;
#undef DO_
}

void SymbolSearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SymbolSearchRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string SearchText = 2;
  if (has_searchtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchtext().data(), this->searchtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchtext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->searchtext(), output);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->securitytype(), output);
  }

  // optional .DTC_PB.SearchTypeEnum SearchType = 5;
  if (has_searchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->searchtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SymbolSearchRequest)
}

::google::protobuf::uint8* SymbolSearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SymbolSearchRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string SearchText = 2;
  if (has_searchtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchtext().data(), this->searchtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchtext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->searchtext(), target);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->securitytype(), target);
  }

  // optional .DTC_PB.SearchTypeEnum SearchType = 5;
  if (has_searchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->searchtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SymbolSearchRequest)
  return target;
}

int SymbolSearchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string SearchText = 2;
    if (has_searchtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchtext());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

    // optional .DTC_PB.SearchTypeEnum SearchType = 5;
    if (has_searchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->searchtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolSearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolSearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolSearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolSearchRequest::MergeFrom(const SymbolSearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_searchtext()) {
      set_searchtext(from.searchtext());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
    if (from.has_searchtype()) {
      set_searchtype(from.searchtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolSearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolSearchRequest::CopyFrom(const SymbolSearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolSearchRequest::IsInitialized() const {

  return true;
}

void SymbolSearchRequest::Swap(SymbolSearchRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(searchtext_, other->searchtext_);
    std::swap(exchange_, other->exchange_);
    std::swap(securitytype_, other->securitytype_);
    std::swap(searchtype_, other->searchtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolSearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolSearchRequest_descriptor_;
  metadata.reflection = SymbolSearchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityDefinitionForSymbolRequest::kRequestIDFieldNumber;
const int SecurityDefinitionForSymbolRequest::kSymbolFieldNumber;
const int SecurityDefinitionForSymbolRequest::kExchangeFieldNumber;
#endif  // !_MSC_VER

SecurityDefinitionForSymbolRequest::SecurityDefinitionForSymbolRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SecurityDefinitionForSymbolRequest)
}

void SecurityDefinitionForSymbolRequest::InitAsDefaultInstance() {
}

SecurityDefinitionForSymbolRequest::SecurityDefinitionForSymbolRequest(const SecurityDefinitionForSymbolRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SecurityDefinitionForSymbolRequest)
}

void SecurityDefinitionForSymbolRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityDefinitionForSymbolRequest::~SecurityDefinitionForSymbolRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SecurityDefinitionForSymbolRequest)
  SharedDtor();
}

void SecurityDefinitionForSymbolRequest::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (this != default_instance_) {
  }
}

void SecurityDefinitionForSymbolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityDefinitionForSymbolRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityDefinitionForSymbolRequest_descriptor_;
}

const SecurityDefinitionForSymbolRequest& SecurityDefinitionForSymbolRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SecurityDefinitionForSymbolRequest* SecurityDefinitionForSymbolRequest::default_instance_ = NULL;

SecurityDefinitionForSymbolRequest* SecurityDefinitionForSymbolRequest::New() const {
  return new SecurityDefinitionForSymbolRequest;
}

void SecurityDefinitionForSymbolRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    requestid_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityDefinitionForSymbolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Symbol;
        break;
      }

      // optional string Symbol = 2;
      case 2: {
        if (tag == 18) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (tag == 26) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SecurityDefinitionForSymbolRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SecurityDefinitionForSymbolRequest)
  return false;
#undef DO_
}

void SecurityDefinitionForSymbolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SecurityDefinitionForSymbolRequest)
}

::google::protobuf::uint8* SecurityDefinitionForSymbolRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SecurityDefinitionForSymbolRequest)
  return target;
}

int SecurityDefinitionForSymbolRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityDefinitionForSymbolRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityDefinitionForSymbolRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityDefinitionForSymbolRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityDefinitionForSymbolRequest::MergeFrom(const SecurityDefinitionForSymbolRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityDefinitionForSymbolRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionForSymbolRequest::CopyFrom(const SecurityDefinitionForSymbolRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionForSymbolRequest::IsInitialized() const {

  return true;
}

void SecurityDefinitionForSymbolRequest::Swap(SecurityDefinitionForSymbolRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityDefinitionForSymbolRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityDefinitionForSymbolRequest_descriptor_;
  metadata.reflection = SecurityDefinitionForSymbolRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityDefinitionResponse::kRequestIDFieldNumber;
const int SecurityDefinitionResponse::kSymbolFieldNumber;
const int SecurityDefinitionResponse::kExchangeFieldNumber;
const int SecurityDefinitionResponse::kSecurityTypeFieldNumber;
const int SecurityDefinitionResponse::kDescriptionFieldNumber;
const int SecurityDefinitionResponse::kMinPriceIncrementFieldNumber;
const int SecurityDefinitionResponse::kPriceDisplayFormatFieldNumber;
const int SecurityDefinitionResponse::kCurrencyValuePerIncrementFieldNumber;
const int SecurityDefinitionResponse::kIsFinalMessageFieldNumber;
const int SecurityDefinitionResponse::kFloatToIntPriceMultiplierFieldNumber;
const int SecurityDefinitionResponse::kIntToFloatPriceDivisorFieldNumber;
const int SecurityDefinitionResponse::kUnderlyingSymbolFieldNumber;
const int SecurityDefinitionResponse::kUpdatesBidAskOnlyFieldNumber;
const int SecurityDefinitionResponse::kStrikePriceFieldNumber;
const int SecurityDefinitionResponse::kPutOrCallFieldNumber;
const int SecurityDefinitionResponse::kShortInterestFieldNumber;
const int SecurityDefinitionResponse::kSecurityExpirationDateFieldNumber;
const int SecurityDefinitionResponse::kBuyRolloverInterestFieldNumber;
const int SecurityDefinitionResponse::kSellRolloverInterestFieldNumber;
const int SecurityDefinitionResponse::kEarningsPerShareFieldNumber;
const int SecurityDefinitionResponse::kSharesOutstandingFieldNumber;
const int SecurityDefinitionResponse::kIntToFloatQuantityDivisorFieldNumber;
#endif  // !_MSC_VER

SecurityDefinitionResponse::SecurityDefinitionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SecurityDefinitionResponse)
}

void SecurityDefinitionResponse::InitAsDefaultInstance() {
}

SecurityDefinitionResponse::SecurityDefinitionResponse(const SecurityDefinitionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SecurityDefinitionResponse)
}

void SecurityDefinitionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitytype_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minpriceincrement_ = 0;
  pricedisplayformat_ = -1;
  currencyvalueperincrement_ = 0;
  isfinalmessage_ = 0u;
  floattointpricemultiplier_ = 0;
  inttofloatpricedivisor_ = 0;
  underlyingsymbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatesbidaskonly_ = 0u;
  strikeprice_ = 0;
  putorcall_ = 0;
  shortinterest_ = 0u;
  securityexpirationdate_ = 0;
  buyrolloverinterest_ = 0;
  sellrolloverinterest_ = 0;
  earningspershare_ = 0;
  sharesoutstanding_ = 0u;
  inttofloatquantitydivisor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityDefinitionResponse::~SecurityDefinitionResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.SecurityDefinitionResponse)
  SharedDtor();
}

void SecurityDefinitionResponse::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (underlyingsymbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete underlyingsymbol_;
  }
  if (this != default_instance_) {
  }
}

void SecurityDefinitionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityDefinitionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityDefinitionResponse_descriptor_;
}

const SecurityDefinitionResponse& SecurityDefinitionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SecurityDefinitionResponse* SecurityDefinitionResponse::default_instance_ = NULL;

SecurityDefinitionResponse* SecurityDefinitionResponse::New() const {
  return new SecurityDefinitionResponse;
}

void SecurityDefinitionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SecurityDefinitionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(requestid_, securitytype_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    minpriceincrement_ = 0;
    pricedisplayformat_ = -1;
    currencyvalueperincrement_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(isfinalmessage_, inttofloatpricedivisor_);
    ZR_(updatesbidaskonly_, shortinterest_);
    if (has_underlyingsymbol()) {
      if (underlyingsymbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        underlyingsymbol_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(securityexpirationdate_, inttofloatquantitydivisor_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityDefinitionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SecurityDefinitionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Symbol;
        break;
      }

      // optional string Symbol = 2;
      case 2: {
        if (tag == 18) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (tag == 26) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SecurityType;
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
      case 4: {
        if (tag == 32) {
         parse_SecurityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Description;
        break;
      }

      // optional string Description = 5;
      case 5: {
        if (tag == 42) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_MinPriceIncrement;
        break;
      }

      // optional float MinPriceIncrement = 6;
      case 6: {
        if (tag == 53) {
         parse_MinPriceIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minpriceincrement_)));
          set_has_minpriceincrement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PriceDisplayFormat;
        break;
      }

      // optional .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
      case 7: {
        if (tag == 56) {
         parse_PriceDisplayFormat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::PriceDisplayFormatEnum_IsValid(value)) {
            set_pricedisplayformat(static_cast< ::DTC_PB::PriceDisplayFormatEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_CurrencyValuePerIncrement;
        break;
      }

      // optional float CurrencyValuePerIncrement = 8;
      case 8: {
        if (tag == 69) {
         parse_CurrencyValuePerIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currencyvalueperincrement_)));
          set_has_currencyvalueperincrement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_IsFinalMessage;
        break;
      }

      // optional uint32 IsFinalMessage = 9;
      case 9: {
        if (tag == 72) {
         parse_IsFinalMessage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalmessage_)));
          set_has_isfinalmessage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_FloatToIntPriceMultiplier;
        break;
      }

      // optional float FloatToIntPriceMultiplier = 10;
      case 10: {
        if (tag == 85) {
         parse_FloatToIntPriceMultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floattointpricemultiplier_)));
          set_has_floattointpricemultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_IntToFloatPriceDivisor;
        break;
      }

      // optional float IntToFloatPriceDivisor = 11;
      case 11: {
        if (tag == 93) {
         parse_IntToFloatPriceDivisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inttofloatpricedivisor_)));
          set_has_inttofloatpricedivisor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_UnderlyingSymbol;
        break;
      }

      // optional string UnderlyingSymbol = 12;
      case 12: {
        if (tag == 98) {
         parse_UnderlyingSymbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyingsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlyingsymbol().data(), this->underlyingsymbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "underlyingsymbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_UpdatesBidAskOnly;
        break;
      }

      // optional uint32 UpdatesBidAskOnly = 13;
      case 13: {
        if (tag == 104) {
         parse_UpdatesBidAskOnly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatesbidaskonly_)));
          set_has_updatesbidaskonly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_StrikePrice;
        break;
      }

      // optional float StrikePrice = 14;
      case 14: {
        if (tag == 117) {
         parse_StrikePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strikeprice_)));
          set_has_strikeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_PutOrCall;
        break;
      }

      // optional .DTC_PB.PutCallEnum PutOrCall = 15;
      case 15: {
        if (tag == 120) {
         parse_PutOrCall:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::PutCallEnum_IsValid(value)) {
            set_putorcall(static_cast< ::DTC_PB::PutCallEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ShortInterest;
        break;
      }

      // optional uint32 ShortInterest = 16;
      case 16: {
        if (tag == 128) {
         parse_ShortInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortinterest_)));
          set_has_shortinterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_SecurityExpirationDate;
        break;
      }

      // optional sfixed32 SecurityExpirationDate = 17;
      case 17: {
        if (tag == 141) {
         parse_SecurityExpirationDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &securityexpirationdate_)));
          set_has_securityexpirationdate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_BuyRolloverInterest;
        break;
      }

      // optional float BuyRolloverInterest = 18;
      case 18: {
        if (tag == 149) {
         parse_BuyRolloverInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buyrolloverinterest_)));
          set_has_buyrolloverinterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_SellRolloverInterest;
        break;
      }

      // optional float SellRolloverInterest = 19;
      case 19: {
        if (tag == 157) {
         parse_SellRolloverInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sellrolloverinterest_)));
          set_has_sellrolloverinterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_EarningsPerShare;
        break;
      }

      // optional float EarningsPerShare = 20;
      case 20: {
        if (tag == 165) {
         parse_EarningsPerShare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &earningspershare_)));
          set_has_earningspershare();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_SharesOutstanding;
        break;
      }

      // optional uint32 SharesOutstanding = 21;
      case 21: {
        if (tag == 168) {
         parse_SharesOutstanding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharesoutstanding_)));
          set_has_sharesoutstanding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_IntToFloatQuantityDivisor;
        break;
      }

      // optional float IntToFloatQuantityDivisor = 22;
      case 22: {
        if (tag == 181) {
         parse_IntToFloatQuantityDivisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inttofloatquantitydivisor_)));
          set_has_inttofloatquantitydivisor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SecurityDefinitionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SecurityDefinitionResponse)
  return false;
#undef DO_
}

void SecurityDefinitionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SecurityDefinitionResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->securitytype(), output);
  }

  // optional string Description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional float MinPriceIncrement = 6;
  if (has_minpriceincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minpriceincrement(), output);
  }

  // optional .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
  if (has_pricedisplayformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pricedisplayformat(), output);
  }

  // optional float CurrencyValuePerIncrement = 8;
  if (has_currencyvalueperincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->currencyvalueperincrement(), output);
  }

  // optional uint32 IsFinalMessage = 9;
  if (has_isfinalmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->isfinalmessage(), output);
  }

  // optional float FloatToIntPriceMultiplier = 10;
  if (has_floattointpricemultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->floattointpricemultiplier(), output);
  }

  // optional float IntToFloatPriceDivisor = 11;
  if (has_inttofloatpricedivisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->inttofloatpricedivisor(), output);
  }

  // optional string UnderlyingSymbol = 12;
  if (has_underlyingsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), this->underlyingsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlyingsymbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->underlyingsymbol(), output);
  }

  // optional uint32 UpdatesBidAskOnly = 13;
  if (has_updatesbidaskonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->updatesbidaskonly(), output);
  }

  // optional float StrikePrice = 14;
  if (has_strikeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->strikeprice(), output);
  }

  // optional .DTC_PB.PutCallEnum PutOrCall = 15;
  if (has_putorcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->putorcall(), output);
  }

  // optional uint32 ShortInterest = 16;
  if (has_shortinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->shortinterest(), output);
  }

  // optional sfixed32 SecurityExpirationDate = 17;
  if (has_securityexpirationdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(17, this->securityexpirationdate(), output);
  }

  // optional float BuyRolloverInterest = 18;
  if (has_buyrolloverinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->buyrolloverinterest(), output);
  }

  // optional float SellRolloverInterest = 19;
  if (has_sellrolloverinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->sellrolloverinterest(), output);
  }

  // optional float EarningsPerShare = 20;
  if (has_earningspershare()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->earningspershare(), output);
  }

  // optional uint32 SharesOutstanding = 21;
  if (has_sharesoutstanding()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->sharesoutstanding(), output);
  }

  // optional float IntToFloatQuantityDivisor = 22;
  if (has_inttofloatquantitydivisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->inttofloatquantitydivisor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SecurityDefinitionResponse)
}

::google::protobuf::uint8* SecurityDefinitionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SecurityDefinitionResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->securitytype(), target);
  }

  // optional string Description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional float MinPriceIncrement = 6;
  if (has_minpriceincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minpriceincrement(), target);
  }

  // optional .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
  if (has_pricedisplayformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pricedisplayformat(), target);
  }

  // optional float CurrencyValuePerIncrement = 8;
  if (has_currencyvalueperincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->currencyvalueperincrement(), target);
  }

  // optional uint32 IsFinalMessage = 9;
  if (has_isfinalmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->isfinalmessage(), target);
  }

  // optional float FloatToIntPriceMultiplier = 10;
  if (has_floattointpricemultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->floattointpricemultiplier(), target);
  }

  // optional float IntToFloatPriceDivisor = 11;
  if (has_inttofloatpricedivisor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->inttofloatpricedivisor(), target);
  }

  // optional string UnderlyingSymbol = 12;
  if (has_underlyingsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), this->underlyingsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlyingsymbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->underlyingsymbol(), target);
  }

  // optional uint32 UpdatesBidAskOnly = 13;
  if (has_updatesbidaskonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->updatesbidaskonly(), target);
  }

  // optional float StrikePrice = 14;
  if (has_strikeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->strikeprice(), target);
  }

  // optional .DTC_PB.PutCallEnum PutOrCall = 15;
  if (has_putorcall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->putorcall(), target);
  }

  // optional uint32 ShortInterest = 16;
  if (has_shortinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->shortinterest(), target);
  }

  // optional sfixed32 SecurityExpirationDate = 17;
  if (has_securityexpirationdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(17, this->securityexpirationdate(), target);
  }

  // optional float BuyRolloverInterest = 18;
  if (has_buyrolloverinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->buyrolloverinterest(), target);
  }

  // optional float SellRolloverInterest = 19;
  if (has_sellrolloverinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->sellrolloverinterest(), target);
  }

  // optional float EarningsPerShare = 20;
  if (has_earningspershare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->earningspershare(), target);
  }

  // optional uint32 SharesOutstanding = 21;
  if (has_sharesoutstanding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->sharesoutstanding(), target);
  }

  // optional float IntToFloatQuantityDivisor = 22;
  if (has_inttofloatquantitydivisor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->inttofloatquantitydivisor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SecurityDefinitionResponse)
  return target;
}

int SecurityDefinitionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

    // optional string Description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional float MinPriceIncrement = 6;
    if (has_minpriceincrement()) {
      total_size += 1 + 4;
    }

    // optional .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
    if (has_pricedisplayformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pricedisplayformat());
    }

    // optional float CurrencyValuePerIncrement = 8;
    if (has_currencyvalueperincrement()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 IsFinalMessage = 9;
    if (has_isfinalmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalmessage());
    }

    // optional float FloatToIntPriceMultiplier = 10;
    if (has_floattointpricemultiplier()) {
      total_size += 1 + 4;
    }

    // optional float IntToFloatPriceDivisor = 11;
    if (has_inttofloatpricedivisor()) {
      total_size += 1 + 4;
    }

    // optional string UnderlyingSymbol = 12;
    if (has_underlyingsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlyingsymbol());
    }

    // optional uint32 UpdatesBidAskOnly = 13;
    if (has_updatesbidaskonly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatesbidaskonly());
    }

    // optional float StrikePrice = 14;
    if (has_strikeprice()) {
      total_size += 1 + 4;
    }

    // optional .DTC_PB.PutCallEnum PutOrCall = 15;
    if (has_putorcall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->putorcall());
    }

    // optional uint32 ShortInterest = 16;
    if (has_shortinterest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shortinterest());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sfixed32 SecurityExpirationDate = 17;
    if (has_securityexpirationdate()) {
      total_size += 2 + 4;
    }

    // optional float BuyRolloverInterest = 18;
    if (has_buyrolloverinterest()) {
      total_size += 2 + 4;
    }

    // optional float SellRolloverInterest = 19;
    if (has_sellrolloverinterest()) {
      total_size += 2 + 4;
    }

    // optional float EarningsPerShare = 20;
    if (has_earningspershare()) {
      total_size += 2 + 4;
    }

    // optional uint32 SharesOutstanding = 21;
    if (has_sharesoutstanding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharesoutstanding());
    }

    // optional float IntToFloatQuantityDivisor = 22;
    if (has_inttofloatquantitydivisor()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityDefinitionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityDefinitionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityDefinitionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityDefinitionResponse::MergeFrom(const SecurityDefinitionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_minpriceincrement()) {
      set_minpriceincrement(from.minpriceincrement());
    }
    if (from.has_pricedisplayformat()) {
      set_pricedisplayformat(from.pricedisplayformat());
    }
    if (from.has_currencyvalueperincrement()) {
      set_currencyvalueperincrement(from.currencyvalueperincrement());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isfinalmessage()) {
      set_isfinalmessage(from.isfinalmessage());
    }
    if (from.has_floattointpricemultiplier()) {
      set_floattointpricemultiplier(from.floattointpricemultiplier());
    }
    if (from.has_inttofloatpricedivisor()) {
      set_inttofloatpricedivisor(from.inttofloatpricedivisor());
    }
    if (from.has_underlyingsymbol()) {
      set_underlyingsymbol(from.underlyingsymbol());
    }
    if (from.has_updatesbidaskonly()) {
      set_updatesbidaskonly(from.updatesbidaskonly());
    }
    if (from.has_strikeprice()) {
      set_strikeprice(from.strikeprice());
    }
    if (from.has_putorcall()) {
      set_putorcall(from.putorcall());
    }
    if (from.has_shortinterest()) {
      set_shortinterest(from.shortinterest());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_securityexpirationdate()) {
      set_securityexpirationdate(from.securityexpirationdate());
    }
    if (from.has_buyrolloverinterest()) {
      set_buyrolloverinterest(from.buyrolloverinterest());
    }
    if (from.has_sellrolloverinterest()) {
      set_sellrolloverinterest(from.sellrolloverinterest());
    }
    if (from.has_earningspershare()) {
      set_earningspershare(from.earningspershare());
    }
    if (from.has_sharesoutstanding()) {
      set_sharesoutstanding(from.sharesoutstanding());
    }
    if (from.has_inttofloatquantitydivisor()) {
      set_inttofloatquantitydivisor(from.inttofloatquantitydivisor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityDefinitionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionResponse::CopyFrom(const SecurityDefinitionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionResponse::IsInitialized() const {

  return true;
}

void SecurityDefinitionResponse::Swap(SecurityDefinitionResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(securitytype_, other->securitytype_);
    std::swap(description_, other->description_);
    std::swap(minpriceincrement_, other->minpriceincrement_);
    std::swap(pricedisplayformat_, other->pricedisplayformat_);
    std::swap(currencyvalueperincrement_, other->currencyvalueperincrement_);
    std::swap(isfinalmessage_, other->isfinalmessage_);
    std::swap(floattointpricemultiplier_, other->floattointpricemultiplier_);
    std::swap(inttofloatpricedivisor_, other->inttofloatpricedivisor_);
    std::swap(underlyingsymbol_, other->underlyingsymbol_);
    std::swap(updatesbidaskonly_, other->updatesbidaskonly_);
    std::swap(strikeprice_, other->strikeprice_);
    std::swap(putorcall_, other->putorcall_);
    std::swap(shortinterest_, other->shortinterest_);
    std::swap(securityexpirationdate_, other->securityexpirationdate_);
    std::swap(buyrolloverinterest_, other->buyrolloverinterest_);
    std::swap(sellrolloverinterest_, other->sellrolloverinterest_);
    std::swap(earningspershare_, other->earningspershare_);
    std::swap(sharesoutstanding_, other->sharesoutstanding_);
    std::swap(inttofloatquantitydivisor_, other->inttofloatquantitydivisor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityDefinitionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityDefinitionResponse_descriptor_;
  metadata.reflection = SecurityDefinitionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityDefinitionReject::kRequestIDFieldNumber;
const int SecurityDefinitionReject::kRejectTextFieldNumber;
#endif  // !_MSC_VER

SecurityDefinitionReject::SecurityDefinitionReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SecurityDefinitionReject)
}

void SecurityDefinitionReject::InitAsDefaultInstance() {
}

SecurityDefinitionReject::SecurityDefinitionReject(const SecurityDefinitionReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SecurityDefinitionReject)
}

void SecurityDefinitionReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  rejecttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityDefinitionReject::~SecurityDefinitionReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.SecurityDefinitionReject)
  SharedDtor();
}

void SecurityDefinitionReject::SharedDtor() {
  if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rejecttext_;
  }
  if (this != default_instance_) {
  }
}

void SecurityDefinitionReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityDefinitionReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityDefinitionReject_descriptor_;
}

const SecurityDefinitionReject& SecurityDefinitionReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

SecurityDefinitionReject* SecurityDefinitionReject::default_instance_ = NULL;

SecurityDefinitionReject* SecurityDefinitionReject::New() const {
  return new SecurityDefinitionReject;
}

void SecurityDefinitionReject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    requestid_ = 0;
    if (has_rejecttext()) {
      if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rejecttext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityDefinitionReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SecurityDefinitionReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RejectText;
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (tag == 18) {
         parse_RejectText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), this->rejecttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rejecttext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SecurityDefinitionReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SecurityDefinitionReject)
  return false;
#undef DO_
}

void SecurityDefinitionReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SecurityDefinitionReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SecurityDefinitionReject)
}

::google::protobuf::uint8* SecurityDefinitionReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SecurityDefinitionReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SecurityDefinitionReject)
  return target;
}

int SecurityDefinitionReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityDefinitionReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityDefinitionReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityDefinitionReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityDefinitionReject::MergeFrom(const SecurityDefinitionReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_rejecttext()) {
      set_rejecttext(from.rejecttext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityDefinitionReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionReject::CopyFrom(const SecurityDefinitionReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionReject::IsInitialized() const {

  return true;
}

void SecurityDefinitionReject::Swap(SecurityDefinitionReject* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(rejecttext_, other->rejecttext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityDefinitionReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityDefinitionReject_descriptor_;
  metadata.reflection = SecurityDefinitionReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountBalanceRequest::kRequestIDFieldNumber;
const int AccountBalanceRequest::kTradeAccountFieldNumber;
#endif  // !_MSC_VER

AccountBalanceRequest::AccountBalanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AccountBalanceRequest)
}

void AccountBalanceRequest::InitAsDefaultInstance() {
}

AccountBalanceRequest::AccountBalanceRequest(const AccountBalanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AccountBalanceRequest)
}

void AccountBalanceRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountBalanceRequest::~AccountBalanceRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.AccountBalanceRequest)
  SharedDtor();
}

void AccountBalanceRequest::SharedDtor() {
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (this != default_instance_) {
  }
}

void AccountBalanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountBalanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountBalanceRequest_descriptor_;
}

const AccountBalanceRequest& AccountBalanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

AccountBalanceRequest* AccountBalanceRequest::default_instance_ = NULL;

AccountBalanceRequest* AccountBalanceRequest::New() const {
  return new AccountBalanceRequest;
}

void AccountBalanceRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    requestid_ = 0;
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountBalanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AccountBalanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 2;
      case 2: {
        if (tag == 18) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AccountBalanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AccountBalanceRequest)
  return false;
#undef DO_
}

void AccountBalanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AccountBalanceRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string TradeAccount = 2;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tradeaccount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AccountBalanceRequest)
}

::google::protobuf::uint8* AccountBalanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AccountBalanceRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string TradeAccount = 2;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradeaccount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AccountBalanceRequest)
  return target;
}

int AccountBalanceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string TradeAccount = 2;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountBalanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountBalanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountBalanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountBalanceRequest::MergeFrom(const AccountBalanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountBalanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalanceRequest::CopyFrom(const AccountBalanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceRequest::IsInitialized() const {

  return true;
}

void AccountBalanceRequest::Swap(AccountBalanceRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountBalanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountBalanceRequest_descriptor_;
  metadata.reflection = AccountBalanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountBalanceReject::kRequestIDFieldNumber;
const int AccountBalanceReject::kRejectTextFieldNumber;
#endif  // !_MSC_VER

AccountBalanceReject::AccountBalanceReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AccountBalanceReject)
}

void AccountBalanceReject::InitAsDefaultInstance() {
}

AccountBalanceReject::AccountBalanceReject(const AccountBalanceReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AccountBalanceReject)
}

void AccountBalanceReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  rejecttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountBalanceReject::~AccountBalanceReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.AccountBalanceReject)
  SharedDtor();
}

void AccountBalanceReject::SharedDtor() {
  if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rejecttext_;
  }
  if (this != default_instance_) {
  }
}

void AccountBalanceReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountBalanceReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountBalanceReject_descriptor_;
}

const AccountBalanceReject& AccountBalanceReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

AccountBalanceReject* AccountBalanceReject::default_instance_ = NULL;

AccountBalanceReject* AccountBalanceReject::New() const {
  return new AccountBalanceReject;
}

void AccountBalanceReject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    requestid_ = 0;
    if (has_rejecttext()) {
      if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rejecttext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountBalanceReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AccountBalanceReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RejectText;
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (tag == 18) {
         parse_RejectText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), this->rejecttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rejecttext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AccountBalanceReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AccountBalanceReject)
  return false;
#undef DO_
}

void AccountBalanceReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AccountBalanceReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AccountBalanceReject)
}

::google::protobuf::uint8* AccountBalanceReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AccountBalanceReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AccountBalanceReject)
  return target;
}

int AccountBalanceReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountBalanceReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountBalanceReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountBalanceReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountBalanceReject::MergeFrom(const AccountBalanceReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_rejecttext()) {
      set_rejecttext(from.rejecttext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountBalanceReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalanceReject::CopyFrom(const AccountBalanceReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceReject::IsInitialized() const {

  return true;
}

void AccountBalanceReject::Swap(AccountBalanceReject* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(rejecttext_, other->rejecttext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountBalanceReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountBalanceReject_descriptor_;
  metadata.reflection = AccountBalanceReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountBalanceUpdate::kRequestIDFieldNumber;
const int AccountBalanceUpdate::kCashBalanceFieldNumber;
const int AccountBalanceUpdate::kBalanceAvailableForNewPositionsFieldNumber;
const int AccountBalanceUpdate::kAccountCurrencyFieldNumber;
const int AccountBalanceUpdate::kTradeAccountFieldNumber;
const int AccountBalanceUpdate::kSecuritiesValueFieldNumber;
const int AccountBalanceUpdate::kMarginRequirementFieldNumber;
const int AccountBalanceUpdate::kTotalNumberMessagesFieldNumber;
const int AccountBalanceUpdate::kMessageNumberFieldNumber;
const int AccountBalanceUpdate::kNoAccountBalancesFieldNumber;
const int AccountBalanceUpdate::kUnsolicitedFieldNumber;
#endif  // !_MSC_VER

AccountBalanceUpdate::AccountBalanceUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AccountBalanceUpdate)
}

void AccountBalanceUpdate::InitAsDefaultInstance() {
}

AccountBalanceUpdate::AccountBalanceUpdate(const AccountBalanceUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AccountBalanceUpdate)
}

void AccountBalanceUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  cashbalance_ = 0;
  balanceavailablefornewpositions_ = 0;
  accountcurrency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitiesvalue_ = 0;
  marginrequirement_ = 0;
  totalnumbermessages_ = 0;
  messagenumber_ = 0;
  noaccountbalances_ = 0u;
  unsolicited_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountBalanceUpdate::~AccountBalanceUpdate() {
  // @@protoc_insertion_point(destructor:DTC_PB.AccountBalanceUpdate)
  SharedDtor();
}

void AccountBalanceUpdate::SharedDtor() {
  if (accountcurrency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountcurrency_;
  }
  if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeaccount_;
  }
  if (this != default_instance_) {
  }
}

void AccountBalanceUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountBalanceUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountBalanceUpdate_descriptor_;
}

const AccountBalanceUpdate& AccountBalanceUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

AccountBalanceUpdate* AccountBalanceUpdate::default_instance_ = NULL;

AccountBalanceUpdate* AccountBalanceUpdate::New() const {
  return new AccountBalanceUpdate;
}

void AccountBalanceUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccountBalanceUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cashbalance_, balanceavailablefornewpositions_);
    ZR_(requestid_, totalnumbermessages_);
    ZR_(securitiesvalue_, marginrequirement_);
    if (has_accountcurrency()) {
      if (accountcurrency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountcurrency_->clear();
      }
    }
    if (has_tradeaccount()) {
      if (tradeaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeaccount_->clear();
      }
    }
  }
  ZR_(messagenumber_, unsolicited_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountBalanceUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AccountBalanceUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_CashBalance;
        break;
      }

      // optional double CashBalance = 2;
      case 2: {
        if (tag == 17) {
         parse_CashBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashbalance_)));
          set_has_cashbalance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_BalanceAvailableForNewPositions;
        break;
      }

      // optional double BalanceAvailableForNewPositions = 3;
      case 3: {
        if (tag == 25) {
         parse_BalanceAvailableForNewPositions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balanceavailablefornewpositions_)));
          set_has_balanceavailablefornewpositions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AccountCurrency;
        break;
      }

      // optional string AccountCurrency = 4;
      case 4: {
        if (tag == 34) {
         parse_AccountCurrency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountcurrency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountcurrency().data(), this->accountcurrency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountcurrency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TradeAccount;
        break;
      }

      // optional string TradeAccount = 5;
      case 5: {
        if (tag == 42) {
         parse_TradeAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), this->tradeaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_SecuritiesValue;
        break;
      }

      // optional double SecuritiesValue = 6;
      case 6: {
        if (tag == 49) {
         parse_SecuritiesValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &securitiesvalue_)));
          set_has_securitiesvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_MarginRequirement;
        break;
      }

      // optional double MarginRequirement = 7;
      case 7: {
        if (tag == 57) {
         parse_MarginRequirement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginrequirement_)));
          set_has_marginrequirement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TotalNumberMessages;
        break;
      }

      // optional int32 TotalNumberMessages = 8;
      case 8: {
        if (tag == 64) {
         parse_TotalNumberMessages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
          set_has_totalnumbermessages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MessageNumber;
        break;
      }

      // optional int32 MessageNumber = 9;
      case 9: {
        if (tag == 72) {
         parse_MessageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
          set_has_messagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_NoAccountBalances;
        break;
      }

      // optional uint32 NoAccountBalances = 10;
      case 10: {
        if (tag == 80) {
         parse_NoAccountBalances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noaccountbalances_)));
          set_has_noaccountbalances();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Unsolicited;
        break;
      }

      // optional uint32 Unsolicited = 11;
      case 11: {
        if (tag == 88) {
         parse_Unsolicited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsolicited_)));
          set_has_unsolicited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AccountBalanceUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AccountBalanceUpdate)
  return false;
#undef DO_
}

void AccountBalanceUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AccountBalanceUpdate)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional double CashBalance = 2;
  if (has_cashbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cashbalance(), output);
  }

  // optional double BalanceAvailableForNewPositions = 3;
  if (has_balanceavailablefornewpositions()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->balanceavailablefornewpositions(), output);
  }

  // optional string AccountCurrency = 4;
  if (has_accountcurrency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountcurrency().data(), this->accountcurrency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountcurrency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->accountcurrency(), output);
  }

  // optional string TradeAccount = 5;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tradeaccount(), output);
  }

  // optional double SecuritiesValue = 6;
  if (has_securitiesvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->securitiesvalue(), output);
  }

  // optional double MarginRequirement = 7;
  if (has_marginrequirement()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->marginrequirement(), output);
  }

  // optional int32 TotalNumberMessages = 8;
  if (has_totalnumbermessages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalnumbermessages(), output);
  }

  // optional int32 MessageNumber = 9;
  if (has_messagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->messagenumber(), output);
  }

  // optional uint32 NoAccountBalances = 10;
  if (has_noaccountbalances()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->noaccountbalances(), output);
  }

  // optional uint32 Unsolicited = 11;
  if (has_unsolicited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unsolicited(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AccountBalanceUpdate)
}

::google::protobuf::uint8* AccountBalanceUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AccountBalanceUpdate)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional double CashBalance = 2;
  if (has_cashbalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cashbalance(), target);
  }

  // optional double BalanceAvailableForNewPositions = 3;
  if (has_balanceavailablefornewpositions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->balanceavailablefornewpositions(), target);
  }

  // optional string AccountCurrency = 4;
  if (has_accountcurrency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountcurrency().data(), this->accountcurrency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountcurrency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accountcurrency(), target);
  }

  // optional string TradeAccount = 5;
  if (has_tradeaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), this->tradeaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tradeaccount(), target);
  }

  // optional double SecuritiesValue = 6;
  if (has_securitiesvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->securitiesvalue(), target);
  }

  // optional double MarginRequirement = 7;
  if (has_marginrequirement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->marginrequirement(), target);
  }

  // optional int32 TotalNumberMessages = 8;
  if (has_totalnumbermessages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalnumbermessages(), target);
  }

  // optional int32 MessageNumber = 9;
  if (has_messagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->messagenumber(), target);
  }

  // optional uint32 NoAccountBalances = 10;
  if (has_noaccountbalances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->noaccountbalances(), target);
  }

  // optional uint32 Unsolicited = 11;
  if (has_unsolicited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->unsolicited(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AccountBalanceUpdate)
  return target;
}

int AccountBalanceUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional double CashBalance = 2;
    if (has_cashbalance()) {
      total_size += 1 + 8;
    }

    // optional double BalanceAvailableForNewPositions = 3;
    if (has_balanceavailablefornewpositions()) {
      total_size += 1 + 8;
    }

    // optional string AccountCurrency = 4;
    if (has_accountcurrency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountcurrency());
    }

    // optional string TradeAccount = 5;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional double SecuritiesValue = 6;
    if (has_securitiesvalue()) {
      total_size += 1 + 8;
    }

    // optional double MarginRequirement = 7;
    if (has_marginrequirement()) {
      total_size += 1 + 8;
    }

    // optional int32 TotalNumberMessages = 8;
    if (has_totalnumbermessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumbermessages());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 MessageNumber = 9;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

    // optional uint32 NoAccountBalances = 10;
    if (has_noaccountbalances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noaccountbalances());
    }

    // optional uint32 Unsolicited = 11;
    if (has_unsolicited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unsolicited());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountBalanceUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountBalanceUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountBalanceUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountBalanceUpdate::MergeFrom(const AccountBalanceUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_cashbalance()) {
      set_cashbalance(from.cashbalance());
    }
    if (from.has_balanceavailablefornewpositions()) {
      set_balanceavailablefornewpositions(from.balanceavailablefornewpositions());
    }
    if (from.has_accountcurrency()) {
      set_accountcurrency(from.accountcurrency());
    }
    if (from.has_tradeaccount()) {
      set_tradeaccount(from.tradeaccount());
    }
    if (from.has_securitiesvalue()) {
      set_securitiesvalue(from.securitiesvalue());
    }
    if (from.has_marginrequirement()) {
      set_marginrequirement(from.marginrequirement());
    }
    if (from.has_totalnumbermessages()) {
      set_totalnumbermessages(from.totalnumbermessages());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_messagenumber()) {
      set_messagenumber(from.messagenumber());
    }
    if (from.has_noaccountbalances()) {
      set_noaccountbalances(from.noaccountbalances());
    }
    if (from.has_unsolicited()) {
      set_unsolicited(from.unsolicited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountBalanceUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalanceUpdate::CopyFrom(const AccountBalanceUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceUpdate::IsInitialized() const {

  return true;
}

void AccountBalanceUpdate::Swap(AccountBalanceUpdate* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(cashbalance_, other->cashbalance_);
    std::swap(balanceavailablefornewpositions_, other->balanceavailablefornewpositions_);
    std::swap(accountcurrency_, other->accountcurrency_);
    std::swap(tradeaccount_, other->tradeaccount_);
    std::swap(securitiesvalue_, other->securitiesvalue_);
    std::swap(marginrequirement_, other->marginrequirement_);
    std::swap(totalnumbermessages_, other->totalnumbermessages_);
    std::swap(messagenumber_, other->messagenumber_);
    std::swap(noaccountbalances_, other->noaccountbalances_);
    std::swap(unsolicited_, other->unsolicited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountBalanceUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountBalanceUpdate_descriptor_;
  metadata.reflection = AccountBalanceUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMessage::kUserMessageFieldNumber;
const int UserMessage::kIsPopupMessageFieldNumber;
#endif  // !_MSC_VER

UserMessage::UserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.UserMessage)
}

void UserMessage::InitAsDefaultInstance() {
}

UserMessage::UserMessage(const UserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.UserMessage)
}

void UserMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  usermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ispopupmessage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMessage::~UserMessage() {
  // @@protoc_insertion_point(destructor:DTC_PB.UserMessage)
  SharedDtor();
}

void UserMessage::SharedDtor() {
  if (usermessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usermessage_;
  }
  if (this != default_instance_) {
  }
}

void UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMessage_descriptor_;
}

const UserMessage& UserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

UserMessage* UserMessage::default_instance_ = NULL;

UserMessage* UserMessage::New() const {
  return new UserMessage;
}

void UserMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_usermessage()) {
      if (usermessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        usermessage_->clear();
      }
    }
    ispopupmessage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.UserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserMessage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usermessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usermessage().data(), this->usermessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "usermessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsPopupMessage;
        break;
      }

      // optional uint32 IsPopupMessage = 2;
      case 2: {
        if (tag == 16) {
         parse_IsPopupMessage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispopupmessage_)));
          set_has_ispopupmessage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.UserMessage)
  return false;
#undef DO_
}

void UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.UserMessage)
  // optional string UserMessage = 1;
  if (has_usermessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usermessage().data(), this->usermessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usermessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->usermessage(), output);
  }

  // optional uint32 IsPopupMessage = 2;
  if (has_ispopupmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ispopupmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.UserMessage)
}

::google::protobuf::uint8* UserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.UserMessage)
  // optional string UserMessage = 1;
  if (has_usermessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usermessage().data(), this->usermessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usermessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usermessage(), target);
  }

  // optional uint32 IsPopupMessage = 2;
  if (has_ispopupmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ispopupmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.UserMessage)
  return target;
}

int UserMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserMessage = 1;
    if (has_usermessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usermessage());
    }

    // optional uint32 IsPopupMessage = 2;
    if (has_ispopupmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispopupmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMessage::MergeFrom(const UserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usermessage()) {
      set_usermessage(from.usermessage());
    }
    if (from.has_ispopupmessage()) {
      set_ispopupmessage(from.ispopupmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMessage::CopyFrom(const UserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMessage::IsInitialized() const {

  return true;
}

void UserMessage::Swap(UserMessage* other) {
  if (other != this) {
    std::swap(usermessage_, other->usermessage_);
    std::swap(ispopupmessage_, other->ispopupmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMessage_descriptor_;
  metadata.reflection = UserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeneralLogMessage::kMessageTextFieldNumber;
#endif  // !_MSC_VER

GeneralLogMessage::GeneralLogMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.GeneralLogMessage)
}

void GeneralLogMessage::InitAsDefaultInstance() {
}

GeneralLogMessage::GeneralLogMessage(const GeneralLogMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.GeneralLogMessage)
}

void GeneralLogMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralLogMessage::~GeneralLogMessage() {
  // @@protoc_insertion_point(destructor:DTC_PB.GeneralLogMessage)
  SharedDtor();
}

void GeneralLogMessage::SharedDtor() {
  if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetext_;
  }
  if (this != default_instance_) {
  }
}

void GeneralLogMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralLogMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralLogMessage_descriptor_;
}

const GeneralLogMessage& GeneralLogMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

GeneralLogMessage* GeneralLogMessage::default_instance_ = NULL;

GeneralLogMessage* GeneralLogMessage::New() const {
  return new GeneralLogMessage;
}

void GeneralLogMessage::Clear() {
  if (has_messagetext()) {
    if (messagetext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      messagetext_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeneralLogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.GeneralLogMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MessageText = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetext().data(), this->messagetext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagetext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.GeneralLogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.GeneralLogMessage)
  return false;
#undef DO_
}

void GeneralLogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.GeneralLogMessage)
  // optional string MessageText = 3;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagetext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.GeneralLogMessage)
}

::google::protobuf::uint8* GeneralLogMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.GeneralLogMessage)
  // optional string MessageText = 3;
  if (has_messagetext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), this->messagetext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagetext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.GeneralLogMessage)
  return target;
}

int GeneralLogMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string MessageText = 3;
    if (has_messagetext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralLogMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeneralLogMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeneralLogMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeneralLogMessage::MergeFrom(const GeneralLogMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetext()) {
      set_messagetext(from.messagetext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeneralLogMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralLogMessage::CopyFrom(const GeneralLogMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralLogMessage::IsInitialized() const {

  return true;
}

void GeneralLogMessage::Swap(GeneralLogMessage* other) {
  if (other != this) {
    std::swap(messagetext_, other->messagetext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeneralLogMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralLogMessage_descriptor_;
  metadata.reflection = GeneralLogMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalPriceDataRequest::kRequestIDFieldNumber;
const int HistoricalPriceDataRequest::kSymbolFieldNumber;
const int HistoricalPriceDataRequest::kExchangeFieldNumber;
const int HistoricalPriceDataRequest::kRecordIntervalFieldNumber;
const int HistoricalPriceDataRequest::kStartDateTimeFieldNumber;
const int HistoricalPriceDataRequest::kEndDateTimeFieldNumber;
const int HistoricalPriceDataRequest::kMaxDaysToReturnFieldNumber;
const int HistoricalPriceDataRequest::kUseZLibCompressionFieldNumber;
const int HistoricalPriceDataRequest::kRequestDividendAdjustedStockDataFieldNumber;
const int HistoricalPriceDataRequest::kFlag1FieldNumber;
#endif  // !_MSC_VER

HistoricalPriceDataRequest::HistoricalPriceDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataRequest)
}

void HistoricalPriceDataRequest::InitAsDefaultInstance() {
}

HistoricalPriceDataRequest::HistoricalPriceDataRequest(const HistoricalPriceDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataRequest)
}

void HistoricalPriceDataRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordinterval_ = 0;
  startdatetime_ = GOOGLE_LONGLONG(0);
  enddatetime_ = GOOGLE_LONGLONG(0);
  maxdaystoreturn_ = 0u;
  usezlibcompression_ = 0u;
  requestdividendadjustedstockdata_ = 0u;
  flag_1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalPriceDataRequest::~HistoricalPriceDataRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataRequest)
  SharedDtor();
}

void HistoricalPriceDataRequest::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (this != default_instance_) {
  }
}

void HistoricalPriceDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalPriceDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalPriceDataRequest_descriptor_;
}

const HistoricalPriceDataRequest& HistoricalPriceDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalPriceDataRequest* HistoricalPriceDataRequest::default_instance_ = NULL;

HistoricalPriceDataRequest* HistoricalPriceDataRequest::New() const {
  return new HistoricalPriceDataRequest;
}

void HistoricalPriceDataRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoricalPriceDataRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(requestid_, recordinterval_);
    ZR_(startdatetime_, usezlibcompression_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
  }
  ZR_(requestdividendadjustedstockdata_, flag_1_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalPriceDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Symbol;
        break;
      }

      // optional string Symbol = 2;
      case 2: {
        if (tag == 18) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (tag == 26) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RecordInterval;
        break;
      }

      // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
      case 4: {
        if (tag == 32) {
         parse_RecordInterval:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::HistoricalDataIntervalEnum_IsValid(value)) {
            set_recordinterval(static_cast< ::DTC_PB::HistoricalDataIntervalEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_StartDateTime;
        break;
      }

      // optional sfixed64 StartDateTime = 5;
      case 5: {
        if (tag == 41) {
         parse_StartDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
          set_has_startdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_EndDateTime;
        break;
      }

      // optional sfixed64 EndDateTime = 6;
      case 6: {
        if (tag == 49) {
         parse_EndDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &enddatetime_)));
          set_has_enddatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_MaxDaysToReturn;
        break;
      }

      // optional uint32 MaxDaysToReturn = 7;
      case 7: {
        if (tag == 56) {
         parse_MaxDaysToReturn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxdaystoreturn_)));
          set_has_maxdaystoreturn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_UseZLibCompression;
        break;
      }

      // optional uint32 UseZLibCompression = 8;
      case 8: {
        if (tag == 64) {
         parse_UseZLibCompression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usezlibcompression_)));
          set_has_usezlibcompression();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_RequestDividendAdjustedStockData;
        break;
      }

      // optional uint32 RequestDividendAdjustedStockData = 9;
      case 9: {
        if (tag == 72) {
         parse_RequestDividendAdjustedStockData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestdividendadjustedstockdata_)));
          set_has_requestdividendadjustedstockdata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Flag_1;
        break;
      }

      // optional uint32 Flag_1 = 10;
      case 10: {
        if (tag == 80) {
         parse_Flag_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_1_)));
          set_has_flag_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataRequest)
  return false;
#undef DO_
}

void HistoricalPriceDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
  if (has_recordinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->recordinterval(), output);
  }

  // optional sfixed64 StartDateTime = 5;
  if (has_startdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->startdatetime(), output);
  }

  // optional sfixed64 EndDateTime = 6;
  if (has_enddatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->enddatetime(), output);
  }

  // optional uint32 MaxDaysToReturn = 7;
  if (has_maxdaystoreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxdaystoreturn(), output);
  }

  // optional uint32 UseZLibCompression = 8;
  if (has_usezlibcompression()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->usezlibcompression(), output);
  }

  // optional uint32 RequestDividendAdjustedStockData = 9;
  if (has_requestdividendadjustedstockdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->requestdividendadjustedstockdata(), output);
  }

  // optional uint32 Flag_1 = 10;
  if (has_flag_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->flag_1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataRequest)
}

::google::protobuf::uint8* HistoricalPriceDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataRequest)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional string Exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
  if (has_recordinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->recordinterval(), target);
  }

  // optional sfixed64 StartDateTime = 5;
  if (has_startdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->startdatetime(), target);
  }

  // optional sfixed64 EndDateTime = 6;
  if (has_enddatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->enddatetime(), target);
  }

  // optional uint32 MaxDaysToReturn = 7;
  if (has_maxdaystoreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxdaystoreturn(), target);
  }

  // optional uint32 UseZLibCompression = 8;
  if (has_usezlibcompression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->usezlibcompression(), target);
  }

  // optional uint32 RequestDividendAdjustedStockData = 9;
  if (has_requestdividendadjustedstockdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->requestdividendadjustedstockdata(), target);
  }

  // optional uint32 Flag_1 = 10;
  if (has_flag_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->flag_1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataRequest)
  return target;
}

int HistoricalPriceDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
    if (has_recordinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordinterval());
    }

    // optional sfixed64 StartDateTime = 5;
    if (has_startdatetime()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 EndDateTime = 6;
    if (has_enddatetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 MaxDaysToReturn = 7;
    if (has_maxdaystoreturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxdaystoreturn());
    }

    // optional uint32 UseZLibCompression = 8;
    if (has_usezlibcompression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usezlibcompression());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 RequestDividendAdjustedStockData = 9;
    if (has_requestdividendadjustedstockdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestdividendadjustedstockdata());
    }

    // optional uint32 Flag_1 = 10;
    if (has_flag_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalPriceDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalPriceDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalPriceDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalPriceDataRequest::MergeFrom(const HistoricalPriceDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_recordinterval()) {
      set_recordinterval(from.recordinterval());
    }
    if (from.has_startdatetime()) {
      set_startdatetime(from.startdatetime());
    }
    if (from.has_enddatetime()) {
      set_enddatetime(from.enddatetime());
    }
    if (from.has_maxdaystoreturn()) {
      set_maxdaystoreturn(from.maxdaystoreturn());
    }
    if (from.has_usezlibcompression()) {
      set_usezlibcompression(from.usezlibcompression());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_requestdividendadjustedstockdata()) {
      set_requestdividendadjustedstockdata(from.requestdividendadjustedstockdata());
    }
    if (from.has_flag_1()) {
      set_flag_1(from.flag_1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalPriceDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataRequest::CopyFrom(const HistoricalPriceDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataRequest::IsInitialized() const {

  return true;
}

void HistoricalPriceDataRequest::Swap(HistoricalPriceDataRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(symbol_, other->symbol_);
    std::swap(exchange_, other->exchange_);
    std::swap(recordinterval_, other->recordinterval_);
    std::swap(startdatetime_, other->startdatetime_);
    std::swap(enddatetime_, other->enddatetime_);
    std::swap(maxdaystoreturn_, other->maxdaystoreturn_);
    std::swap(usezlibcompression_, other->usezlibcompression_);
    std::swap(requestdividendadjustedstockdata_, other->requestdividendadjustedstockdata_);
    std::swap(flag_1_, other->flag_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalPriceDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalPriceDataRequest_descriptor_;
  metadata.reflection = HistoricalPriceDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalPriceDataResponseHeader::kRequestIDFieldNumber;
const int HistoricalPriceDataResponseHeader::kRecordIntervalFieldNumber;
const int HistoricalPriceDataResponseHeader::kUseZLibCompressionFieldNumber;
const int HistoricalPriceDataResponseHeader::kNoRecordsToReturnFieldNumber;
const int HistoricalPriceDataResponseHeader::kIntPriceDivisorFieldNumber;
#endif  // !_MSC_VER

HistoricalPriceDataResponseHeader::HistoricalPriceDataResponseHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataResponseHeader)
}

void HistoricalPriceDataResponseHeader::InitAsDefaultInstance() {
}

HistoricalPriceDataResponseHeader::HistoricalPriceDataResponseHeader(const HistoricalPriceDataResponseHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataResponseHeader)
}

void HistoricalPriceDataResponseHeader::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  recordinterval_ = 0;
  usezlibcompression_ = 0u;
  norecordstoreturn_ = 0u;
  intpricedivisor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalPriceDataResponseHeader::~HistoricalPriceDataResponseHeader() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataResponseHeader)
  SharedDtor();
}

void HistoricalPriceDataResponseHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoricalPriceDataResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalPriceDataResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalPriceDataResponseHeader_descriptor_;
}

const HistoricalPriceDataResponseHeader& HistoricalPriceDataResponseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalPriceDataResponseHeader* HistoricalPriceDataResponseHeader::default_instance_ = NULL;

HistoricalPriceDataResponseHeader* HistoricalPriceDataResponseHeader::New() const {
  return new HistoricalPriceDataResponseHeader;
}

void HistoricalPriceDataResponseHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoricalPriceDataResponseHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(requestid_, intpricedivisor_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalPriceDataResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordInterval;
        break;
      }

      // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordInterval:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::HistoricalDataIntervalEnum_IsValid(value)) {
            set_recordinterval(static_cast< ::DTC_PB::HistoricalDataIntervalEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UseZLibCompression;
        break;
      }

      // optional uint32 UseZLibCompression = 3;
      case 3: {
        if (tag == 24) {
         parse_UseZLibCompression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usezlibcompression_)));
          set_has_usezlibcompression();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_NoRecordsToReturn;
        break;
      }

      // optional uint32 NoRecordsToReturn = 4;
      case 4: {
        if (tag == 32) {
         parse_NoRecordsToReturn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &norecordstoreturn_)));
          set_has_norecordstoreturn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_IntPriceDivisor;
        break;
      }

      // optional float IntPriceDivisor = 5;
      case 5: {
        if (tag == 45) {
         parse_IntPriceDivisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intpricedivisor_)));
          set_has_intpricedivisor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataResponseHeader)
  return false;
#undef DO_
}

void HistoricalPriceDataResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataResponseHeader)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
  if (has_recordinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->recordinterval(), output);
  }

  // optional uint32 UseZLibCompression = 3;
  if (has_usezlibcompression()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usezlibcompression(), output);
  }

  // optional uint32 NoRecordsToReturn = 4;
  if (has_norecordstoreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->norecordstoreturn(), output);
  }

  // optional float IntPriceDivisor = 5;
  if (has_intpricedivisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->intpricedivisor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataResponseHeader)
}

::google::protobuf::uint8* HistoricalPriceDataResponseHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataResponseHeader)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
  if (has_recordinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->recordinterval(), target);
  }

  // optional uint32 UseZLibCompression = 3;
  if (has_usezlibcompression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usezlibcompression(), target);
  }

  // optional uint32 NoRecordsToReturn = 4;
  if (has_norecordstoreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->norecordstoreturn(), target);
  }

  // optional float IntPriceDivisor = 5;
  if (has_intpricedivisor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->intpricedivisor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataResponseHeader)
  return target;
}

int HistoricalPriceDataResponseHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
    if (has_recordinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordinterval());
    }

    // optional uint32 UseZLibCompression = 3;
    if (has_usezlibcompression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usezlibcompression());
    }

    // optional uint32 NoRecordsToReturn = 4;
    if (has_norecordstoreturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->norecordstoreturn());
    }

    // optional float IntPriceDivisor = 5;
    if (has_intpricedivisor()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalPriceDataResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalPriceDataResponseHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalPriceDataResponseHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalPriceDataResponseHeader::MergeFrom(const HistoricalPriceDataResponseHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_recordinterval()) {
      set_recordinterval(from.recordinterval());
    }
    if (from.has_usezlibcompression()) {
      set_usezlibcompression(from.usezlibcompression());
    }
    if (from.has_norecordstoreturn()) {
      set_norecordstoreturn(from.norecordstoreturn());
    }
    if (from.has_intpricedivisor()) {
      set_intpricedivisor(from.intpricedivisor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalPriceDataResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataResponseHeader::CopyFrom(const HistoricalPriceDataResponseHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataResponseHeader::IsInitialized() const {

  return true;
}

void HistoricalPriceDataResponseHeader::Swap(HistoricalPriceDataResponseHeader* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(recordinterval_, other->recordinterval_);
    std::swap(usezlibcompression_, other->usezlibcompression_);
    std::swap(norecordstoreturn_, other->norecordstoreturn_);
    std::swap(intpricedivisor_, other->intpricedivisor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalPriceDataResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalPriceDataResponseHeader_descriptor_;
  metadata.reflection = HistoricalPriceDataResponseHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalPriceDataReject::kRequestIDFieldNumber;
const int HistoricalPriceDataReject::kRejectTextFieldNumber;
#endif  // !_MSC_VER

HistoricalPriceDataReject::HistoricalPriceDataReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataReject)
}

void HistoricalPriceDataReject::InitAsDefaultInstance() {
}

HistoricalPriceDataReject::HistoricalPriceDataReject(const HistoricalPriceDataReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataReject)
}

void HistoricalPriceDataReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  rejecttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalPriceDataReject::~HistoricalPriceDataReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataReject)
  SharedDtor();
}

void HistoricalPriceDataReject::SharedDtor() {
  if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rejecttext_;
  }
  if (this != default_instance_) {
  }
}

void HistoricalPriceDataReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalPriceDataReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalPriceDataReject_descriptor_;
}

const HistoricalPriceDataReject& HistoricalPriceDataReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalPriceDataReject* HistoricalPriceDataReject::default_instance_ = NULL;

HistoricalPriceDataReject* HistoricalPriceDataReject::New() const {
  return new HistoricalPriceDataReject;
}

void HistoricalPriceDataReject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    requestid_ = 0;
    if (has_rejecttext()) {
      if (rejecttext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rejecttext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalPriceDataReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RejectText;
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (tag == 18) {
         parse_RejectText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), this->rejecttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rejecttext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataReject)
  return false;
#undef DO_
}

void HistoricalPriceDataReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataReject)
}

::google::protobuf::uint8* HistoricalPriceDataReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataReject)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (has_rejecttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), this->rejecttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rejecttext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataReject)
  return target;
}

int HistoricalPriceDataReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalPriceDataReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalPriceDataReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalPriceDataReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalPriceDataReject::MergeFrom(const HistoricalPriceDataReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_rejecttext()) {
      set_rejecttext(from.rejecttext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalPriceDataReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataReject::CopyFrom(const HistoricalPriceDataReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataReject::IsInitialized() const {

  return true;
}

void HistoricalPriceDataReject::Swap(HistoricalPriceDataReject* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(rejecttext_, other->rejecttext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalPriceDataReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalPriceDataReject_descriptor_;
  metadata.reflection = HistoricalPriceDataReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalPriceDataRecordResponse::kRequestIDFieldNumber;
const int HistoricalPriceDataRecordResponse::kStartDateTimeFieldNumber;
const int HistoricalPriceDataRecordResponse::kOpenPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kHighPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kLowPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kLastPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse::kNumTradesFieldNumber;
const int HistoricalPriceDataRecordResponse::kBidVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse::kAskVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse::kIsFinalRecordFieldNumber;
#endif  // !_MSC_VER

HistoricalPriceDataRecordResponse::HistoricalPriceDataRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataRecordResponse)
}

void HistoricalPriceDataRecordResponse::InitAsDefaultInstance() {
}

HistoricalPriceDataRecordResponse::HistoricalPriceDataRecordResponse(const HistoricalPriceDataRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataRecordResponse)
}

void HistoricalPriceDataRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  startdatetime_ = GOOGLE_LONGLONG(0);
  openprice_ = 0;
  highprice_ = 0;
  lowprice_ = 0;
  lastprice_ = 0;
  volume_ = 0;
  numtrades_ = 0u;
  bidvolume_ = 0;
  askvolume_ = 0;
  isfinalrecord_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalPriceDataRecordResponse::~HistoricalPriceDataRecordResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataRecordResponse)
  SharedDtor();
}

void HistoricalPriceDataRecordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoricalPriceDataRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalPriceDataRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalPriceDataRecordResponse_descriptor_;
}

const HistoricalPriceDataRecordResponse& HistoricalPriceDataRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalPriceDataRecordResponse* HistoricalPriceDataRecordResponse::default_instance_ = NULL;

HistoricalPriceDataRecordResponse* HistoricalPriceDataRecordResponse::New() const {
  return new HistoricalPriceDataRecordResponse;
}

void HistoricalPriceDataRecordResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoricalPriceDataRecordResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(startdatetime_, volume_);
  }
  ZR_(bidvolume_, isfinalrecord_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalPriceDataRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataRecordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_StartDateTime;
        break;
      }

      // optional sfixed64 StartDateTime = 2;
      case 2: {
        if (tag == 17) {
         parse_StartDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
          set_has_startdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_OpenPrice;
        break;
      }

      // optional double OpenPrice = 3;
      case 3: {
        if (tag == 25) {
         parse_OpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_HighPrice;
        break;
      }

      // optional double HighPrice = 4;
      case 4: {
        if (tag == 33) {
         parse_HighPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highprice_)));
          set_has_highprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_LowPrice;
        break;
      }

      // optional double LowPrice = 5;
      case 5: {
        if (tag == 41) {
         parse_LowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowprice_)));
          set_has_lowprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_LastPrice;
        break;
      }

      // optional double LastPrice = 6;
      case 6: {
        if (tag == 49) {
         parse_LastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));
          set_has_lastprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_Volume;
        break;
      }

      // optional double Volume = 7;
      case 7: {
        if (tag == 57) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_NumTrades;
        break;
      }

      // optional uint32 NumTrades = 8;
      case 8: {
        if (tag == 64) {
         parse_NumTrades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numtrades_)));
          set_has_numtrades();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_BidVolume;
        break;
      }

      // optional double BidVolume = 9;
      case 9: {
        if (tag == 73) {
         parse_BidVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidvolume_)));
          set_has_bidvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_AskVolume;
        break;
      }

      // optional double AskVolume = 10;
      case 10: {
        if (tag == 81) {
         parse_AskVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askvolume_)));
          set_has_askvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_IsFinalRecord;
        break;
      }

      // optional uint32 IsFinalRecord = 11;
      case 11: {
        if (tag == 88) {
         parse_IsFinalRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
          set_has_isfinalrecord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataRecordResponse)
  return false;
#undef DO_
}

void HistoricalPriceDataRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataRecordResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional sfixed64 StartDateTime = 2;
  if (has_startdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->startdatetime(), output);
  }

  // optional double OpenPrice = 3;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->openprice(), output);
  }

  // optional double HighPrice = 4;
  if (has_highprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->highprice(), output);
  }

  // optional double LowPrice = 5;
  if (has_lowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lowprice(), output);
  }

  // optional double LastPrice = 6;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lastprice(), output);
  }

  // optional double Volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->volume(), output);
  }

  // optional uint32 NumTrades = 8;
  if (has_numtrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numtrades(), output);
  }

  // optional double BidVolume = 9;
  if (has_bidvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bidvolume(), output);
  }

  // optional double AskVolume = 10;
  if (has_askvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->askvolume(), output);
  }

  // optional uint32 IsFinalRecord = 11;
  if (has_isfinalrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->isfinalrecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataRecordResponse)
}

::google::protobuf::uint8* HistoricalPriceDataRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataRecordResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional sfixed64 StartDateTime = 2;
  if (has_startdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->startdatetime(), target);
  }

  // optional double OpenPrice = 3;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->openprice(), target);
  }

  // optional double HighPrice = 4;
  if (has_highprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->highprice(), target);
  }

  // optional double LowPrice = 5;
  if (has_lowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lowprice(), target);
  }

  // optional double LastPrice = 6;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lastprice(), target);
  }

  // optional double Volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->volume(), target);
  }

  // optional uint32 NumTrades = 8;
  if (has_numtrades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numtrades(), target);
  }

  // optional double BidVolume = 9;
  if (has_bidvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bidvolume(), target);
  }

  // optional double AskVolume = 10;
  if (has_askvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->askvolume(), target);
  }

  // optional uint32 IsFinalRecord = 11;
  if (has_isfinalrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->isfinalrecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataRecordResponse)
  return target;
}

int HistoricalPriceDataRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional sfixed64 StartDateTime = 2;
    if (has_startdatetime()) {
      total_size += 1 + 8;
    }

    // optional double OpenPrice = 3;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // optional double HighPrice = 4;
    if (has_highprice()) {
      total_size += 1 + 8;
    }

    // optional double LowPrice = 5;
    if (has_lowprice()) {
      total_size += 1 + 8;
    }

    // optional double LastPrice = 6;
    if (has_lastprice()) {
      total_size += 1 + 8;
    }

    // optional double Volume = 7;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // optional uint32 NumTrades = 8;
    if (has_numtrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numtrades());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double BidVolume = 9;
    if (has_bidvolume()) {
      total_size += 1 + 8;
    }

    // optional double AskVolume = 10;
    if (has_askvolume()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsFinalRecord = 11;
    if (has_isfinalrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalrecord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalPriceDataRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalPriceDataRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalPriceDataRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalPriceDataRecordResponse::MergeFrom(const HistoricalPriceDataRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_startdatetime()) {
      set_startdatetime(from.startdatetime());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_highprice()) {
      set_highprice(from.highprice());
    }
    if (from.has_lowprice()) {
      set_lowprice(from.lowprice());
    }
    if (from.has_lastprice()) {
      set_lastprice(from.lastprice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_numtrades()) {
      set_numtrades(from.numtrades());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidvolume()) {
      set_bidvolume(from.bidvolume());
    }
    if (from.has_askvolume()) {
      set_askvolume(from.askvolume());
    }
    if (from.has_isfinalrecord()) {
      set_isfinalrecord(from.isfinalrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalPriceDataRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataRecordResponse::CopyFrom(const HistoricalPriceDataRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataRecordResponse::IsInitialized() const {

  return true;
}

void HistoricalPriceDataRecordResponse::Swap(HistoricalPriceDataRecordResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(startdatetime_, other->startdatetime_);
    std::swap(openprice_, other->openprice_);
    std::swap(highprice_, other->highprice_);
    std::swap(lowprice_, other->lowprice_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(volume_, other->volume_);
    std::swap(numtrades_, other->numtrades_);
    std::swap(bidvolume_, other->bidvolume_);
    std::swap(askvolume_, other->askvolume_);
    std::swap(isfinalrecord_, other->isfinalrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalPriceDataRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalPriceDataRecordResponse_descriptor_;
  metadata.reflection = HistoricalPriceDataRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalPriceDataTickRecordResponse::kRequestIDFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kDateTimeFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kAtBidOrAskFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kPriceFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kVolumeFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kIsFinalRecordFieldNumber;
#endif  // !_MSC_VER

HistoricalPriceDataTickRecordResponse::HistoricalPriceDataTickRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataTickRecordResponse)
}

void HistoricalPriceDataTickRecordResponse::InitAsDefaultInstance() {
}

HistoricalPriceDataTickRecordResponse::HistoricalPriceDataTickRecordResponse(const HistoricalPriceDataTickRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataTickRecordResponse)
}

void HistoricalPriceDataTickRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  datetime_ = 0;
  atbidorask_ = 0;
  price_ = 0;
  volume_ = 0;
  isfinalrecord_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalPriceDataTickRecordResponse::~HistoricalPriceDataTickRecordResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataTickRecordResponse)
  SharedDtor();
}

void HistoricalPriceDataTickRecordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoricalPriceDataTickRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalPriceDataTickRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalPriceDataTickRecordResponse_descriptor_;
}

const HistoricalPriceDataTickRecordResponse& HistoricalPriceDataTickRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalPriceDataTickRecordResponse* HistoricalPriceDataTickRecordResponse::default_instance_ = NULL;

HistoricalPriceDataTickRecordResponse* HistoricalPriceDataTickRecordResponse::New() const {
  return new HistoricalPriceDataTickRecordResponse;
}

void HistoricalPriceDataTickRecordResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoricalPriceDataTickRecordResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(datetime_, isfinalrecord_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalPriceDataTickRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_DateTime;
        break;
      }

      // optional double DateTime = 2;
      case 2: {
        if (tag == 17) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AtBidOrAsk;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
      case 3: {
        if (tag == 24) {
         parse_AtBidOrAsk:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Price;
        break;
      }

      // optional double Price = 4;
      case 4: {
        if (tag == 33) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Volume;
        break;
      }

      // optional double Volume = 5;
      case 5: {
        if (tag == 41) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsFinalRecord;
        break;
      }

      // optional uint32 IsFinalRecord = 6;
      case 6: {
        if (tag == 48) {
         parse_IsFinalRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
          set_has_isfinalrecord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataTickRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataTickRecordResponse)
  return false;
#undef DO_
}

void HistoricalPriceDataTickRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional double DateTime = 2;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->datetime(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
  if (has_atbidorask()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->atbidorask(), output);
  }

  // optional double Price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price(), output);
  }

  // optional double Volume = 5;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->volume(), output);
  }

  // optional uint32 IsFinalRecord = 6;
  if (has_isfinalrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfinalrecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataTickRecordResponse)
}

::google::protobuf::uint8* HistoricalPriceDataTickRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional double DateTime = 2;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->datetime(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
  if (has_atbidorask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->atbidorask(), target);
  }

  // optional double Price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price(), target);
  }

  // optional double Volume = 5;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->volume(), target);
  }

  // optional uint32 IsFinalRecord = 6;
  if (has_isfinalrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfinalrecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataTickRecordResponse)
  return target;
}

int HistoricalPriceDataTickRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional double DateTime = 2;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

    // optional double Price = 4;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double Volume = 5;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsFinalRecord = 6;
    if (has_isfinalrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalrecord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalPriceDataTickRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalPriceDataTickRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalPriceDataTickRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalPriceDataTickRecordResponse::MergeFrom(const HistoricalPriceDataTickRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_atbidorask()) {
      set_atbidorask(from.atbidorask());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_isfinalrecord()) {
      set_isfinalrecord(from.isfinalrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalPriceDataTickRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataTickRecordResponse::CopyFrom(const HistoricalPriceDataTickRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataTickRecordResponse::IsInitialized() const {

  return true;
}

void HistoricalPriceDataTickRecordResponse::Swap(HistoricalPriceDataTickRecordResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(datetime_, other->datetime_);
    std::swap(atbidorask_, other->atbidorask_);
    std::swap(price_, other->price_);
    std::swap(volume_, other->volume_);
    std::swap(isfinalrecord_, other->isfinalrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalPriceDataTickRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalPriceDataTickRecordResponse_descriptor_;
  metadata.reflection = HistoricalPriceDataTickRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalPriceDataRecordResponse_Int::kRequestIDFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kStartDateTimeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kOpenPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kHighPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kLowPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kLastPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kNumTradesFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kBidVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kAskVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kIsFinalRecordFieldNumber;
#endif  // !_MSC_VER

HistoricalPriceDataRecordResponse_Int::HistoricalPriceDataRecordResponse_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataRecordResponse_Int)
}

void HistoricalPriceDataRecordResponse_Int::InitAsDefaultInstance() {
}

HistoricalPriceDataRecordResponse_Int::HistoricalPriceDataRecordResponse_Int(const HistoricalPriceDataRecordResponse_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataRecordResponse_Int)
}

void HistoricalPriceDataRecordResponse_Int::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  startdatetime_ = GOOGLE_LONGLONG(0);
  openprice_ = 0;
  highprice_ = 0;
  lowprice_ = 0;
  lastprice_ = 0;
  volume_ = 0;
  numtrades_ = 0u;
  bidvolume_ = 0;
  askvolume_ = 0;
  isfinalrecord_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalPriceDataRecordResponse_Int::~HistoricalPriceDataRecordResponse_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  SharedDtor();
}

void HistoricalPriceDataRecordResponse_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoricalPriceDataRecordResponse_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalPriceDataRecordResponse_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalPriceDataRecordResponse_Int_descriptor_;
}

const HistoricalPriceDataRecordResponse_Int& HistoricalPriceDataRecordResponse_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalPriceDataRecordResponse_Int* HistoricalPriceDataRecordResponse_Int::default_instance_ = NULL;

HistoricalPriceDataRecordResponse_Int* HistoricalPriceDataRecordResponse_Int::New() const {
  return new HistoricalPriceDataRecordResponse_Int;
}

void HistoricalPriceDataRecordResponse_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoricalPriceDataRecordResponse_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(startdatetime_, numtrades_);
  }
  ZR_(bidvolume_, isfinalrecord_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalPriceDataRecordResponse_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_StartDateTime;
        break;
      }

      // optional sfixed64 StartDateTime = 2;
      case 2: {
        if (tag == 17) {
         parse_StartDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
          set_has_startdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OpenPrice;
        break;
      }

      // optional int32 OpenPrice = 3;
      case 3: {
        if (tag == 24) {
         parse_OpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HighPrice;
        break;
      }

      // optional int32 HighPrice = 4;
      case 4: {
        if (tag == 32) {
         parse_HighPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highprice_)));
          set_has_highprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LowPrice;
        break;
      }

      // optional int32 LowPrice = 5;
      case 5: {
        if (tag == 40) {
         parse_LowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowprice_)));
          set_has_lowprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_LastPrice;
        break;
      }

      // optional int32 LastPrice = 6;
      case 6: {
        if (tag == 48) {
         parse_LastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastprice_)));
          set_has_lastprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Volume;
        break;
      }

      // optional int32 Volume = 7;
      case 7: {
        if (tag == 56) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_NumTrades;
        break;
      }

      // optional uint32 NumTrades = 8;
      case 8: {
        if (tag == 64) {
         parse_NumTrades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numtrades_)));
          set_has_numtrades();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_BidVolume;
        break;
      }

      // optional int32 BidVolume = 9;
      case 9: {
        if (tag == 72) {
         parse_BidVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume_)));
          set_has_bidvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_AskVolume;
        break;
      }

      // optional int32 AskVolume = 10;
      case 10: {
        if (tag == 80) {
         parse_AskVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume_)));
          set_has_askvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_IsFinalRecord;
        break;
      }

      // optional uint32 IsFinalRecord = 11;
      case 11: {
        if (tag == 88) {
         parse_IsFinalRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
          set_has_isfinalrecord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  return false;
#undef DO_
}

void HistoricalPriceDataRecordResponse_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional sfixed64 StartDateTime = 2;
  if (has_startdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->startdatetime(), output);
  }

  // optional int32 OpenPrice = 3;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->openprice(), output);
  }

  // optional int32 HighPrice = 4;
  if (has_highprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->highprice(), output);
  }

  // optional int32 LowPrice = 5;
  if (has_lowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lowprice(), output);
  }

  // optional int32 LastPrice = 6;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastprice(), output);
  }

  // optional int32 Volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->volume(), output);
  }

  // optional uint32 NumTrades = 8;
  if (has_numtrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numtrades(), output);
  }

  // optional int32 BidVolume = 9;
  if (has_bidvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bidvolume(), output);
  }

  // optional int32 AskVolume = 10;
  if (has_askvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->askvolume(), output);
  }

  // optional uint32 IsFinalRecord = 11;
  if (has_isfinalrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->isfinalrecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataRecordResponse_Int)
}

::google::protobuf::uint8* HistoricalPriceDataRecordResponse_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional sfixed64 StartDateTime = 2;
  if (has_startdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->startdatetime(), target);
  }

  // optional int32 OpenPrice = 3;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->openprice(), target);
  }

  // optional int32 HighPrice = 4;
  if (has_highprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->highprice(), target);
  }

  // optional int32 LowPrice = 5;
  if (has_lowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lowprice(), target);
  }

  // optional int32 LastPrice = 6;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastprice(), target);
  }

  // optional int32 Volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->volume(), target);
  }

  // optional uint32 NumTrades = 8;
  if (has_numtrades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numtrades(), target);
  }

  // optional int32 BidVolume = 9;
  if (has_bidvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bidvolume(), target);
  }

  // optional int32 AskVolume = 10;
  if (has_askvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->askvolume(), target);
  }

  // optional uint32 IsFinalRecord = 11;
  if (has_isfinalrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->isfinalrecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  return target;
}

int HistoricalPriceDataRecordResponse_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional sfixed64 StartDateTime = 2;
    if (has_startdatetime()) {
      total_size += 1 + 8;
    }

    // optional int32 OpenPrice = 3;
    if (has_openprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openprice());
    }

    // optional int32 HighPrice = 4;
    if (has_highprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highprice());
    }

    // optional int32 LowPrice = 5;
    if (has_lowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lowprice());
    }

    // optional int32 LastPrice = 6;
    if (has_lastprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastprice());
    }

    // optional int32 Volume = 7;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional uint32 NumTrades = 8;
    if (has_numtrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numtrades());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 BidVolume = 9;
    if (has_bidvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume());
    }

    // optional int32 AskVolume = 10;
    if (has_askvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume());
    }

    // optional uint32 IsFinalRecord = 11;
    if (has_isfinalrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalrecord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalPriceDataRecordResponse_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalPriceDataRecordResponse_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalPriceDataRecordResponse_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalPriceDataRecordResponse_Int::MergeFrom(const HistoricalPriceDataRecordResponse_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_startdatetime()) {
      set_startdatetime(from.startdatetime());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_highprice()) {
      set_highprice(from.highprice());
    }
    if (from.has_lowprice()) {
      set_lowprice(from.lowprice());
    }
    if (from.has_lastprice()) {
      set_lastprice(from.lastprice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_numtrades()) {
      set_numtrades(from.numtrades());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidvolume()) {
      set_bidvolume(from.bidvolume());
    }
    if (from.has_askvolume()) {
      set_askvolume(from.askvolume());
    }
    if (from.has_isfinalrecord()) {
      set_isfinalrecord(from.isfinalrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalPriceDataRecordResponse_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataRecordResponse_Int::CopyFrom(const HistoricalPriceDataRecordResponse_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataRecordResponse_Int::IsInitialized() const {

  return true;
}

void HistoricalPriceDataRecordResponse_Int::Swap(HistoricalPriceDataRecordResponse_Int* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(startdatetime_, other->startdatetime_);
    std::swap(openprice_, other->openprice_);
    std::swap(highprice_, other->highprice_);
    std::swap(lowprice_, other->lowprice_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(volume_, other->volume_);
    std::swap(numtrades_, other->numtrades_);
    std::swap(bidvolume_, other->bidvolume_);
    std::swap(askvolume_, other->askvolume_);
    std::swap(isfinalrecord_, other->isfinalrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalPriceDataRecordResponse_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalPriceDataRecordResponse_Int_descriptor_;
  metadata.reflection = HistoricalPriceDataRecordResponse_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalPriceDataTickRecordResponse_Int::kRequestIDFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kDateTimeFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kPriceFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kVolumeFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kAtBidOrAskFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kIsFinalRecordFieldNumber;
#endif  // !_MSC_VER

HistoricalPriceDataTickRecordResponse_Int::HistoricalPriceDataTickRecordResponse_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
}

void HistoricalPriceDataTickRecordResponse_Int::InitAsDefaultInstance() {
}

HistoricalPriceDataTickRecordResponse_Int::HistoricalPriceDataTickRecordResponse_Int(const HistoricalPriceDataTickRecordResponse_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
}

void HistoricalPriceDataTickRecordResponse_Int::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  datetime_ = 0;
  price_ = 0;
  volume_ = 0;
  atbidorask_ = 0;
  isfinalrecord_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalPriceDataTickRecordResponse_Int::~HistoricalPriceDataTickRecordResponse_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  SharedDtor();
}

void HistoricalPriceDataTickRecordResponse_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoricalPriceDataTickRecordResponse_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalPriceDataTickRecordResponse_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalPriceDataTickRecordResponse_Int_descriptor_;
}

const HistoricalPriceDataTickRecordResponse_Int& HistoricalPriceDataTickRecordResponse_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalPriceDataTickRecordResponse_Int* HistoricalPriceDataTickRecordResponse_Int::default_instance_ = NULL;

HistoricalPriceDataTickRecordResponse_Int* HistoricalPriceDataTickRecordResponse_Int::New() const {
  return new HistoricalPriceDataTickRecordResponse_Int;
}

void HistoricalPriceDataTickRecordResponse_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoricalPriceDataTickRecordResponse_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(datetime_, isfinalrecord_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalPriceDataTickRecordResponse_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_DateTime;
        break;
      }

      // optional double DateTime = 2;
      case 2: {
        if (tag == 17) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Price;
        break;
      }

      // optional int32 Price = 3;
      case 3: {
        if (tag == 24) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Volume;
        break;
      }

      // optional int32 Volume = 4;
      case 4: {
        if (tag == 32) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AtBidOrAsk;
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
      case 5: {
        if (tag == 40) {
         parse_AtBidOrAsk:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsFinalRecord;
        break;
      }

      // optional uint32 IsFinalRecord = 6;
      case 6: {
        if (tag == 48) {
         parse_IsFinalRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
          set_has_isfinalrecord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  return false;
#undef DO_
}

void HistoricalPriceDataTickRecordResponse_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional double DateTime = 2;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->datetime(), output);
  }

  // optional int32 Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 Volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (has_atbidorask()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->atbidorask(), output);
  }

  // optional uint32 IsFinalRecord = 6;
  if (has_isfinalrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfinalrecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
}

::google::protobuf::uint8* HistoricalPriceDataTickRecordResponse_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional double DateTime = 2;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->datetime(), target);
  }

  // optional int32 Price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 Volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (has_atbidorask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->atbidorask(), target);
  }

  // optional uint32 IsFinalRecord = 6;
  if (has_isfinalrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfinalrecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  return target;
}

int HistoricalPriceDataTickRecordResponse_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional double DateTime = 2;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional int32 Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

    // optional uint32 IsFinalRecord = 6;
    if (has_isfinalrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalrecord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalPriceDataTickRecordResponse_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalPriceDataTickRecordResponse_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalPriceDataTickRecordResponse_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalPriceDataTickRecordResponse_Int::MergeFrom(const HistoricalPriceDataTickRecordResponse_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_atbidorask()) {
      set_atbidorask(from.atbidorask());
    }
    if (from.has_isfinalrecord()) {
      set_isfinalrecord(from.isfinalrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalPriceDataTickRecordResponse_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataTickRecordResponse_Int::CopyFrom(const HistoricalPriceDataTickRecordResponse_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataTickRecordResponse_Int::IsInitialized() const {

  return true;
}

void HistoricalPriceDataTickRecordResponse_Int::Swap(HistoricalPriceDataTickRecordResponse_Int* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(datetime_, other->datetime_);
    std::swap(price_, other->price_);
    std::swap(volume_, other->volume_);
    std::swap(atbidorask_, other->atbidorask_);
    std::swap(isfinalrecord_, other->isfinalrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalPriceDataTickRecordResponse_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalPriceDataTickRecordResponse_Int_descriptor_;
  metadata.reflection = HistoricalPriceDataTickRecordResponse_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoricalPriceDataResponseTrailer::kRequestIDFieldNumber;
const int HistoricalPriceDataResponseTrailer::kFinalRecordLastDateTimeFieldNumber;
#endif  // !_MSC_VER

HistoricalPriceDataResponseTrailer::HistoricalPriceDataResponseTrailer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataResponseTrailer)
}

void HistoricalPriceDataResponseTrailer::InitAsDefaultInstance() {
}

HistoricalPriceDataResponseTrailer::HistoricalPriceDataResponseTrailer(const HistoricalPriceDataResponseTrailer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataResponseTrailer)
}

void HistoricalPriceDataResponseTrailer::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  finalrecordlastdatetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoricalPriceDataResponseTrailer::~HistoricalPriceDataResponseTrailer() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataResponseTrailer)
  SharedDtor();
}

void HistoricalPriceDataResponseTrailer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoricalPriceDataResponseTrailer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoricalPriceDataResponseTrailer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoricalPriceDataResponseTrailer_descriptor_;
}

const HistoricalPriceDataResponseTrailer& HistoricalPriceDataResponseTrailer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTCProtocol_2eproto();
  return *default_instance_;
}

HistoricalPriceDataResponseTrailer* HistoricalPriceDataResponseTrailer::default_instance_ = NULL;

HistoricalPriceDataResponseTrailer* HistoricalPriceDataResponseTrailer::New() const {
  return new HistoricalPriceDataResponseTrailer;
}

void HistoricalPriceDataResponseTrailer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoricalPriceDataResponseTrailer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(finalrecordlastdatetime_, requestid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoricalPriceDataResponseTrailer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_FinalRecordLastDateTime;
        break;
      }

      // optional double FinalRecordLastDateTime = 2;
      case 2: {
        if (tag == 17) {
         parse_FinalRecordLastDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &finalrecordlastdatetime_)));
          set_has_finalrecordlastdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataResponseTrailer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataResponseTrailer)
  return false;
#undef DO_
}

void HistoricalPriceDataResponseTrailer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional double FinalRecordLastDateTime = 2;
  if (has_finalrecordlastdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->finalrecordlastdatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataResponseTrailer)
}

::google::protobuf::uint8* HistoricalPriceDataResponseTrailer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional double FinalRecordLastDateTime = 2;
  if (has_finalrecordlastdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->finalrecordlastdatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataResponseTrailer)
  return target;
}

int HistoricalPriceDataResponseTrailer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional double FinalRecordLastDateTime = 2;
    if (has_finalrecordlastdatetime()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoricalPriceDataResponseTrailer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoricalPriceDataResponseTrailer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoricalPriceDataResponseTrailer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoricalPriceDataResponseTrailer::MergeFrom(const HistoricalPriceDataResponseTrailer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_finalrecordlastdatetime()) {
      set_finalrecordlastdatetime(from.finalrecordlastdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoricalPriceDataResponseTrailer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataResponseTrailer::CopyFrom(const HistoricalPriceDataResponseTrailer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataResponseTrailer::IsInitialized() const {

  return true;
}

void HistoricalPriceDataResponseTrailer::Swap(HistoricalPriceDataResponseTrailer* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(finalrecordlastdatetime_, other->finalrecordlastdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoricalPriceDataResponseTrailer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoricalPriceDataResponseTrailer_descriptor_;
  metadata.reflection = HistoricalPriceDataResponseTrailer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DTC_PB

// @@protoc_insertion_point(global_scope)
